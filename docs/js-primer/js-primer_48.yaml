- en: ユニットテストを記述する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jsprimer.net/use-case/nodecli/refactor-and-unittest/`](https://jsprimer.net/use-case/nodecli/refactor-and-unittest/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: このセクションでは、これまで作成したCLIアプリケーションにユニットテストを導入します。 ユニットテストの導入と合わせて、ソースコードを整理してテストがしやすくなるようにモジュール化します。
  prefs: []
  type: TYPE_NORMAL
- en: 前のセクションまでは、すべての処理をひとつのJavaScriptファイルに記述していました。 ユニットテストを行うためにはテスト対象がモジュールとして分割されていなければいけません。
    今回のアプリケーションでは、CLIアプリケーションとしてコマンドライン引数を処理する部分と、MarkdownをHTMLへ変換する部分に分割します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#split-script)*アプリケーションをモジュールに分割する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*実際にアプリケーションのモジュール化をする前に、ECMAScriptモジュールにおけるエクスポートについて簡単に振り返ります。'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScriptモジュールでは`export`文を使って変数や関数などのオブジェクトをエクスポートし、他のスクリプトから利用できるようにします。 次の`greet.js`というファイルは、`greet`関数をエクスポートするモジュールの例です。
  prefs: []
  type: TYPE_NORMAL
- en: greet.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: このモジュールを利用する側では、`import`文を使って指定したファイルパスのJavaScriptファイルをインポートできます。 次のコードでは先ほどの`greet.js`のパスを指定してモジュールとしてインポートして、エクスポートされた`greet`関数を利用しています。
  prefs: []
  type: TYPE_NORMAL
- en: greet-main.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: これから行うアプリケーションのモジュール化とは、このようにアプリケーションの一部分を別のファイルに切り出した上で、必要なオブジェクトをエクスポートして外部から利用可能にするということです。
    機能をモジュールとして切り出すことで、アプリケーションとユニットテストの両方から利用できるようになります。
  prefs: []
  type: TYPE_NORMAL
- en: それではCLIアプリケーションのソースコードをモジュールに分割してみましょう。 `md2html.js`という名前のJavaScriptファイルを作成し、次のようにmarkedを使ったMarkdownの変換処理を記述します。
  prefs: []
  type: TYPE_NORMAL
- en: md2html.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: このモジュールがエクスポートするのは、与えられたオプションを元にMarkdown 文字列をHTMLに変換する関数です。 アプリケーションのエントリーポイントである`main.js`では、次のようにこのモジュールをインポートして使用します。
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: markedパッケージや、そのオプションに関する記述がひとつの`md2html`関数に隠蔽され、`main.js`がシンプルになりました。 そして`md2html.js`はアプリケーションから独立したひとつのモジュールとして切り出され、ユニットテストが可能になりました。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#create-env)*ユニットテスト実行環境を作る*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ユニットテストの実行にはさまざまな方法があります。 このセクションではテスティングフレームワークとして[Mocha](https://mochajs.org/)を使って、ユニットテストの実行環境を作成します。
    Mochaが提供するテスト実行環境では、グローバルに`it`や`describe`などの関数が定義されます。 `it`関数はその内部でエラーが発生したとき、そのテストを失敗として扱います。
    つまり、期待する結果と異なるならエラーを投げ、期待どおりならエラーを投げないというテストコードを書くことになります。'
  prefs: []
  type: TYPE_NORMAL
- en: 今回はNode.jsの標準モジュールのひとつである[assertモジュール](https://nodejs.org/api/assert.html)から提供される`assert.strictEqual`メソッドを利用します。
    `assert.strictEqual`メソッドは第一引数と第二引数の評価結果が`===`で比較して異なる場合に、例外を投げる関数です。
  prefs: []
  type: TYPE_NORMAL
- en: Mochaによるテスト環境を作るために、まずは次のコマンドで`mocha`パッケージをインストールします。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`--save-dev`オプションは、パッケージを`devDependencies`としてインストールするためのものです。 `package.json`の`devDependencies`には、そのパッケージを開発するときだけ必要な依存ライブラリを記述します。'
  prefs: []
  type: TYPE_NORMAL
- en: ユニットテストを実行するには、Mochaが提供する`mocha`コマンドを使います。 Mochaをインストールした後、`package.json`の`scripts`プロパティを次のように記述します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'この記述により、`npm test`コマンドを実行すると、`mocha`コマンドで`test/`ディレクトリにあるテストファイルを実行します。 試しに`npm
    test`コマンドを実行し、Mochaによるテストが行われることを確認しましょう。 まだテストファイルを作っていないので、`Error: No test files
    found`というエラーが表示されます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[](#write-unit-test)*��ニットテストを記述する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*テストの実行環境ができたので、実際にユニットテストを記述します。 Mochaのユニットテストは`test`ディレクトリの中にJavaScriptファイルを配置して記述します。
    `test/md2html-test.js`ファイルを作成し、`md2html.js`に対するユニットテストを次のように記述します。'
  prefs: []
  type: TYPE_NORMAL
- en: '`it`関数は第一引数にテストのタイトルを入れ、第二引数にテストの内容を記述します。'
  prefs: []
  type: TYPE_NORMAL
- en: test/md2html-test.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`it`関数で定義したユニットテストは、`md2html`関数の変換結果が期待するものになっているかをテストしています。 `test/fixtures`ディレクトリにはユニットテストで用いるファイルを配置しています。
    今回は変換元のMarkdownファイルと、期待する変換結果のHTMLファイルが存在します。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のように変換元のMarkdownファイルを`test/fixtures/sample.md`に配置します。
  prefs: []
  type: TYPE_NORMAL
- en: test/fixtures/sample.md
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: そして、期待する変換結果のHTMLファイルも`test/fixtures`ディレクトリに配置します。 `gfm`オプションの有無にあわせて、`expected.html`と`expected-gfm.html`の2つを次のように作成しましょう。
  prefs: []
  type: TYPE_NORMAL
- en: test/fixtures/expected.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: test/fixtures/expected-gfm.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: ユニットテストの準備ができたら、もう一度`npm test`コマンドを実行しましょう。2 件のテストが通れば成功です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ユニットテストが通らなかった場合は、次のことを確認してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '`test/fixtures`ディレクトリに`sample.md`と`expected.html`、`expected-gfm.html`というファイルを作成したか'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: それぞれのファイルは文字コードがUTF-8で、改行コードがLFになっているか
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: それぞれのファイルに余計な文字が入っていないか
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: たとえば、`npm test`を実行して次のようにテストが失敗している場合のエラーメッセージを見てみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: このテスト結果では `converts Markdown to HTML (GFM=true)` というタイトルのテストが1つ失敗していることがわかります。
    また、`+ actual - expected`には、`assert.strictEqual`で比較した結果が一致していない部分が表示されています。 この場合は、expected（期待する結果）の末尾に`;;;`という不要な文字列が入ってしまっているのが、テストが失敗している理由です。
    そのため、`expected-gfm.html`ファイルを確認し不要な`;;;`という文字列を取り除けば、テストが通るようになるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#reason-for-unit-test)*なぜユニットテストを行うのか*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*ユニットテストを実施することには多くの利点があります。 早期にバグが発見できることや、安心してリファクタリングを行えるようになるのはもちろんですが、
    ユニットテストが可能な状態を保つこと自体に意味があります。 実際にテストを行わなくてもテストしやすいコードになるよう心がけることが、アプリケーションを適切にモジュール化する指針になります。'
  prefs: []
  type: TYPE_NORMAL
- en: またユニットテストには生きたドキュメントとしての側面もあります。 ドキュメントはこまめにメンテナンスされないとすぐに実際のコードと齟齬が生まれてしまいますが、
    ユニットテストはそのモジュールが満たすべき仕様を表すドキュメントとして機能します。
  prefs: []
  type: TYPE_NORMAL
- en: ユニットテストの記述は手間がかかるだけのようにも思えますが、 中長期的にアプリケーションをメンテナンスする場合にはかかせないものです。 そしてよいテストを書くためには、日頃からテストを書く習慣をつけておくことが重要です。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#unit-test-summary)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*このユースケースの目標であるNode.jsを使ったCLIアプリケーションの作成と、ユニットテストの導入ができました。 npmを使ったパッケージ管理や外部モジュールの利用、`fs`モジュールを使ったファイル操作など、多くの要素が登場しました。
    これらはNode.jsアプリケーション開発においてほとんどのユースケースで応用されるものなので、よく理解しておきましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**   Markdownの変換処理をECMAScriptモジュールとして`md2html.js`に切り出し、`main.js`から読み込んだ'
  prefs: []
  type: TYPE_NORMAL
- en: mochaパッケージをインストールし、`npm test`コマンドで`mocha`コマンドを実行できることを確認した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md2html`関数のユニットテストを作成し、テストの実行結果を確認した******'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
