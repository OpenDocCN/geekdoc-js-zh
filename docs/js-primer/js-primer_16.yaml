- en: 条件分岐
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jsprimer.net/basic/condition/`](https://jsprimer.net/basic/condition/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: この章ではif 文やswitch 文を使った条件分岐について学んでいきます。 条件分岐を使うことで、特定の条件を満たすかどうかで行う処理を変更できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#if-statement)*if 文*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*if 文を使うことで、プログラム内に条件分岐を書けます。'
  prefs: []
  type: TYPE_NORMAL
- en: if 文は次のような構文が基本形となります。 `条件式`の評価結果が`true`であるならば、`実行する文`が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 次のコードでは`条件式`が`true`であるため、ifの中身が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`実行する文`が1つのみの場合は、`{` と `}` のブロックを省略できます。 しかし、どこまでがif 文かがわかりにくくなるため、常にブロックで囲むことを推奨します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: if 文は`条件式`に比較演算子などを使い、その比較結果によって処理を分岐するためによく使われます。 次のコードでは、`x`が`10`よりも大きな値である場合に、if
    文の中身が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: if 文の`条件式`には`true`または`false`といった真偽値以外の値も指定できます。 真偽値以外の値の場合、その値を暗黙的に真偽値へ変換してから、条件式として判定します。
  prefs: []
  type: TYPE_NORMAL
- en: 真偽値へ変換すると`true`となる値の種類は多いため、逆に変換した結果が`false`となる値を覚えるのが簡単です。 次の値は真偽値へと変換すると`false`となるため、これらは**falsy**な値と呼ばれます（「暗黙的な型変換」の章を参照）。
  prefs: []
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0n`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NaN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`""`（空文字列）'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: falsyではない値は、`true`へと変換されます。 そのため、`"文字列"`や0 以外の数値などを`条件式`に指定した場合は、`true`へと変換してから条件式として判定します。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、条件式が`true`へと変換されるため、if 文の中身が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: falsyな値を`条件式`に指定した場合は、`false`へと変換されます。 次のコードは、条件式が`false`へと変換されるため、if 文の中身は実行されません。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[](#else-if-statement)*else if 文*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*複数の条件分岐を書く場合は、if 文に続けてelse if 文を使うことで書けます。 たとえば、次の3つの条件分岐するプログラムを考えます。'
  prefs: []
  type: TYPE_NORMAL
- en: '`version` が `"ES5"` ならば `"ECMAScript 5"` と出力'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version` が `"ES6"` ならば `"ECMAScript 2015"` と出力'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version` が `"ES7"` ならば `"ECMAScript 2016"` と出力'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 次のコードでは、if 文とelse if 文を使うことで3つの条件を書いています。 変数`version`の値が`"ES6"`であるため、コンソールには`"ECMAScript
    2015"`が出力されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[](#else-statement)*else 文*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*if 文とelse if 文では、条件に一致した場合の処理をブロック内に書いていました。 一方で条件に一致しなかった場合の処理は、else 文を使うことで書けます。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、変数`num`の数値が10より大きいかを判定しています。 `num`の値は10 以下であるため、else 文で書いた処理が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[](#nested-if-statement)*ネストしたif 文*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*if 文、else if 文、else 文はネストして書けます。 次のように複数の条件を満たすかどうかをif 文のネストとして表現できます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: ネストしたif 文���例として、今年がうるう年かを判定してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: うるう年の条件は次のとおりです。
  prefs: []
  type: TYPE_NORMAL
- en: 西暦で示した年が4で割り切れる年はうるう年です
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ただし、西暦で示した年が100で割り切れる年はうるう年ではありません
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ただし、西暦で示した年が400で割り切れる年はうるう年です
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 西暦での現在の年は `new Date().getFullYear();` で取得できます。 このうるう年の条件をif 文で表現すると次のように書けます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 条件を上から順に書き下したため、ネストが深い文となってしまっています。 一般的にはネストは浅いほうが、読みやすいコードとなります。
  prefs: []
  type: TYPE_NORMAL
- en: 条件を少し読み解くと、400で割り切れる年は無条件にうるう年であることがわかります。 そのため、条件を並び替えることで、ネストするif 文なしに書くことができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[](#switch-statement)*switch 文*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*switch 文は、次のような構文で`式`の評価結果が指定した値である場合に行う処理を並べて書きます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: switch 文はif 文と同様に`式`の評価結果に基づく条件分岐を扱います。 またbreak 文は、switch 文から抜けてswitch 文の次の文から実行するためのものです。
    次のコードでは、`version`の評価結果は`"ES6"`となるため、`case "ES6":`に続く文が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: これはif 文で次のように書いた場合と同じ結果になります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: switch 文はやや複雑な仕組みであるため、どのように処理されているかを見ていきます。 まず `switch (式)` の`式`を評価します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 次に`式`の評価結果が厳密等価演算子（`===`）で一致するラベルを探索します。 一致するラベルが存在する場合は、そのcase 節を実行します。 一致する`ラベル`が存在しない場合は、default
    節が実行されます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[](#break-statement)*break 文*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*switch 文のcase 節では基本的に`break;`を使ってswitch 文を抜けるようにします。 この`break;`は省略が可能ですが、省略した場合、後ろに続くcase
    節が条件に関係なく実行されます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: このように`break;`を忘れてしまうと意図しないcase 節が実行されてしまいます。 そのため、case 節とbreak 文が多用されているswitch
    文が出てきた場合、 別の方法で書けないかを考えるべきサインとなります。
  prefs: []
  type: TYPE_NORMAL
- en: switch 文はif 文の代用として使うのではなく、次のように関数と組み合わせて条件に対する値を返すパターンとして使うことが多いです。 関数については「関数と宣言」の章を参照してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[](#conclusion)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*この章では条件分岐について学びました。'
  prefs: []
  type: TYPE_NORMAL
- en: if 文、else if 文、else 文で条件分岐した処理を扱える
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 条件式に指定した値は真偽値へと変換してから判定される
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 真偽値に変換すると`false`となる値をfalsyと呼ぶ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: switch 文とcase 節、default 節を組み合わせて条件分岐した処理を扱える
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: case 節でbreak 文を省略した場合は、後ろに続くcase 節が実行される。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 条件分岐にはif 文やswitch 文を利用します。複雑な条件を定義する場合には、if 文のネストが深くなりやすいです。そのような場合には、条件式自体を見直してよりシンプルな条件にできないかを考えてみることも重要です。
  prefs: []
  type: TYPE_NORMAL
