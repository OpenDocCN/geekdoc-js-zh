- en: イベントとモデル
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件与模型
- en: 原文：[`jsprimer.net/use-case/todoapp/event-model/`](https://jsprimer.net/use-case/todoapp/event-model/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/use-case/todoapp/event-model/`](https://jsprimer.net/use-case/todoapp/event-model/)
- en: Todoアイテムを追加する機能を実装しましたが、イベントを受け取って直接 DOMを更新する方法には柔軟性がないという問題があります。 また「Todoアイテムの更新」という機能を実装するには、追加したTodoアイテム要素を識別する方法が必要です。
    具体的には、Todoアイテムごとに`id`属性などのユニークな識別子がないため、特定のアイテムを指定して更新や削除をする機能が実装できません。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了添加Todo项的功能，但直接更新DOM的方法缺乏灵活性。此外，“Todo项更新”功能的实现需要识别添加的Todo项元素。具体来说，由于每个Todo项没有唯一的标识符（如id属性），因此无法实现指定特定项进行更新或删除的功能。
- en: このセクションでは、まずどのような点で柔軟性の問題が起きやすいのかを見ていきます。 そして、柔軟性や識別子の問題を解決するために**モデル**という概念を導入し、「Todoアイテムの追加」の機能をリファクタリングしていきます。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们首先探讨在哪些方面容易出现灵活性问题。然后，为了解决灵活性和标识符的问题，引入“模型”这一概念，并对“添加Todo项”的功能进行重构。
- en: '[](#direct-dom-modification-issue)*直接 DOMを更新する問題*'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#direct-dom-modification-issue)*直接更新DOM的问题*'
- en: '*「Todoアイテムの追加を実装する」では、操作した結果発生したイベントという入力に対して、DOM（表示）を直接更新していました。 そのため、TodoリストにTodoアイテムが何個あるか、どのようなアイテムがあるかという状態がDOM
    上にしか存在しないことになります。'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*在“实现Todo项添加”中，对于操作结果发生的事件输入，直接更新DOM（显示）。因此，Todo列表中Todo项的数量以及具体有哪些项的状态仅存在于DOM上。'
- en: この場合にTodoアイテムの状態を更新するには、HTML 要素にTodoアイテムの情報（タイトルや識別子となるidなど）をすべて埋め込む必要があります。
    しかし、HTML 要素は文字列しか扱えないため、Todoアイテムのデータを文字列にしないといけないという制限が発生します。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，要更新Todo项的状态，需要将Todo项的信息（如标题或作为标识符的id）全部嵌入到HTML元素中。然而，HTML元素只能处理字符串，因此必须将Todo项的数据转换为字符串，这导致了一些限制。
- en: また、1つの操作に対して複数の箇所の表示が更新されることもあります。 今回のTodoアプリでもTodoリスト（`#js-todo-list`）とTodoアイテム数（`#js-todo-count`）の2
    箇所を更新する必要があります。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 也有可能对单个操作更新多个显示区域。在本例的Todo应用中，需要更新Todo列表（`#js-todo-list`）和Todo项数量（`#js-todo-count`）两个区域。
- en: 次の表に**操作**に対して更新する**表示**をまとめてみます。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面将根据此表总结出针对**操作**更新**显示**的内容。
- en: '| 機能 | 操作 | 表示 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 操作 | 显示 |'
- en: '| --- | --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Todoアイテムの追加 | フォームを入力して送信 | Todoリスト（`#js-todo-list`）にTodoアイテム要素を作成して子要素として追加。合わせてTodoアイテム数（`#js-todo-count`）を更新
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Todo项添加 | 输入表单并提交 | 在Todo列表（`#js-todo-list`）中创建Todo项元素并将其作为子元素添加。同时更新Todo项数量（`#js-todo-count`）
    |'
- en: '| Todoアイテムの更新 | チェックボックスをクリック | Todoリスト（`#js-todo-list`）にある指定したTodoアイテム要素のチェック状態を更新
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Todo项更新 | 点击复选框 | 更新Todo列表（`#js-todo-list`）中指定Todo项元素的复选框状态 |'
- en: '| Todoアイテムの削除 | 削除ボタンをクリック | Todoリスト（`#js-todo-list`）にある指定したTodoアイテム要素を削除。合わせてTodoアイテム数（`#js-todo-count`）を更新
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| Todo项删除 | 点击删除按钮 | 删除Todo列表（`#js-todo-list`）中指定的Todo项元素。同时更新Todo项数量（`#js-todo-count`）
    |'
- en: 1つの操作に対する表示の更新箇所が増えるほど、操作に対する処理（リスナーの処理）が複雑化していくことが予想できます。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 随着对单个操作的显示更新区域增加，对操作的处理的复杂性（监听器的处理）也会增加。
- en: ここでは、次の2つの問題が見つかりました。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们发现了两个问题。
- en: Todoリストの状態がDOM 上にしか存在しないため、状態をすべてDOM 上に文字列で埋め込まないといけない
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Todo列表的状态仅存在于DOM上，因此必须将所有状态以字符串的形式嵌入到DOM上。
- en: 操作に対して更新する表示箇所が増えてくると、表示の処理が複雑化する
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着对操作更新显示区域的增加，显示的处理会变得更加复杂。
- en: '[](#introduce-model)*モデルを導入する*'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#introduce-model)*引入模型*'
- en: '*この問題を避けるために、Todoアイテムという情報をJavaScriptクラスとしてモデル化します。 ここでのモデルとはTodoアイテムやTodoリストなどの**モノの状態や操作方法**を定義したオブジェクトという意味です。
    クラスでは操作方法はメソッドとして実装し、状態はインスタンスのプロパティで管理できるため、今回はクラスでモデルを表現します。'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了避免这个问题，我们将Todo项信息以JavaScript类的方式模型化。这里的模型是指定义了Todo项或Todo列表等**对象的状态和操作方法**的对象。在类中，操作方法以方法的形式实现，状态以实例属性管理。因此，这次我们用类来表示模型。'
- en: たとえば、Todoリストを表現するモデルとして`TodoListModel`クラスを考えます。 TodoリストにはTodoアイテムを追加できるので、TodoListModelに`addItem`というメソッドがあると良さそうです。
    また、Todoリストからアイテムの一覧を取得できる必要もあるので、TodoListModelに`getAllItems`というメソッドも必要そうです。 このようにTodoリストをクラスで表現する際に、オブジェクトがどのような処理や状態を持つかを考えて実装します。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以考虑使用`TodoListModel`类来表示Todo列表。由于Todo列表可以添加Todo项，因此`TodoListModel`应该有一个`addItem`方法。此外，还需要从Todo列表获取项列表，因此`TodoListModel`也需要一个`getAllItems`方法。在用类表示Todo列表时，需要考虑对象应该具有哪些处理或状态，并进行实现。
- en: このようにモデルを考えた後、先ほどの操作と表示の間にモデルを入れることを考えてみます。 「フォームを入力して送信」という**操作**をした場合には、`TodoListModel`（Todoリスト）に対して`TodoItemModel`（Todoアイテム）を追加します。
    そして、`TodoListModel`からTodoアイテムの一覧を取得し、それを元にDOMを組み立て、**表示**を更新します。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这样考虑模型之后，我们可以考虑在先前的操作和显示之间插入模型。例如，当执行“输入表单并提交”的**操作**时，就会向`TodoListModel`（Todo列表）添加`TodoItemModel`（Todo项）。然后，从`TodoListModel`获取Todo项列表，并根据它构建DOM，**更新**显示。
- en: 先ほどの表にモデルを入れてみます。 **操作**に対する**モデルの処理**はさまざまですが、**操作**に対する**表示**の処理はどの場合も同じになります。
    これは表示箇所が増えた場合でも**表示**の処理の複雑さが一定に保てることを意味しています。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型引入先前的表中。对于**操作**的**模型处理**可能各不相同，但对于**操作**的**显示处理**，在所有情况下都是相同的。这意味着即使显示区域增加，显示处理的复杂性也能保持一定。
- en: '| 機能 | 操作 | モデルの処理 | 表示 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 操作 | 模型的处理 | 显示 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Todoアイテムの追加 | フォームを入力して送信 | `TodoListModel`へ新しい`TodoItemModel`を追加 | `TodoListModel`を元に表示を更新
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Todo项添加 | 输入表单并提交 | 向`TodoListModel`添加新的`TodoItemModel` | 根据`TodoListModel`更新显示
    |'
- en: '| Todoアイテムの更新 | チェックボックスをクリック | `TodoListModel`の指定した`TodoItemModel`の状態を更新 |
    `TodoListModel`を元に表示を更新 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Todo项更新 | 点击复选框 | 更新`TodoListModel`中指定`TodoItemModel`的状态 | 根据`TodoListModel`更新显示
    |'
- en: '| Todoアイテムの削除 | 削除ボタンをクリック | `TodoListModel`から指定の`TodoItemModel`を削除 | `TodoListModel`を元に表示を更新
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Todo项删除 | 点击删除按钮 | 从`TodoListModel`中删除指定的`TodoItemModel` | 根据`TodoListModel`更新显示
    |'
- en: この表を元に改めて先ほどの問題点を見ていきましょう。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此表重新审视先前的难题。
- en: Todoリストの状態がDOM 上にしか存在しないため、状態をすべてDOM 上に文字列で埋め込まないといけない
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于Todo列表的状态仅存在于DOM上，因此必须将所有状态以字符串的形式嵌入到DOM上。
- en: モデルであるクラスのインスタンスを参照すれば、Todoアイテムの情報が手に入ります。 またモデルはただのJavaScriptクラスであるため、文字列ではない情報も保持できます。
    そのため、DOMにすべての情報を埋め込む必要はありません。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引用模型类实例，可以获得Todo项的信息。由于模型只是JavaScript类，因此可以保持非字符串信息。因此，不需要将所有信息嵌入到DOM中。
- en: 操作に対して更新する表示箇所が増えてくると、表示の処理が複雑化する
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随着对操作更新显示区域的增加，显示的处理会变得更加复杂。
- en: 表示はモデルの状態を元にしてHTML 要素を作成し、表示を更新します。 モデルの状態が変化していなければ、表示は変わらなくても問題ありません。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 显示是基于模型的状态来创建HTML元素并更新显示的。如果模型的状态没有变化，那么即使显示没有变化也没有问题。
- en: 因此，您应该在模型状态发生变化时更新显示，而不是在操作发生时更新显示。 具体来说，应该是“当`TodoListModel`的状态发生变化时”更新显示，而不是“输入表单并提交”后更新显示。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您应该在模型状态发生变化时更新显示，而不是在操作发生时更新显示。具体来说，应该是“当`TodoListModel`的状态发生变化时”更新显示，而不是“输入表单并提交”后更新显示。
- en: 因此，显示端需要知道`TodoListModel`的状态何时发生变化。 这里再次出现的是事件。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，显示端需要知道`TodoListModel`的状态何时发生变化。这里再次出现的是事件。
- en: '[](#model-and-event)*传递模型变化的事件*'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#model-and-event)*传递模型变化的事件*'
- en: '*当提交表单时，会触发来自 form 元素的`submit`事件。 类似地，当`TodoListModel`的状态发生变化时，会向自身分发`change`事件。
    显示端只需监听该事件，当事件发生时更新显示即可。'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*当提交表单时，会触发来自 form 元素的`submit`事件。 类似地，当`TodoListModel`的状态发生变化时，会向自身分发`change`事件。
    显示端只需监听该事件，当事件发生时更新显示即可。'
- en: '`TodoListModel`的状态变化包括“向`TodoListModel`添加新的`TodoItemModel`”等情况。 由于上表中的“模型处理”中的某些状态发生了变化，因此需要更新显示。'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoListModel`的状态变化包括“向`TodoListModel`添加新的`TodoItemModel`”等情况。 由于上表中的“模型处理”中的某些状态发生了变化，因此需要更新显示。'
- en: 如果模型中也可以使用 DOM API 的事件机制，那么似乎可以创建一个机制，当模型更新时更新显示。 在浏览器的 DOM API 中，可以使用称为`EventTarget`的事件机制。
    在 Node.js 中，可以使用名为`events`的内置模块来实现类似的事件机制。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型中也可以使用 DOM API 的事件机制，那么似乎可以创建一个机制，当模型更新时更新显示。 在浏览器的 DOM API 中，可以使用称为`EventTarget`的事件机制。
    在 Node.js 中，可以使用名为`events`的内置模块来实现类似的事件机制。
- en: 虽然使用执行环境提供的事件机制很容易，但为了理解事件机制，让我们尝试创建一个具有分发和监听事件功能的类。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用执行环境提供的事件机制很容易，但为了理解事件机制，让我们尝试创建一个具有分发和监听事件功能的类。
- en: 虽然听起来很困难，但是通过使用之前学到的类和回调函数等内容，可以实现这一点。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然听起来很困难，但是通过使用之前学到的类和回调函数等内容，可以实现这一点。
- en: '[](#event-emitter)*EventEmitter*'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#event-emitter)*EventEmitter*'
- en: '*事件机制是由“分发事件的一方”和“监听事件的一方”两个方面组成。 有时会自己分发事件并自己监听事件。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*事件机制是由“分发事件的一方”和“监听事件的一方”两个方面组成。 有时会自己分发事件并自己监听事件。'
- en: 这种事件机制的另一种说法是“当分发事件时，调用已注册的回调函数（事件监听器）”，这样就可以理解了。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种事件机制的另一种说法是“当分发事件时，调用已注册的回调函数（事件监听器）”，这样就可以理解了。
- en: 要更新显示以反映模型的更新，只需创建一个“当`TodoListModel`更新时调用指定的回调函数”类即可实现目的。 但是，“当`TodoListModel`更新时”是非常具体的处理，因此每次增加模型时都要在每个模型中实现相同的处理是很困难的。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新显示以反映模型的更新，只需创建一个“当`TodoListModel`更新时调用指定的回调函数”类即可实现目的。 但是，“当`TodoListModel`更新时”是非常具体的处理，因此每次增加模型时都要在每个模型中实现相同的处理是很困难的。
- en: 因此，我们将创建一个名为`EventEmitter`的类，该类具有在分发事件时调用已注册的回调函数（事件监听器）的功能。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将创建一个名为`EventEmitter`的类，该类具有在分发事件时调用已注册的回调函数（事件监听器）的功能。
- en: 父类（`EventEmitter`）：在分发事件时调用已注册的回调函数（事件监听器）的类
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父类（`EventEmitter`）：在分发事件时调用已注册的回调函数（事件监听器）的类
- en: 子类（`TodoListModel`）：在更新值时，调用已注册的回调函数的类
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类（`TodoListModel`）：在更新值时，调用已注册的回调函数的类
- en: 首先，我们将创建父类`EventEmitter`。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建父类`EventEmitter`。
- en: '`EventEmitter`是一个具有分发和监听功能的事件机制类。'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventEmitter`是一个具有分发和监听功能的事件机制类。'
- en: 分发端：`emit`方法调用已注册的所有回调函数以指定的`事件名称`
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发端：`emit`方法调用已注册的所有回调函数以指定的`事件名称`
- en: 监听端：`addEventListener`方法允许为指定的`事件名称`注册任意的回调函数
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听端：`addEventListener`方法允许为指定的`事件名称`注册任意的回调函数
- en: 通过这样做，您可以调用`emit`方法来调用与指定事件相关的已注册回调函数。 这种模式也被称为观察者模式，并且在许多执行环境中（如浏览器和 Node.js）存在类似的
    API。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您可以调用`emit`方法来调用与指定事件相关的已注册回调函数。 这种模式也被称为观察者模式，并且在许多执行环境中（如浏览器和 Node.js）存在类似的
    API。
- en: 下面的代码将`EventEmitter`类定义为`src/EventEmitter.js`。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将`EventEmitter`类定义为`src/EventEmitter.js`。
- en: src/EventEmitter.js
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: src/EventEmitter.js
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 使用这个`EventEmitter`，您可以使用以下方式来监听事件和分发事件。 监听端使用`addEventListener`方法为事件类型（`type`）注册事件监听器（`listener`）。
    分发端使用`emit`方法分发事件并调用事件监听器。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个`EventEmitter`，您可以使用以下方式来监听事件和分发事件。 监听端使用`addEventListener`方法为事件类型（`type`）注册事件监听器（`listener`）。
    分发端使用`emit`方法分发事件并调用事件监听器。
- en: 在下面的代码中，我们使用`addEventListener`方法为`test-event`事件注册了两个事件监听器。 因此，当使用`emit`方法分发`test-event`事件时，已注册的事件监听器被调用。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们使用`addEventListener`方法为`test-event`事件注册了两个事件监听器。 因此，当使用`emit`方法分发`test-event`事件时，已注册的事件监听器被调用。
- en: EventEmitter 的执行示例
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: EventEmitter 的执行示例
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[](#event-emitter-todolist-model)*继承自 EventEmitter 的 TodoList 模型*'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#event-emitter-todolist-model)*继承自 EventEmitter 的 TodoList 模型*'
- en: '*接下来，我们将创建继承自创建的`EventEmitter`类的`TodoListModel`类。 创建一个新的`src/model/`目录，并在该目录中创建实现每个模型类的文件。'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来，我们将创建继承自创建的`EventEmitter`类的`TodoListModel`类。 创建一个新的`src/model/`目录，并在该目录中创建实现每个模型类的文件。'
- en: 要创建的模型是表示 Todo 列表的`TodoListModel`和表示每个 Todo 项目的`TodoItemModel`。 `TodoListModel`通过保存多个`TodoItemModel`来表示
    Todo 列表。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建的模型是表示 Todo 列表的`TodoListModel`和表示每个 Todo 项目的`TodoItemModel`。 `TodoListModel`通过保存多个`TodoItemModel`来表示
    Todo 列表。
- en: '`TodoListModel`：表示 Todo 列表的模型'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoListModel`：表示 Todo 列表的模型'
- en: '`TodoItemModel`：表示 Todo 项目的模型'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TodoItemModel`：表示 Todo 项目的模型'
- en: 首先，我们将创建`TodoItemModel`，并将其命名为`src/model/TodoItemModel.js`。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建`TodoItemModel`，并将其命名为`src/model/TodoItemModel.js`。
- en: '`TodoItemModel`类定义了每个 Todo 项目所需的信息。 每个 Todo 项目都有标题（`title`）、完成状态（`completed`）和每个项目的唯一标识符（`id`）。
    由于它只是数据集合，因此可以是对象而不是类，但在这种情况下我们选择创建类。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoItemModel`类定义了每个 Todo 项目所需的信息。 每个 Todo 项目都有标题（`title`）、完成状态（`completed`）和每个项目的唯一标识符（`id`）。
    由于它只是数据集合，因此可以是对象而不是类，但在这种情况下我们选择创建类。'
- en: 下面的代码将`TodoItemModel`类定义为`src/model/TodoItemModel.js`。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将`TodoItemModel`类定义为`src/model/TodoItemModel.js`。
- en: src/model/TodoItemModel.js
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: src/model/TodoItemModel.js
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 下面的代码显示了`TodoItemModel`类是可以实例化的，并且每个`id`都自动具有不同的值。这个`id`将在稍后用于指定要更新的特定 Todo
    项目时作为区分项目的标识符。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码显示了`TodoItemModel`类是可以实例化的，并且每个`id`都自动具有不同的值。这个`id`将在稍后用于指定要更新的特定 Todo
    项目时作为区分项目的标识符。
- en: 使用 TodoItemModel.js 的示例代码
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TodoItemModel.js 的示例代码
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 接下来，我们将创建`TodoListModel`并保存为`src/model/TodoListModel.js`。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建`TodoListModel`并保存为`src/model/TodoListModel.js`。
- en: '`TodoListModel`类继承自先前创建的`EventEmitter`类。`TodoListModel`类维护了一个`TodoItemModel`数组，并在添加新
    Todo 项目时将其添加到该数组中。在此过程中，为了通知`TodoListModel`的状态已更改，它会向自身分派`change`事件。'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoListModel`类继承自先前创建的`EventEmitter`类。`TodoListModel`类维护了一个`TodoItemModel`数组，并在添加新
    Todo 项目时将其添加到该数组中。在此过程中，为了通知`TodoListModel`的状态已更改，它会向自身分派`change`事件。'
- en: src/model/TodoListModel.js
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: src/model/TodoListModel.js
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 下面的代码是向`TodoListModel`类的实例添加新`TodoItemModel`的示例代码。当使用 TodoListModel 的`addTodo`方法添加新
    Todo 项目时，将调用 TodoListModel 的`onChange`方法注册的事件监听器。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是向`TodoListModel`类的实例添加新`TodoItemModel`的示例代码。当使用 TodoListModel 的`addTodo`方法添加新
    Todo 项目时，将调用 TodoListModel 的`onChange`方法注册的事件监听器。
- en: 使用了 TodoListModel.js 的示例代码
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了 TodoListModel.js 的示例代码
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 现在每个所需的模型类都已经创建好了。接下来让我们使用这些模型来更新显示。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每个所需的模型类都已经创建好了。接下来让我们使用这些模型来更新显示。
- en: '[](#model-update-view)*使用模型更新视图*'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#model-update-view)*使用模型更新视图*'
- en: '*使用先前创建的`TodoListModel`和`TodoItemModel`类，重新编写“添加 Todo 项目”的功能。'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用先前创建的`TodoListModel`和`TodoItemModel`类，重新编写“添加 Todo 项目”的功能。'
- en: 在上一次的代码中，提交表单会直接向 DOM 添加元素。而在本次代码中，提交表单会向`TodoListModel`添加`TodoItemModel`。当`TodoListModel`中添加新的
    Todo 项目时，由于已注册了`onChange`事件监听器，因此该监听器函数会被调用，从而更新 DOM（显示）。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一次的代码中，提交表单会直接向 DOM 添加元素。而在本次代码中，提交表单会向`TodoListModel`添加`TodoItemModel`。当`TodoListModel`中添加新的
    Todo 项目时，由于已注册了`onChange`事件监听器，因此该监听器函数会被调用，从而更新 DOM（显示）。
- en: 首先看一下修改后的`App.js`。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先看一下修改后的`App.js`。
- en: src/App.js
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 修改后的`App.js`主要有三个部分进行了更改，让我们逐个来看。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`App.js`主要有三个部分进行了更改，让我们逐个来看。
- en: '[](#app-todolist-initialize)*1\. 初始化 TodoListModel*'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#app-todolist-initialize)*1\. 初始化 TodoListModel*'
- en: '*导入了创建的`TodoListModel`和`TodoItemModel`。'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*导入了创建的`TodoListModel`和`TodoItemModel`。'
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 并且，在`App`类中通过私有类字段初始化了`TodoListModel`。由于`TodoListModel`不需要从外部访问，因此将其定义为私有类字段`#todoListModel`。这是为了使
    Todo 列表在开始时（实例化`App`类时）以空状态开始。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，在`App`类中通过私有类字段初始化了`TodoListModel`。由于`TodoListModel`不需要从外部访问，因此将其定义为私有类字段`#todoListModel`。这是为了使
    Todo 列表在开始时（实例化`App`类时）以空状态开始。
- en: src/App.jsより抜粋
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/App.js`的摘录'
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#app-todolist-onchange)*2\. 当 TodoListModel 的状态更新时更新显示*'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#app-todolist-onchange)*2\. 当 TodoListModel 的状态更新时更新显示*'
- en: '*在`mount`方法中实现了当`TodoListModel`更新时更新显示的逻辑。通过`TodoListModel`的`onChange`方法注册的监听器函数会在`TodoListModel`的状态更新时被调用。'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*在`mount`方法中实现了当`TodoListModel`更新时更新显示的逻辑。通过`TodoListModel`的`onChange`方法注册的监听器函数会在`TodoListModel`的状态更新时被调用。'
- en: 这个监听器函数内部使用了 TodoListModel 的`getTodoItems`方法来获取 Todo 项目。然后，从项目列表中创建类似以下的列表元素（`todoListElement`）。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个监听器函数内部使用了 TodoListModel 的`getTodoItems`方法来获取 Todo 项目。然后，从项目列表中创建类似以下的列表元素（`todoListElement`）。
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 创建的`todoListElement`元素使用了之前创建的`html-util.js`的`render`函数来覆盖容器元素的内容。此外，由于可以通过
    TodoListModel 的`getTotalCount`方法获取项目数，因此可以删除管理项目数的`todoItemCount`变量。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的`todoListElement`元素使用了之前创建的`html-util.js`的`render`函数来覆盖容器元素的内容。此外，由于可以通过
    TodoListModel 的`getTotalCount`方法获取项目数，因此可以删除管理项目数的`todoItemCount`变量。
- en: src/App.jsより抜粋
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/App.js`的摘录'
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[](#app-add-new-todoitem)*3\. 提交表单后，添加新的 TodoItem*'
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#app-add-new-todoitem)*3\. 提交表单后，添加新的 TodoItem*'
- en: '*在上一次的代码中，提交表单（`submit`）时会直接向 DOM 添加元素。而在本次代码中，`TodoListModel`的状态更新后会更新显示的机制已经建立好了。'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一次的代码中，提交表单（`submit`）时会直接向 DOM 添加元素。而在本次代码中，`TodoListModel`的状态更新后会更新显示的机制已经建立好了。'
- en: 因此，在`submit`事件的监听器函数中，只需向`TodoListModel`添加新的`TodoItemModel`，显示就会更新。只需将直接向 DOM
    添加`appendChild`的部分替换为使用`TodoListModel`的`addTodo`方法来更新模型即可。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`submit`事件的监听器函数中，只需向`TodoListModel`添加新的`TodoItemModel`，显示就会更新。只需将直接向 DOM
    添加`appendChild`的部分替换为使用`TodoListModel`的`addTodo`方法来更新模型即可。
- en: '[](#conclusion)*总结*'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)*总结*'
- en: '*在本节中，我们使用模型和事件机制对上一节的“实现添加 Todo 项目”进行了重构。虽然代码量增加了，但下一步要实现的“更新 Todo 项目”和“删除
    Todo 项目”也可以使用类似的机制来实现。与上一节直接更新 DOM 的操作不同，虽然添加很容易，但更新或删除现有元素需要指定元素，这就变得困难了。'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本节中，我们使用模型和事件机制对上一节的“实现添加 Todo 项目”进行了重构。虽然代码量增加了，但下一步要实现的“更新 Todo 项目”和“删除
    Todo 项目”也可以使用类似的机制来实现。与上一节直接更新 DOM 的操作不同，虽然添加很容易，但更新或删除现有元素需要指定元素，这就变得困难了。'
- en: 下一节将实现剩余功能，如“更新 Todo 项目”和“删除 Todo 项目”。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将实现剩余功能，如“更新 Todo 项目”和“删除 Todo 项目”。
- en: '[](#section-checklist)*本节的检查清单*'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*本节的检查清单*'
- en: '**   理解了直接更新 DOM 的问题'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**   理解了直接更新 DOM 的问题**'
- en: 使用`EventEmitter`类实现了事件机制
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`EventEmitter`类实现了事件机制
- en: 实现了 Todo 列表和 Todo 项目作为模型
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了 Todo 列表和 Todo 项目作为模型
- en: 继承了`TodoListModel`的`EventEmitter`类
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承了`TodoListModel`的`EventEmitter`类
- en: 使用模型来重构了添加 Todo 项目的功能
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型来重构了添加 Todo 项目的功能
- en: 您可以在以下 URL 查看到目前的 Todo 应用程序。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下 URL 查看到目前的 Todo 应用程序。
- en: '[`jsprimer.net/use-case/todoapp/event-model/event-emitter/`](https://jsprimer.net/use-case/todoapp/event-model/event-emitter/)***********'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《jsprimer.net 使用案例：Todo 应用程序的事件模型/事件发射器》](https://jsprimer.net/use-case/todoapp/event-model/event-emitter/)***********'
