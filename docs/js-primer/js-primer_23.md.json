["```\n// Stringの`toUpperCase`メソッドを呼び出せる\n\"string\".toUpperCase(); // => \"STRING\" \n```", "```\n// \"input value\"の値をラップしたStringのインスタンスを生成\nconst str = new String(\"input value\");\n// StringのインスタンスメソッドであるtoUpperCaseを呼び出す\nstr.toUpperCase(); // => \"INPUT VALUE\" \n```", "```\n// プリミティブの文字列は\"string\"型\nconst str = \"文字列\";\nconsole.log(typeof str); // => \"string\"\n// ラッパーオブジェクトは\"object\"型\nconst stringWrapper = new String(\"文字列\");\nconsole.log(typeof stringWrapper); // => \"object\" \n```", "```\nconst str = \"string\";\n// プリミティブ型の値に対してメソッド呼び出しを行う\nstr.toUpperCase();\n// `str`へアクセスする際に\"string\"がラッパーオブジェクトへ変換され、\n// ラッパーオブジェクトはStringのインスタンスなのでメソッドを呼び出せる\n// つまり、上のコードは下のコードと同じ意味である\n(new String(str)).toUpperCase(); \n```", "```\nconst stringWrapper = new String(\"文字列\");\n// プリミティブ型の値を取得する\nconsole.log(stringWrapper.valueOf()); // => \"文字列\" \n```", "```\n// OK: リテラルを使う\nconst str = \"文字列\";\n// NG: ラッパーオブジェクトを使う\nconst stringWrapper = new String(\"文字列\"); \n```"]