- en: 関数とthis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 関数とthis
- en: 原文：[`jsprimer.net/basic/function-this/`](https://jsprimer.net/basic/function-this/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/basic/function-this/`](https://jsprimer.net/basic/function-this/)
- en: この章では`this`という特殊な動作をするキーワードについて見ていきます。 基本的にはメソッドの中で利用しますが、`this`は読み取り専用のグローバル変数のようなものでどこにでも書けます。
    加えて、`this`の参照先（評価結果）は条件によって異なります。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: この章では`this`という特殊な動作をするキーワードについて見ていきます。基本的にはメソッドの中で利用しますが、`this`は読み取り専用のグローバル変数のようなものでどこにでも書けます。加えて、`this`の参照先（評価結果）は条件によって異なります。
- en: '`this`の参照先は主に次の条件によって変化します。'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`の参照先は主に次の条件によって変化します。'
- en: 実行コンテキストにおける`this`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 実行コンテキストにおける`this`
- en: コンストラクタにおける`this`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: コンストラクタにおける`this`
- en: 関数とメソッドにおける`this`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 関数とメソッドにおける`this`
- en: Arrow Functionにおける`this`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arrow Functionにおける`this`
- en: コンストラクタにおける`this`は、次の章である「クラス」で扱います。 この章ではさまざまな条件での`this`について扱いますが、`this`が実際に使われるのはメソッドにおいてです。
    そのため、あらゆる条件下での`this`の動きをすべて覚える必要はありません。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: コンストラクタにおける`this`は、次の章である「クラス」で扱います。この章ではさまざまな条件での`this`について扱いますが、`this`が実際に使われるのはメソッドにおいてです。そのため、あらゆる条件下での`this`の動きをすべて覚える必要はありません。
- en: この章では、さまざまな条件下で変わる`this`の参照先と関数やArrow Functionとの関係を見ていきます。 また、実際にどのような状況で問題が発生するかを知り、`this`の動きを予測可能にするにはどのようにするかを見ていきます。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: この章では、さまざまな条件下で変わる`this`の参照先と関数やArrow Functionとの関係を見ていきます。また、実際にどのような状況で問題が発生するかを知り、`this`の動きを予測可能にするにはどのようにするかを見ていきます。
- en: '*実行コンテキストと`this`*'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*実行コンテキストと`this`*'
- en: '*最初に「JavaScriptとは」の章において、JavaScriptには実行コンテキストとして"Script"と"Module"があるという話をしました。
    どの実行コンテキストでJavaScriptのコードを評価するかは、��行環境によってやり方が異なります。 この章では、ブラウザの`script`要素と`type`属性を使い、それぞれの実行コンテキストを明示しながら`this`の動きを見ていきます。'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初に「JavaScriptとは」の章において、JavaScriptには実行コンテキストとして"Script"と"Module"があるという話をしました。どの実行コンテキストでJavaScriptのコードを評価するかは、実行環境によってやり方が異なります。この章では、ブラウザの`script`要素と`type`属性を使い、それぞれの実行コンテキストを明示しながら`this`の動きを見ていきます。'
- en: トップレベル（もっとも外側のスコープ）にある`this`は、実行コンテキストによって値が異なります。 実行コンテキストの違いは意識しにくい部分であり、トップレベルで`this`を使うと混乱を生むことになります。
    そのため、コードのトップレベルにおいては`this`を使うべきではありませんが、それぞれの実行コンテキストにおける動作を紹介します。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: トップレベル（もっとも外側のスコープ）にある`this`は、実行コンテキストによって値が異なります。実行コンテキストの違いは意識しにくい部分であり、トップレベルで`this`を使うと混乱を生むことになります。そのため、コードのトップレベルにおいては`this`を使うべきではありませんが、それぞれの実行コンテキストにおける動作を紹介します。
- en: '*スクリプトにおける`this`*'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*スクリプトにおける`this`*'
- en: '*実行コンテキストが"Script"である場合、トップレベルのスコープに書かれた`this`はグローバルオブジェクトを参照します。 グローバルオブジェクトは、実行環境ごとに異なるものが定義されています。
    ブラウザのグローバルオブジェクトは`window`オブジェクト、Node.jsのグローバルオブジェクトは`global`オブジェクトとなります。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*実行コンテキストが"Script"である場合、トップレベルのスコープに書かれた`this`はグローバルオブジェクトを参照します。グローバルオブジェクトは、実行環境ごとに異なるものが定義されています。ブラウザのグローバルオブジェクトは`window`オブジェクト、Node.jsのグローバルオブジェクトは`global`オブジェクトとなります。'
- en: ブラウザでは、`script`要素の`type`属性を指定していない場合は、実行コンテキストが"Script"として実行されます。 この`script`要素の直下に書いた`this`はグローバルオブジェクトである`window`オブジェクトとなります。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザでは、`script`要素の`type`属性を指定していない場合は、実行コンテキストが"Script"として実行されます。この`script`要素の直下に書いた`this`はグローバルオブジェクトである`window`オブジェクトとなります。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*モジュールにおける`this`*'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*モジュールにおける`this`*'
- en: '*実行コンテキストが"Module"である場合、そのトップレベルのスコープに書かれた`this`は常に`undefined`となります。'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*実行コンテキストが"Module"である場合、そのトップレベルのスコープに書かれた`this`は常に`undefined`となります。'
- en: ブラウザで、`script`要素に`type="module"`属性がついた場合は、実行コンテキストが"Module"として実行されます。 この`script`要素の直下に書いた`this`は`undefined`となります。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ブラウザで、`script`要素に`type="module"`属性がついた場合は、実行コンテキストが"Module"として実行されます。この`script`要素の直下に書いた`this`は`undefined`となります。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: このように、トップレベルのスコープの`this`は実行コンテキストによって`undefined`となる場合があります。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: このように、トップレベルのスコープの`this`は実行コンテキストによって`undefined`となる場合があります。
- en: 単純にグローバルオブジェクトを参照したい場合は、`this`ではなく`globalThis`を使います。 `globalThis`は実行環境のグローバルオブジェクトを参照するためにES2020で導入されました。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 単純にグローバルオブジェクトを参照したい場合は、`this`ではなく`globalThis`を使います。`globalThis`は実行環境のグローバルオブジェクトを参照するためにES2020で導入されました。
- en: 実行環境のグローバルオブジェクトは、ブラウザでは`window`、Node.jsでは`global`のように名前が異なります。 そのため同じコードで、異なるグローバルオブジェクトを参照するには、コード上で分岐する必要がありました。
    ES2020ではこの問題を解決するために、実行環境のグローバルオブジェクトを参照する`globalThis`が導入されました。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 実行環境のグローバルオブジェクトは、ブラウザでは`window`、Node.jsでは`global`のように名前が異なります。そのため同じコードで、異なるグローバルオブジェクトを参照するには、コード上で分岐する必要がありました。ES2020ではこの問題を解決するために、実行環境のグローバルオブジェクトを参照する`globalThis`が導入されました。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*関数とメソッドにおける`this`*'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*関数とメソッドにおける`this`*'
- en: '***関数**を定義する方法として、`function`キーワードによる関数宣言と関数式、Arrow Functionなどがあります。 `this`が参照先を決めるルールは、Arrow
    Functionとそれ以外の関数定義の方法で異なります。'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '***関数**を定義する方法として、`function`キーワードによる関数宣言と関数式、Arrow Functionなどがあります。`this`が参照先を決めるルールは、Arrow
    Functionとそれ以外の関数定義の方法で異なります。'
- en: そのため、まずは関数定義の種類について振り返ってから、それぞれの`this`について見ていきます。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: そのため、まずは関数定義の種類について振り返ってから、それぞれの`this`について見ていきます。
- en: '*関数の種類*'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*関数の種類*'
- en: '*「関数と宣言」の章で詳しく紹介していますが、関数の定義方法と呼び出し方について改めて振り返ってみましょう。 **関数**を定義する場合には、次の3つの方法を利用します。'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*「関数と宣言」の章で詳しく紹介していますが、関数の定義方法と呼び出し方について改めて振り返ってみましょう。**関数**を定義する場合には、次の3つの方法を利用します。'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: それぞれ定義した関数は`関数名()`と書くことで呼び出せます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: それぞれ定義した関数は`関数名()`と書くことで呼び出せます。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*メソッドの種類*'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*メソッドの種類*'
- en: '*JavaScriptではオブジェクトのプロパティが関数である場合にそれを**メソッド**と呼びます。 一般的にはメソッドも含めたものを**関数**と言い、関数宣言などとプロパティである関数を区別する場合に**メソッド**と呼びます。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*JavaScriptではオブジェクトのプロパティが関数である場合にそれを**メソッド**と呼びます。一般的にはメソッドも含めたものを**関数**と言い、関数宣言などとプロパティである関数を区別する場合に**メソッド**と呼びます。'
- en: メソッドを定義する場合には、オブジェクトのプロパティに関数式を定義するだけです。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: メソッドを定義する場合には、オブジェクトのプロパティに関数式を定義するだけです。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: これに加えてメソッドには短縮記法があります。 オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }`と書くことで、メソッドを定義できます。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: これに加えてメソッドには短縮記法があります。オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }`と書くことで、メソッドを定義できます。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: これらのメソッドは、`オブジェクト名.メソッド名()`と書くことで呼び出せます。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: これらのメソッドは、`オブジェクト名.メソッド名()`と書くことで呼び出せます。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 関数定義とメソッドの定義についてまとめると、次のようになります。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 関数定義とメソッドの定義についてまとめると、次のようになります。
- en: '| 名前 | 関数 | メソッド |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 名前 | 関数 | メソッド |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 関数宣言(`function fn(){}`) | ✔ | x |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 関数宣言(`function fn(){}`) | ✔ | x |'
- en: '| 関数式(`const fn = function(){}`) | ✔ | ✔ |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 関数式(`const fn = function(){}`) | ✔ | ✔ |'
- en: '| Arrow Function(`const fn = () => {}`) | ✔ | ✔ |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Arrow Function(`const fn = () => {}`) | ✔ | ✔ |'
- en: '| メソッドの短縮記法(`const obj = { method(){} }`) | x | ✔ |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| メソッドの短縮記法(`const obj = { method(){} }`) | x | ✔ |'
- en: 最初に書いたように`this`の挙動は、Arrow Functionの関数定義とそれ以外（`function`キーワードやメソッドの短縮記法）の関数定義で異なります。
    そのため、まずは**Arrow Function 以外**の関数やメソッドにおける`this`を見ていきます。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最初に書いたように`this`の挙動は、Arrow Functionの関数定義とそれ以外（`function`キーワードやメソッドの短縮記法）の関数定義で異なります。そのため、まずは**Arrow
    Function 以外**の関数やメソッドにおける`this`を見ていきます。
- en: '*Arrow Function 以外の関数における`this`*'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*非箭头函数中的`this`*'
- en: '*Arrow Function 以外の関数（メソッドも含む）における`this`は、実行時に決まる値となります。 言い方を変えると`this`は関数に渡される暗黙的な引数のようなもので、その渡される値は関数を実行するときに決まります。'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*非箭头函数（包括方法）中的`this`在执行时确定其值。换句话说，`this`就像是一个传递给函数的隐含参数，其传递的值在函数执行时确定。'
- en: 次のコードは疑似的なものです。 関数の中に書かれた`this`は、関数の呼び出し元から暗黙的に渡される値を参照することになります。 このルールはArrow
    Function 以外の関数やメソッドで共通した仕組みとなります。Arrow Functionで定義した関数やメソッドはこのルールとは別の仕組みとなります。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是假设性的。函数中写出的`this`将引用函数调用源暗含传递的值。这个规则适用于非箭头函数或方法，箭头函数定义的函数或方法则遵循不同的规则。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 関数における`this`の基本的な参照先（暗黙的に関数に渡す`this`の値）は**ベースオブジェクト**となります。 ベースオブジェクトとは「メソッドを呼ぶ際に、そのメソッドのドット演算子またはブラケット演算子のひとつ左にあるオブジェクト」のことを言います。
    ベースオブジェクトがない場合の`this`は`undefined`となります。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 函数中的`this`的基本引用点是**基础对象**。基础对象是指“调用方法时，方法点操作符或方括号操作符左边的对象”。如果没有基础对象，`this`将是`undefined`。
- en: たとえば、`fn()`のように関数を呼び出したとき、この`fn`関数呼び出しのベースオブジェクトはないため、`this`は`undefined`となります。
    一方、`obj.method()`のようにメソッドを呼び出したとき、この`obj.method`メソッド呼び出しのベースオブジェクトは`obj`オブジェクトとなり、`this`は`obj`となります。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当像`fn()`这样调用函数时，由于这个`fn`函数调用没有基础对象，所以`this`是`undefined`。另一方面，当像`obj.method()`这样调用方法时，这个`obj.method`方法调用没有基础对象是`obj`对象，`this`是`obj`。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`this`は関数の定義ではなく呼び出し方で参照する値が異なります。これは、後述する「`this`が問題となるパターン」で詳しく紹介します。 Arrow
    Function 以外の関数では、関数の定義だけを見て`this`の値が何かということは決定できない点に注意が必要です。'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`的值不是在函数定义时确定的，而是在调用时确定的。这是在后面将要介绍的“`this`引起的问题模式”中详细介绍的内容。在非箭头函数中，仅从函数定义来看无法确定`this`的值。'
- en: '*関数宣言や関数式における`this`*'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*函数声明或函数表达式中的`this`*'
- en: '*まずは、関数宣言や関数式の場合を見ていきます。'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，让我们看看函数声明或函数表达式的情况。'
- en: 次の例では、関数宣言で関数`fn1`、関数式で関数`fn2`を定義し、それぞれの関数内で`this`を返します。 定義したそれぞれの関数を`fn1()`と`fn2()`のようにただの関数として呼び出しています。
    このとき、ベースオブジェクトはないため、`this`は`undefined`となります。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，通过函数声明定义了函数`fn1`，通过函数表达式定义了函数`fn2`，并在每个函数内返回`this`。定义的每个函数都像`fn1()`和`fn2()`一样作为普通函数调用。这时，由于没有基础对象，`this`是`undefined`。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: これは、関数の中に関数を定義して呼び出す場合も同じです。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于在函数中定义并调用函数的情况。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: この書籍では注釈がないコードはstrict modeとして扱いますが、コード例に`"use strict";`と改めてstrict modeを明示しています（詳細は「JavaScriptとは」のstrict
    modeを参照）。 なぜなら、strict modeではない状況で`this`が`undefined`の場合は、`this`がグローバルオブジェクトを参照するように変換される問題があるためです。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码如果没有注释，则视为strict mode。但代码示例中明确地写入了`"use strict";`来表示strict mode（详细信息请参考「JavaScript是什么」中的strict
    mode）。这是因为，在非strict mode的情况下，如果`this`是`undefined`，则`this`会被转换为引用全局对象的值。
- en: strict modeは、このような意図しにくい動作を防止するために導入されています。 しかしながら、strict modeのメソッド以外の関数における`this`は`undefined`となるため使い道がありません。
    そのため、メソッド以外で`this`を使う必要はありません。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: strict mode是为了防止这种难以预料的行为而引入的。然而，strict mode之外的其他函数中的`this`将变为`undefined`，因此没有用途。因此，不需要在方法之外使用`this`。
- en: '*メソッド呼び出しにおける`this`*'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*方法调用中的`this`*'
- en: '*次に、メソッドの場合を見ていきます。 メソッドの場合は、そのメソッドが何かしらのオブジェクトに所属しています。 なぜなら、JavaScriptではオブジェクトのプロパティとして指定される関数のことをメソッドと呼ぶためです。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来，让我们看看方法的情况。在方法的情况下，该方法属于某个对象。这是因为，在JavaScript中，将作为对象属性指定的函数称为方法。'
- en: 次の例では`method1`と`method2`はそれぞれメソッドとして呼び出されています。 このとき、それぞれのベースオブジェクトは`obj`となり、`this`は`obj`となります。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，`method1`和`method2`分别作为方法被调用。这时，每个基础对象是`obj`，`this`是`obj`。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: これを利用すれば、メソッドの中から同じオブジェクトに所属する別のプロパティを`this`で参照できます。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以利用`this`来引用同一个对象中的其他属性。
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: このようにメソッドが所属するオブジェクトのプロパティを、`オブジェクト名.プロパティ名`の代わりに`this.プロパティ名`で参照できます。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，可以通过`this.属性名`代替`对象名.属性名`来引用方法所属对象属性的属性。
- en: オブジェクトは何重にもネストできますが、`this`はベースオブジェクトを参照するというルールは同じです。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以多层嵌套，但`this`引用基础对象的规则是相同的。
- en: 次のコードを見てみると、ネストしたオブジェクトにおいてメソッド内の`this`がベースオブジェクトである`obj3`を参照していることがわかります。 このときのベースオブジェクトはドットでつないだ一番左の`obj1`ではなく、メソッドから見てひとつ左の`obj3`となります。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的代码，可以发现嵌套的对象中，方法内的`this`引用的是基础对象`obj3`。这时的基础对象不是通过点连接的最左边的`obj1`，而是从方法的角度看左边的`obj3`。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*`this`が問題となるパターン*'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*`this`引起的问题模式*'
- en: '*`this`はその関数（メソッドも含む）呼び出しのベースオブジェクトを参照することがわかりました。 `this`は所属するオブジェクトを直接書く代わりとして利用できますが、一方`this`にはいろいろな問題があります。'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们已经了解了`this`可以引用函数（包括方法）的调用基础对象。`this`可以作为直接写入所属对象的替代品来使用，但`this`也有各种问题。'
- en: この問題の原因は`this`がどの値を参照するかは関数の呼び出し時に決まるという性質に由来します。 この`this`の性質が問題となるパターンの代表的な2つの例とそれぞれの対策について見ていきます。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的原因在于`this`引用的值在函数调用时确定。下面将详细介绍导致问题的两种主要模式的示例和各自的解决方案。
- en: '*問題: `this`を含むメソッドを変数に代入した場合*'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*问题：将包含`this`的函数代入变量时*'
- en: '*JavaScriptではメソッドとして定義したものが、後からただの関数として呼び出されることがあります。 なぜなら、メソッドは関数を値に持つプロパティのことで、プロパティは変数に代入し直すことができるためです。'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*在JavaScript中，作为方法定义的函数有时会被当作普通函数调用。这是因为方法是将函数作为值持有的属性，属性可以被重新赋值给变量。'
- en: そのため、メソッドとして定義した関数も、別の変数に代入してただの関数として呼び出されることがあります。 この場合には、メソッドとして定義した関数であっても、実行時にはただの関数であるためベースオブジェクトが変わっています。
    これは`this`が定義した時点ではなく実行したときに決まるという性質そのものです。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为方法定义的函数也可以被代入到另一个变量中，并以普通函数的方式调用。在这种情况下，即使作为方法定义的函数，由于在执行时被视为普通函数，基础对象也会改变。这是`this`在定义时而不是在执行时确定的性质。
- en: 具体的に、`this`が実行時に変わる例を見ていきます。 次の例では、`person.sayName`メソッドを変数`say`に代入してから実行しています。
    このときの`say`関数（`sayName`メソッドを参照）のベースオブジェクトはありません。 そのため、`this`は`undefined`となり、`undefined.fullName`は参照できずに例外を投げます。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，看看`this`在执行时变化的例子。在下面的例子中，将`person.sayName`方法代入变量`say`后执行。这时，`say`函数（`sayName`方法的引用）没有基础对象。因此，`this`是`undefined`，`undefined.fullName`无法引用并抛出异常。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 最终，执行的代码与下面的代码相同。 在下面的代码中，尝试引用`undefined.fullName`导致了异常。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，执行的代码与下面的代码相同。在下面的代码中，尝试引用`undefined.fullName`导致了异常。
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 这样，除了箭头函数之外的函数中，`this`不是在定义时确定的，而是在执行时确定的。 因此，如果函数包含`this`，并且没有按预期调用，就会出现错误的结果。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，除了箭头函数之外的函数中，`this`不是在定义时确定的，而是在执行时确定的。因此，如果函数包含`this`，并且没有按预期调用，就会出现错误的结果。
- en: 解决这个问题有两种主要方法。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有两种主要方法。
- en: 其中一种方法是，将作为方法定义的函数作为方法调用。 如果不将方法作为普通函数调用，就不会出现这个问题。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种方法是，将作为方法定义的函数作为方法调用。如果不将方法作为普通函数调用，就不会出现这个问题。
- en: 另一种方法是，使用指定`this`值调用函数的方法来执行函数。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是，通过指定`this`值来调用函数的方法来执行函数。
- en: '*解决方法：call、apply、bind 方法*'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*解决方法：call、apply、bind 方法*'
- en: '*还有一种方法可以显式指定函数或方法的`this`并执行函数。 `Function`（函数对象）提供了`call`、`apply`、`bind`等方法，用于显式指定`this`并执行函数。*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*还有一种方法可以显式指定函数或方法的`this`并执行函数。 `Function`（函数对象）提供了`call`、`apply`、`bind`等方法，用于显式指定`this`并执行函数。*'
- en: '`call`方法将第一个参数指定为要作为`this`的值，并将剩余的参数指定为要传递给调用函数的参数。 可以说`call`方法是一个可以显式传递`this`值的方法。'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`call`方法将第一个参数指定为要作为`this`的值，并将剩余的参数指定为要传递给调用函数的参数。可以说`call`方法是一个可以显式传递`this`值的方法。'
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 在下面的示例中，我们在指定`person`对象为`this`的情况下调用了`say`函数。 `call`方法的第二个参数将传递给`say`函数的形参`message`。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们在指定`person`对象为`this`的情况下调用了`say`函数。 `call`方法的第二个参数将传递给`say`函数的形参`message`。
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`apply`方法将第一个参数指定为要作为`this`的值，并将第二个参数作为函数的参数传递为数组。'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`方法将第一个参数指定为要作为`this`的值，并将第二个参数作为函数的参数传递为数组。'
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 在下面的示例中，我们在指定`person`对象为`this`的情况下调用了`say`函数。 `apply`方法的第二个参数指定的数组会自动展开并传递给`say`函数的形参`message`。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们在指定`person`对象为`this`的情况下调用了`say`函数。 `apply`方法的第二个参数指定的数组会自动展开并传递给`say`函数的形参`message`。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`call`方法和`apply`方法的区别仅在于传递参数给函数的方式不同。 此外，如果不需要`this`的值，通常会传递`null`给这两种方法。'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`call`方法和`apply`方法的区别仅在于传递参数给函数的方式不同。 此外，如果不需要`this`的值，通常会传递`null`给这两种方法。'
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 最后让我们谈谈`bind`方法。 正如其名称所示，`bind`会创建一个绑定了`this`值的新函数。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后让我们谈谈`bind`方法。 正如其名称所示，`bind`会创建一个绑定了`this`值的新函数。
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 在下面的示例中，我们创建了一个包装了将`this`绑定到`person`对象的`say`函数的函数。 通过在`bind`方法的第二个参数之后传递值，可以绑定函数的参数。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们创建了一个包装了将`this`绑定到`person`对象的`say`函数的函数。 通过在`bind`方法的第二个参数之后传递值，可以绑定函数的参数。
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 将这个`bind`方法表示为普通函数如下所示。 可以看出，`bind`是一个创建绑定了`this`和参数的函数的方法。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个`bind`方法表示为普通函数如下所示。 可以看出，`bind`是一个创建绑定了`this`和参数的函数的方法。
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 通过使用`call`、`apply`、`bind`方法，可以在明确指定`this`的情况下调用函数。 但是，每次调用函数时都使用这些方法会导致需要为调用函数而调用函数，这样会变得繁琐。
    因此，基本上最好的方法是“将作为方法定义的函数作为方法调用”。 在其中，如果确实需要固定`this`，则可以使用`call`、`apply`、`bind`方法。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`call`、`apply`、`bind`方法，可以在明确指定`this`的情况下调用函数。 但是，每次调用函数时都使用这些方法会导致需要为调用函数而调用函数，这样会变得繁琐。
    因此，基本上最好的方法是“将作为方法定义的函数作为方法调用”。 在其中，如果确实需要固定`this`，则可以使用`call`、`apply`、`bind`方法。
- en: '*问题：回调函数和`this`*'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*问题：回调函数和`this`*'
- en: '*在回调函数中引用`this`可能会导致问题。 这个问题在处理 Array 的`map`方法等回调函数时很容易发生。*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*在回调函数中引用`this`可能会导致问题。 这个问题在处理 Array 的`map`方法等回调函数时很容易发生。*'
- en: 让我们看一个具体的例子，说明回调函数中的`this`是一个问题。 在下面的代码中，我们使用`map`方法在`prefixArray`方法中。 在这种情况下，`map`方法的回调函数中，试图引用`this`以引用`Prefixer`对象。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个具体的例子，说明回调函数中的`this`是一个问题。 在下面的代码中，我们使用`map`方法在`prefixArray`方法中。 在这种情况下，`map`方法的回调函数中，试图引用`this`以引用`Prefixer`对象。
- en: 然而，在这个回调函数中，`this`是`undefined`，因此无法访问`undefined.prefix`，导致`TypeError`异常。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个回调函数中，`this`是`undefined`，因此无法访问`undefined.prefix`，导致`TypeError`异常。
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 让我们看看为什么回调函数中的`this`会变为`undefined`。 请注意，Array 的`map`方法将一个在场景中定义的匿名函数作为回调函数传递。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么回调函数中的`this`会变为`undefined`。 请注意，Array 的`map`方法将一个在场景中定义的匿名函数作为回调函数传递。
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 在这种情况下，传递给 Array 的`map`方法的回调函数将像`callback()`一样被调用为普通函数。 换句话说，在调用回调函数时，该函数没有基础对象。
    因此，`callback`函数的`this`将是`undefined`。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，传递给 Array 的`map`方法的回调函数将像`callback()`一样被调用为普通函数。 换句话说，在调用回调函数时，该函数没有基础对象。
    因此，`callback`函数的`this`将是`undefined`。
- en: 在前面的示例中，我们直接将匿名函数作为回调函数传递给方法，但是将其存储在`callback`变量中然后传递也会得到相同的结果。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们直接将匿名函数作为回调函数传递给方法，但是将其存储在`callback`变量中然后传递也会得到相同的结果。
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*解决方法：将`this`赋值给临时变量*'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*解决方法：将`this`赋值给临时变量*'
- en: '*回调函数内的`this`引用会发生变化的问题的解决方法是将`this`赋值给另一个变量，以保持其引用。*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*回调函数内的`this`引用会发生变化的问题的解决方法是将`this`赋值给另一个变量，以保持其引用。*'
- en: '`this`在函数调用者处会发生变化，其引用的是调用者的基础对象。 在调用`prefixArray`方法时，`this`是`Prefixer`对象。
    但是，由于回调函数被重新作为函数调用，`this`变为`undefined`就成了问题。'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`在函数调用者处会发生变化，其引用的是调用者的基础对象。 在调用`prefixArray`方法时，`this`是`Prefixer`对象。
    但是，由于回调函数被重新作为函数调用，`this`变为`undefined`就成了问题。'
- en: 因此，通过将第一个`prefixArray`方法调用中的`this`引用保存为临时变量，可以避免这个问题。 在下面的代码中，我们将`prefixArray`方法的`this`保存在`that`变量中。
    通过在回调函数中引用`that`变量而不是`this`，可以使回调函数引用与`prefixArray`方法调用相同的`this`。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过将第一个`prefixArray`方法调用中的`this`引用保存为临时变量，可以避免这个问题。 在下面的代码中，我们将`prefixArray`方法的`this`保存在`that`变量中。
    通过在回调函数中引用`that`变量而不是`this`，可以使回调函数引用与`prefixArray`方法调用相同的`this`。
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 当然，您也可以使用`Function`的`call`方法等明确传递`this`并调用函数。 此外，像 Array 的`map`方法等具有将`this`作为参数传递的机制。
    因此，通过在第二个参数中传递`this`值，也可以解决这个问题。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以使用`Function`的`call`方法等明确传递`this`并调用函数。 此外，像 Array 的`map`方法等具有将`this`作为参数传递的机制。
    因此，通过在第二个参数中传递`this`值，也可以解决这个问题。
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 但是，这些解决方法需要意识到回调函数中`this`的变化。 问题的根源在于方法调用及其中的回调函数中的`this`发生了变化。 在 ES2015 中，引入了箭头函数作为一种不改变`this`的回调函数定义方法。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些解决方法需要意识到回调函数中`this`的变化。 问题的根源在于方法调用及其中的回调函数中的`this`发生了变化。 在 ES2015 中，引入了箭头函数作为一种不改变`this`的回调函数定义方法。
- en: '*対処法: Arrow Functionでコールバック関数を扱う*'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*対処法: Arrow Functionでコールバック関数を扱う*'
- en: '*通常の関数やメソッドは呼び出し時に暗黙的に`this`の値を受け取り、関数内の`this`はその値を参照します。 一方、Arrow Functionはこの暗黙的な`this`の値を受け取りません。
    そのためArrow Function 内の`this`は、スコープチェーンの仕組みと同様に外側の関数（この場合は`prefixArray`メソッド）を探索します。
    これにより、Arrow Functionで定義したコールバック関数は呼び出し方には関係なく、常に外側の関数の`this`をそのまま利用します。'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常の関数やメソッドは呼び出し時に暗黙的に`this`の値を受け取り、関数内の`this`はその値を参照します。 一方、Arrow Functionはこの暗黙的な`this`の値を受け取りません。
    そのためArrow Function 内の`this`は、スコープチェーンの仕組みと同様に外側の関数（この場合は`prefixArray`メソッド）を探索します。
    これにより、Arrow Functionで定義したコールバック関数は呼び出し方には関係なく、常に外側の関数の`this`をそのまま利用します。'
- en: Arrow Functionを使うことで、先ほどのコードは次のように書けます。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionを使うことで、先ほどのコードは次のように書けます。
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: このように、Arrow Functionでのコールバック関数における`this`は簡潔です。 コールバック関数内での`this`の対処法として`this`を代入する方法を紹介しましたが、
    ES2015からはArrow Functionを使うのがもっとも簡潔です。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: このように、Arrow Functionでのコールバック関数における`this`は簡潔です。 コールバック関数内での`this`の対処法として`this`を代入する方法を紹介しましたが、
    ES2015からはArrow Functionを使うのがもっとも簡潔です。
- en: このArrow Functionと`this`の関係についてより詳しく見ていきます。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: このArrow Functionと`this`の関係についてより詳しく見ていきます。
- en: '*Arrow Functionと`this`*'
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*Arrow Functionと`this`*'
- en: '*Arrow Functionで定義された関数やメソッドにおける`this`がどの値を参照するかは関数の定義時（静的）に決まります。 一方、Arrow
    Functionではない関数においては、`this`は呼び出し元に依存するため関数の実行時（動的）に決まります。'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arrow Functionで定義された関数やメソッドにおける`this`がどの値を参照するかは関数の定義時（静的）に決まります。 一方、Arrow
    Functionではない関数においては、`this`は呼び出し元に依存するため関数の実行時（動的）に決まります。'
- en: Arrow Functionとそれ以外の関数で大きく違うことは、Arrow Functionは`this`を暗黙的な引数として受けつけないということです。
    そのため、Arrow Function 内には`this`が定義されていません。このときの`this`は外側のスコープ（関数）の`this`を参照します。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Arrow Functionとそれ以外の関数で大きく違うことは、Arrow Functionは`this`を暗黙的な引数として受けつけないということです。
    そのため、Arrow Function 内には`this`が定義されていません。このときの`this`は外側のスコープ（関数）の`this`を参照します。
- en: これは、変数におけるスコープチェーンの仕組みと同様で、そのスコープに`this`が定義されていない場合には外側のスコープを探索します。 そのため、Arrow
    Function 内の`this`の参照で、常に外側のスコープ（関数）へと`this`の定義を探索しに行きます（詳細はスコープチェーンを参照）。 また、`this`はECMAScriptのキーワードであるため、ユーザーは`this`という変数を定義できません。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这与变量中的作用域链机制相同，如果该作用域中没有定义`this`，则会向外层作用域探索。因此，在Arrow Function中的`this`引用始终会向外层作用域（函数）探索`this`的定义（详细信息请参考作用域链）。另外，`this`是ECMAScript的关键字，因此用户不能定义名为`this`的变量。
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: これにより、通常の変数のように`this`がどの値を参照するかは静的（定義時）に決定されます（詳細は静的スコープを参照）。 つまり、Arrow Functionにおける`this`は「Arrow
    Function 自身の外側のスコープに定義されたもっと近い関数の`this`の値」となります。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`this`的引用与普通变量一样，是静态（定义时）确定的（详细信息请参考静态作用域）。也就是说，Arrow Function中的`this`是“Arrow
    Function自身外部的最接近的函数的`this`值”。
- en: 具体的なArrow Functionにおける`this`の動きを見ていきましょう。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来具体看看Arrow Function中`this`的行为。
- en: まずは、関数式のArrow Functionを見ていきます。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先来看一下函数表达式中的Arrow Function。
- en: 次の例では、関数式で定義したArrow Functionの中の`this`をコンソールに出力しています。 このとき、`fn`の外側には関数がないため、「自身より外側のスコープに定義されたもっとも近い関数」の条件にあてはまるものはありません。
    このときの`this`はトップレベルに書かれた`this`と同じ値になります。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们在函数表达式中定义了Arrow Function，并在其中输出了`this`。这时，由于`fn`的外部没有函数，所以没有符合“自身外部的最接近的函数”的条件。在这种情况下，`this`的值与顶层定义的`this`相同。
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: トップレベルに書かれた`this`の値は実行コンテキストによって異なることを紹介しました。 `this`の値は、実行コンテキストが"Script"ならばグローバルオブジェクトとなり、"Module"ならば`undefined`となります。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 已经介绍了顶层定义的`this`的值会因执行上下文而异。当执行上下文为"Script"时，`this`的值将变为全局对象；当执行上下文为"Module"时，`this`的值变为`undefined`。
- en: 次の例のように、Arrow Functionを包むように通常の関数が定義されている場合はどうでしょうか。 Arrow Functionにおける`this`は「自身の外側のスコープにあるもっと近い関数の`this`の値」となるのは同じです。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下一个例子，如果定义了一个通常的函数来包围Arrow Function，那么箭头函数中的`this`将变成“自身外部的更近的函数的`this`值”，这与之前的情况相同。
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: つまり、このArrow Functionにおける`this`は`outer`関数で`this`を参照した場合と同じ値になります。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，这个Arrow Function中的`this`与在`outer`函数中引用`this`时的值相同。
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '*メソッドとコールバック関数とArrow Function*'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*方法和回调函数与Arrow Function*'
- en: '*メソッド内におけるコールバック関数はArrow Functionをより活用できるパターンです。 `function`キーワードでコールバック関数を定義すると、`this`の値はコールバック関数の呼ばれ方を意識する必要があります。
    なぜなら、`function`キーワードで定義した関数における`this`は呼び出し方によって変わるためです。'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*在方法内使用回调函数是更有效地使用Arrow Function的模式。使用`function`关键字定义回调函数时，需要考虑回调函数的调用方式，因为使用`function`关键字定义的函数中的`this`值会根据调用方式而变化。'
- en: コールバック関数側から見ると、どのように呼ばれるかによって変わってしまう`this`を使うことはできません。 そのため、コールバック関数の外側のスコープで`this`を一時変数に代入し、それを使うという回避方法を取っていました。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从回调函数的角度来看，由于调用方式的不同，不能使用`this`。因此，我们采取了在外部作用域中将`this`临时存储到变量中的回避方法。
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 一方、Arrow Functionでコールバック関数を定義した場合は、1つ外側の関数の`this`を参照します。 このときのArrow Functionで定義したコールバック関数における`this`は呼び出し方によって変化しません。
    そのため、`this`を一時変数に代入するなどの回避方法は必要ありません。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果使用Arrow Function定义回调函数，则会引用外部函数的一个`this`。在这种情况下，由Arrow Function定义的回调函数中的`this`不会因调用方式而变化。因此，不需要使用临时变量等方法来回避。
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: このArrow Functionにおける`this`は呼び出し方の影響を受けません。 つまり、コールバック関数がどのように呼ばれるかという実装についてを考えることなく`this`を扱えます。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Arrow Function中的`this`不受调用方式的影响。也就是说，可以不考虑回调函数的调用方式来处理`this`。
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '*Arrow Functionは`this`をbindできない*'
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*Arrow Function不能绑定`this`*'
- en: '*Arrow Functionで定義した関数では`call`、`apply`、`bind`を使った`this`の指定は単に無視されます。 これは、Arrow
    Functionは`this`を持てないためです。'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*在Arrow Function定义的函数中，使用`call`、`apply`、`bind`指定`this`的行为会被忽略。这是因为Arrow Function没有`this`。'
- en: 次のようにArrow Functionで定義した関数に対して`call`で`this`を指定しても、`this`の参照先が代わっていないことがわかります。
    同様に`apply`や`bind`メソッドを使った場合��`this`の参照先は変わりません。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下面的方式，即使使用`call`指定了Arrow Function定义的函数中的`this`，也可以发现`this`的引用并没有改变。同样，使用`apply`或`bind`方法时，`this`的引用也不会改变。
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 最初に述べたように`function`キーワードで定義した関数では呼び出し時に、ベースオブジェクトが`this`の値として暗黙的な引数のように渡されます。
    一方、Arrow Functionの関数は呼び出し時に`this`を受け取らず、`this`の参照先は定義時に静的に決定されます。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所述，使用`function`关键字定义的函数在调用时，会将基础对象作为`this`的值以隐式参数的形式传递。另一方面，Arrow Function的函数在调用时不会接收`this`，`this`的引用在定义时是静态确定的。
- en: 此外，`this`只在箭头函数中定义的函数中保持不变，箭头函数中`this`引用的是“最接近其外部作用域的函数的`this`值”，可以通过`call`方法进行更改。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`this`只在定义在箭头函数中的函数中保持不变，箭头函数中的`this`引用的是“最接近其外部作用域的函数的`this`值”，可以通过`call`方法进行更改。
- en: '[PRE39]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*总结*'
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*总结*'
- en: '*介绍了`this`是一个根据情况引用不同值的关键字。 总结`this`的评估结果如下表所示。'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*介绍了`this`是一个根据情况引用不同值的关键字。以下是对`this`评估结果的总结。'
- en: '| 执行上下文 | 严格模式 | 代码 | `this`的评估结果 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 执行上下文 | 严格模式 | 代码 | `this`的评估结果 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Script | ＊ | `this` | globalThis |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `this` | `globalThis` |'
- en: '| Script | ＊ | `const fn = () => this` | globalThis |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `const fn = () => this` | `globalThis` |'
- en: '| Script | NO | `const fn = function(){ return this; }` | globalThis |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| Script | NO | `const fn = function(){ return this; }` | `globalThis` |'
- en: '| Script | YES | `const fn = function(){ return this; }` | undefined |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| Script | YES | `const fn = function(){ return this; }` | `undefined` |'
- en: '| Script | ＊ | `const obj = { method: () => { return this; } }` | globalThis
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| Script | ＊ | `const obj = { method: () => { return this; } }` | `globalThis`
    |'
- en: '| Module | YES | `this` | undefined |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `this` | `undefined` |'
- en: '| Module | YES | `const fn = () => this` | undefined |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const fn = () => this` | `undefined` |'
- en: '| Module | YES | `const fn = function(){ return this; }` | undefined |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const fn = function(){ return this; }` | `undefined` |'
- en: '| Module | YES | `const obj = { method: () => { return this; } }` | undefined
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Module | YES | `const obj = { method: () => { return this; } }` | `undefined`
    |'
- en: '| ＊ | ＊ | `const obj = { method(){ return this; } }` | `obj` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| ＊ | ＊ | `const obj = { method(){ return this; } }` | `obj` |'
- en: '| ＊ | ＊ | `const obj = { method: function(){ return this; } }` | `obj` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| ＊ | ＊ | `const obj = { method: function(){ return this; } }` | `obj` |'
- en: ＊表示在任何情况下都不会影响`this`的评估结果。
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ＊表示在任何情况下都不会影响`this`的评估结果。
- en: 实际在浏览器中运行的结果可以在[JavaScript 中的`this`值是什么](https://azu.github.io/what-is-this/)网站上查看。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 实际在浏览器中运行的结果可以在[JavaScript中的`this`值是什么](https://azu.github.io/what-is-this/)网站上查看。
- en: '`this`是在 JavaScript 中引入的面向对象编程的概念。 除了方法之外，`this`也可以在其他情况下进行评估，但由于执行上下文和严格模式等因素，结果会有所不同，导致混淆。
    因此，在非方法函数中不应使用`this`。^(1)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`this` 是在 JavaScript 中引入的面向对象编程的概念。除了方法之外，`this` 也可以在其他情况下进行评估，但由于执行上下文和严格模式等因素，结果会有所不同，导致混淆。因此，在非方法函数中不应使用
    `this`。^(1)'
- en: 此外，在方法中，`this`根据调用方式而有不同的值，介绍了由此产生的问题和解决方法。 通过使用箭头函数可以更清晰地解决回调函数中的`this`问题。
    这背后的原因是通过箭头函数定义的函数不具有`this`属性。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在方法中，`this` 根据调用方式而有不同的值，介绍了由此产生的问题和解决方法。通过使用箭头函数可以更清晰地解决回调函数中的 `this` 问题。这背后的原因是通过箭头函数定义的函数不具有
    `this` 属性。
- en: ¹. ES2015 的规范编辑者 Allen Wirfs-Brock 先生也指出，在普通函数中不应该使用`this`。[`twitter.com/awbjs/status/938272440085446657`](https://twitter.com/awbjs/status/938272440085446657);
    ↩*******************
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. ES2015 的规范编辑者艾伦·沃夫斯-布洛克先生也指出，在普通函数中不应该使用 `this`。[twitter.com/awbjs/status/938272440085446657](https://twitter.com/awbjs/status/938272440085446657);
    ↩*******************
