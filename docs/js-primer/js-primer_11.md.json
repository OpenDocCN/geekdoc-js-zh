["```\nconsole.log(typeof true);// => \"boolean\"\nconsole.log(typeof 42); // => \"number\"\nconsole.log(typeof 9007199254740992n); // => \"bigint\"\nconsole.log(typeof \"JavaScript\"); // => \"string\"\nconsole.log(typeof Symbol(\"シンボル\"));// => \"symbol\"\nconsole.log(typeof undefined); // => \"undefined\"\nconsole.log(typeof null); // => \"object\"\nconsole.log(typeof [\"配列\"]); // => \"object\"\nconsole.log(typeof { \"key\": \"value\" }); // => \"object\"\nconsole.log(typeof function() {}); // => \"function\" \n```", "```\n// \"と\"で囲んだ範囲が文字列リテラル\nconst str = \"こんにちは\"; \n```", "```\ntrue; // => true\nfalse; // => false \n```", "```\nconsole.log(1); // => 1\nconsole.log(10); // => 10\nconsole.log(255); // => 255 \n```", "```\nconsole.log(0b1111); // => 15\nconsole.log(0b10000000000); // => 1024 \n```", "```\nconsole.log(0o644);  // => 420\nconsole.log(0o777);  // => 511 \n```", "```\n// 非推奨な8 進数の書き方\n// strict modeは例外が発生\nconsole.log(0644);  // => 420\nconsole.log(0777);  // => 511 \n```", "```\nconsole.log(0xFF); // => 255\n// 小文字で書いても意味は同じ\nconsole.log(0xff); // => 255\nconsole.log(0x30A2); // => 12450 \n```", "```\n.123; // => 0.123 \n```", "```\n2e8; // => 200000000 \n```", "```\nconsole.log(Number.MAX_SAFE_INTEGER); // => 9007199254740991 \n```", "```\nconsole.log(1n); // => 1n\n// 2⁵³-1より大きな値も扱える\nconsole.log(9007199254740992n); // => 9007199254740992n \n```", "```\n1.2n; // => SyntaxError \n```", "```\n1000000000000; \n```", "```\n1_000_000_000_000; \n```", "```\n_123; // 変数として評価される\n3._14; // => SyntaxError\n0x52_; // => SyntaxError\n1234n_; // => SyntaxError \n```", "```\nconsole.log(\"文字列\"); // => \"文字列\"\nconsole.log('文字列'); // => \"文字列\"\nconsole.log(`文字列`); // => \"文字列\" \n```", "```\n'8 o\\'clock'; // => \"8 o'clock\" \n```", "```\n\"8 o'clock\"; // => \"8 o'clock\" \n```", "```\n\"複数行の\n文字列を\n入れたい\"; // => SyntaxError: \"\" string literal contains an unescaped line break \n```", "```\n\"複数行の\\n 文字列を\\n 入れたい\"; \n```", "```（バッククォート）で囲んだ範囲を文字列とするリテラルです。 テンプレートリテラルでは、複数行の文字列を改行記号のエスケープシーケンス（`\\n`）を使わずにそのまま書くことができます。\n\n複数行の文字列も```", "```\n`複数行の\n文字列を\n入れたい`; // => \"複数行の\\n 文字列を\\n 入れたい\" \n```", "```\nconst str = \"文字列\";\nconsole.log(`これは${str}です`); // => \"これは文字列です\" \n```", "```\n`This is \\`code\\``;// => \"This is `code`\" \n```", "```\nfoo;// \"ReferenceError: foo is not defined\" \n```", "```\nconst foo = null;\nconsole.log(foo); // => null \n```", "```\nfunction fn(){\n    const undefined = \"独自の未定義値\"; // undefinedという名前の変数をエラーなく定義できる\n    console.log(undefined); // => \"独自の未定義値\"\n}\nfn(); \n```", "```\nlet null; // => SyntaxError \n```", "```\nconst obj = {}; // 中身が空のオブジェクトを作成 \n```", "```\nconst obj = {\n    \"key\": \"value\"\n}; \n```", "```\nconst obj = {\n    \"key\": \"value\"\n};\n// ドット記法\nconsole.log(obj.key); // => \"value\"\n// ブラケット記法\nconsole.log(obj[\"key\"]); // => \"value\" \n```", "```\n// プロパティ名は文字列の\"123\"\nconst object = {\n    \"123\": \"value\"\n};\n// OK: ブラケット記法では、文字列として書くことができる\nconsole.log(object[\"123\"]); // => \"value\"\n// NG: ドット記法では、数値からはじまる識別子は利用できない\nobject.123 \n```", "```\nconst emptyArray = []; // 空の配列を作成\nconst array = [1, 2, 3]; // 値を持った配列を作成 \n```", "```\nconst array = [\"index:0\", \"index:1\", \"index:2\"];\n// 0 番目の要素を参照\nconsole.log(array[0]); // => \"index:0\"\n// 1 番目の要素を参照\nconsole.log(array[1]); // => \"index:1\" \n```", "```\nconst numberRegExp = /\\d+/; // 1 文字以上の数字にマッチする正規表現\n// `numberRegExp`の正規表現が文字列\"123\"にマッチするかをテストする\nconsole.log(numberRegExp.test(\"123\")); // => true \n```", "```\n// 文字列をラップしたStringラッパーオブジェクト\nconst str = new String(\"文字列\");\n// ラッパーオブジェクトは\"object\"型のデータ\nconsole.log(typeof str); // => \"object\"\n// Stringオブジェクトの`length`プロパティは文字列の長さを返す\nconsole.log(str.length); // => 3 \n```", "```\n// プリミティブ型の文字列データ\nconst str = \"文字列\";\n// プリミティブ型の文字列は\"string\"型のデータ\nconsole.log(typeof str); // => \"string\"\n// プリミティブ型の文字列も`length`プロパティを参照できる\nconsole.log(str.length); // => 3 \n```"]