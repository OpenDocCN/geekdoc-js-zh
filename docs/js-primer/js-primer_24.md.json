["```\nfunction fn() {\n    const x = 1;\n    // fn 関数のスコープ内から`x`は参照できる\n    console.log(x); // => 1\n}\nfn();\n// fn 関数のスコープ外から`x`は参照できないためエラー\nconsole.log(x); // => ReferenceError: x is not defined \n```", "```\nfunction fn(arg) {\n    // fn 関数のスコープ内から仮引数`arg`は参照できる\n    console.log(arg); // => 1\n}\nfn(1);\n// fn 関数のスコープ外から`arg`は参照できないためエラー\nconsole.log(arg); // => ReferenceError: arg is not defined \n```", "```\n// スコープ内に同じ\"a\"を定義すると SyntaxError となる\nlet a;\nlet a; \n```", "```\n// 異なる関数のスコープには同じ\"x\"を定義できる\nfunction fnA() {\n    let x;\n}\nfunction fnB() {\n    let x;\n} \n```", "```\n// ブロック内で定義した変数はスコープ内でのみ参照できる\n{\n    const x = 1;\n    console.log(x); // => 1\n}\n// スコープの外から`x`を参照できないためエラー\nconsole.log(x); // => ReferenceError: x is not defined \n```", "```\n// if 文のブロック内で定義した変数はブロックスコープの中でのみ参照できる\nif (true) {\n    const x = \"inner\";\n    console.log(x); // => \"inner\"\n}\nconsole.log(x); // => ReferenceError: x is not defined \n```", "```\nconst array = [1, 2, 3, 4, 5];\n// ループごとに新しいブロックスコープを作成する\nfor (const element of array) {\n    // forのブロックスコープの中でのみ`element`を参照できる\n    console.log(element);\n}\n// ループの外からはブロックスコープ内の変数は参照できない\nconsole.log(element); // => ReferenceError: element is not defined \n```", "```\n{\n    // OUTERブロックスコープ\n    {\n        // INNERブロックスコープ\n    }\n} \n```", "```\n{\n    // OUTERブロックスコープ\n    const x = \"x\";\n    {\n        // INNERブロックスコープからOUTERブロックスコープの変数を参照できる\n        console.log(x); // => \"x\"\n    }\n} \n```", "```\n{\n    // OUTERブロックスコープ\n    {\n        // INNERブロックスコープ\n        console.log(xyz); // => ReferenceError: xyz is not defined\n    }\n} \n```", "```\n{\n    // OUTERブロックスコープ\n    const x = \"outer\";\n    {\n        // INNERブロックスコープ\n        const x = \"inner\";\n        // 現在のスコープ(INNERブロックスコープ)にある`x`を参照する\n        console.log(x); // => \"inner\"\n    }\n    // 現在のスコープ(OUTERブロックスコープ)にある`x`を参照する\n    console.log(x); // => \"outer\"\n} \n```", "```\n// プログラム直下はグローバルスコープ\nconst x = \"x\";\nconsole.log(x); // => \"x\" \n```", "```\n// グローバル変数はどのスコープからも参照できる\nconst globalVariable = \"グローバル\";\n// ブロックスコープ\n{\n    // ブロックスコープ内には該当する変数が定義されてない -> 外側のスコープへ\n    console.log(globalVariable); // => \"グローバル\"\n}\n// 関数スコープ\nfunction fn() {\n    // 関数ブロックスコープ内には該当する変数が定義されてない -> 外側のスコープへ\n    console.log(globalVariable); // => \"グローバル\"\n}\nfn(); \n```", "```\n// ビルトインオブジェクトは実行環境が自動的に定義している\n// どこのスコープから参照してもReferenceErrorにはならない\nconsole.log(isNaN); // => isNaN\nconsole.log(Array); // => Array \n```", "```\n// \"Array\"という名前の変数を定義\nconst Array = 1;\n// 自分で定義した変数がビルトインオブジェクトより優先される\nconsole.log(Array); // => 1 \n```", "```\nfunction doHeavyTask() {\n    // 計測したい処理\n}\nconst startTime = Date.now();\ndoHeavyTask();\nconst endTime = Date.now();\nconsole.log(`実行時間は${endTime - startTime}ミリ秒`); \n```", "```\n// 実行時間を計測したい関数をコールバック関数として引数に渡す\nconst measureTask = (taskFn) => {\n    const startTime = Date.now();\n    taskFn();\n    const endTime = Date.now();\n    console.log(`実行時間は${endTime - startTime}ミリ秒`);\n};\nfunction doHeavyTask() {\n    // 計測したい処理\n}\nmeasureTask(doHeavyTask); \n```", "```\nlet let_x;\nvar var_x;\n// 宣言後にそれぞれの変数を参照すると`undefined`となる\nconsole.log(let_x); // => undefined\nconsole.log(var_x); // => undefined\n// 宣言後に値を代入できる\nlet_x = \"letのx\";\nvar_x = \"varのx\"; \n```", "```\nconsole.log(x); // => ReferenceError: can't access lexical declaration `x' before initialization\nlet x = \"letのx\"; \n```", "```\n// var 宣言より前に参照してもエラーにならない\nconsole.log(x); // => undefined\nvar x = \"varのx\"; \n```", "```\n// 解釈されたコード\n// スコープの先頭に宣言部分が巻き上げられる\nvar x;\nconsole.log(x); // => undefined\n// 変数への代入はそのままの位置に残る\nx = \"varのx\";\nconsole.log(x); // => \"varのx\" \n```", "```\nfunction fn() {\n    // 内側のスコープにあるはずの変数`x`が参照できる\n    console.log(x); // => undefined\n    {\n        var x = \"varのx\";\n    }\n    console.log(x); // => \"varのx\"\n}\nfn(); \n```", "```\n// 解釈されたコード\nfunction fn() {\n    // もっとも近い関数スコープの先頭に宣言部分が巻き上げられる\n    var x;\n    console.log(x); // => undefined\n    {\n        // 変数への代入はそのままの位置に残る\n        x = \"varのx\";\n    }\n    console.log(x); // => \"varのx\"\n}\nfn(); \n```", "```\n// `hello`関数の宣言より前に呼び出せる\nhello(); // => \"Hello\"\n\nfunction hello(){\n    return \"Hello\";\n} \n```", "```\n// 解釈されたコード\n// `hello`関数の宣言が巻き上げられる\nfunction hello(){\n    return \"Hello\";\n}\n\nhello(); // => \"Hello\" \n```", "```\n// `hello`変数は巻き上げられ、暗黙的に`undefined`となる\nhello(); // => TypeError: hello is not a function\n\n// `hello`変数へ関数を代入している\nvar hello = function(){\n    return \"Hello\";\n}; \n```", "```\n// 無名関数を宣言 + 実行を同時に行っている\n(function() {\n    // 関数のスコープ内でfoo 変数を宣言している\n    var foo = \"foo\";\n    console.log(foo); // => \"foo\"\n})();\n// foo 変数のスコープ外\nconsole.log(typeof foo === \"undefined\"); // => true \n```", "```\nfunction fn() {\n    var foo = \"foo\";\n    console.log(foo); // => \"foo\"\n}\nfn();\n// foo 変数のスコープ外\nconsole.log(typeof foo === \"undefined\"); // => true \n```", "```\n{\n    // ブロックスコープ内でfoo 変数を宣言している\n    const foo = \"foo\";\n    console.log(foo); // => \"foo\"\n}\n// foo 変数のスコープ外\nconsole.log(typeof foo === \"undefined\"); // => true \n```", "```\n// `increment`関数を定義して返す関数\nfunction createCounter() {\n    let count = 0;\n    // `increment`関数は`count`変数を参照\n    function increment() {\n        count = count + 1;\n        return count;\n    }\n    return increment;\n}\n// `myCounter`は`createCounter`が返した関数を参照\nconst myCounter = createCounter();\nmyCounter(); // => 1\nmyCounter(); // => 2\n// 新しく`newCounter`を定義する\nconst newCounter = createCounter();\nnewCounter(); // => 1\nnewCounter(); // => 2\n// `myCounter`と`newCounter`は別々の状態を持っている\nmyCounter(); // => 3\nnewCounter(); // => 3 \n```", "```\nconst x = 10; // ＊1\n\nfunction printX() {\n    // この識別子`x`は常に ＊1 の変数`x`を参照する\n    console.log(x); // => 10\n}\n\nfunction run() {\n    const x = 20; // ＊2\n    printX(); // 常に10が出力される\n}\n\nrun(); \n```", "```\n// 動的スコープの疑似的な言語のコード例（JavaScriptではありません）\n// 変数`x`を宣言\nvar x = 10;\n\n// `printX`という関数を定義\nfn printX() {\n    // 動的スコープの言語では、識別子`x`は呼び出し元によってどの変数`x`を参照するかが変わる\n    // `print`関数でコンソールへログ出力する\n    print(x);\n}\n\nfn run() {\n    // 呼び出し元のスコープで、変数`x`を定義している\n    var x = 20;\n    printX();\n}\n\nprintX(); // ここでは 10 が出力される\nrun(); // ここでは 20 が出力される \n```", "```\nlet x = \"before text\";\n// 変数`x`に新しいデータを代入する\nx = \"after text\";\n// このとき\"before text\"というデータはどこからも参照されなくなる\n// その後、ガベージコレクションによってメモリ上から解放される \n```", "```\nfunction printX() {\n    const x = \"X\";\n    console.log(x); // => \"X\"\n}\n\nprintX();\n// この時点で`\"X\"`を参照するものはなくなる -> 解放される \n```", "```\nfunction createArray() {\n    const tempArray = [1, 2, 3];\n    return tempArray;\n}\nconst array = createArray();\nconsole.log(array); // => [1, 2, 3]\n// 変数`array`が`[1, 2, 3]`という値を参照している -> 解放されない \n```", "```\nconst createCounter = () => {\n    let count = 0;\n    return function increment() {\n        // `increment`関数は`createCounter`関数のスコープに定義された`変数`count`を参照している\n        count = count + 1;\n        return count;\n    };\n};\n// createCounter()の実行結果は、内側で定義されていた`increment`関数\nconst myCounter = createCounter();\n// myCounter 関数の実行結果は`count`の評価結果\nconsole.log(myCounter()); // => 1\nconsole.log(myCounter()); // => 2 \n```", "```\nconst createCounter = () => {\n    let count = 0;\n    return function increment() {\n        // 変数`count`を参照し続けている\n        count = count + 1;\n        return count;\n    };\n};\n// countUpとnewCountUpはそれぞれ別のincrement 関数(内側にあるのも別のcount 変数)\nconst countUp = createCounter();\nconst newCountUp = createCounter();\n// 参照している関数(オブジェクト)は別であるため===は一致しない\nconsole.log(countUp === newCountUp);// false\n// それぞれの状態も別となる\nconsole.log(countUp()); // => 1\nconsole.log(newCountUp()); // => 1 \n```", "```\nconst createCounter = () => {\n    // 外のスコープから`privateCount`を直接参照できない\n    let privateCount = 0;\n    return () => {\n        privateCount++;\n        return `${privateCount}回目`;\n    };\n};\nconst counter = createCounter();\nconsole.log(counter()); // => \"1 回目\"\nconsole.log(counter()); // => \"2 回目\" \n```", "```\nfunction greaterThan(n) {\n    return function(m) {\n        return m > n;\n    };\n}\n// 5より大きな値かを判定する関数を作成する\nconst greaterThan5 = greaterThan(5);\nconsole.log(greaterThan5(4)); // => false\nconsole.log(greaterThan5(5)); // => false\nconsole.log(greaterThan5(6)); // => true \n```", "```\nfunction countUp() {\n    // countプロパティを参照して変更する\n    countUp.count = countUp.count + 1;\n    return countUp.count;\n}\n// 関数オブジェクトにプロパティとして値を代入する\ncountUp.count = 0;\n// 呼び出すごとにcountが更新される\nconsole.log(countUp()); // => 1\nconsole.log(countUp()); // => 2 \n```", "```\nfunction countUp() {\n    // countプロパティを参照して変更する\n    countUp.count = countUp.count + 1;\n    return countUp.count;\n}\ncountUp.count = 0;\n// 呼び出すごとにcountが更新される\nconsole.log(countUp()); // => 1\n// 直接値を変更できてしまう\ncountUp.count = 10;\nconsole.log(countUp()); // => 11 \n```"]