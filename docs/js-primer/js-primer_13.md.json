["```\n// `===`では、異なるデータ型の比較結果はfalse\nconsole.log(1 === \"1\"); // => false \n```", "```\n// `==`では、異なるデータ型は暗黙的な型変換をしてから比較される\n// 暗黙的な型変換によって 1 == 1 のように変換されてから比較される\nconsole.log(1 == \"1\"); // => true \n```", "```\n// 暗黙的な型変換が行われ、数値の加算として計算される\n1 + true; // => 2\n// 次のように暗黙的に変換されてから計算される\n1 + 1; // => 2 \n```", "```\n// 異なる型である場合に暗黙的な型変換が行われる\nconsole.log(1 == \"1\"); // => true\nconsole.log(0 == false); // => true\nconsole.log(10 == [\"10\"]); // => true \n```", "```\nconsole.log(1 === \"1\"); // => false\nconsole.log(0 === false); // => false\nconsole.log(10 === [\"10\"]); // => false \n```", "```\n1 + \"2\"; // => \"12\"\n// 演算過程で次のように暗黙的な型変換が行われる\n\"1\" + \"2\"; // => \"12\" \n```", "```\n1 - \"2\"; // => -1\n// 演算過程で次のように暗黙的な型変換が行われる\n1 - 2; // => -1 \n```", "```\nconst x = 1, y = \"2\", z = 3;\nconsole.log(x + y + z); // => \"123\"\nconsole.log(y + x + z); // => \"213\"\nconsole.log(x + z + y); // => \"42\" \n```", "```\nBoolean(\"string\"); // => true\nBoolean(1); // => true\nBoolean({}); // => true\nBoolean(0); // => false\nBoolean(\"\"); // => false\nBoolean(null); // => false \n```", "```\n// x は undefined\nlet x; \nif (!x) {\n    console.log(\"falsyな値なら表示\", x);\n} \n```", "```\n// x は undefined\nlet x;\nif (x === undefined) {\n    console.log(\"xがundefinedなら表示\", x);\n} \n```", "```\nString(1); // => \"1\" \n```", "```\nString(\"str\"); // => \"str\"\nString(true); // => \"true\"\nString(null); // => \"null\"\nString(undefined); // => \"undefined\"\nString(Symbol(\"シンボルの説明文\")); // => \"Symbol(シンボルの説明文)\"\n// プリミティブ型ではない値の場合\nString([1, 2, 3]); // => \"1,2,3\"\nString({ key: \"value\" }); // => \"[object Object]\"\nString(function() {}); // \"function() {}\" \n```", "```\n\"文字列\" + x; // 文字列となる？ \n```", "```\n\"文字列と\" + Symbol(\"シンボルの説明\"); // => TypeError: can't convert symbol to string \n```", "```\n\"文字列と\" + String(Symbol(\"シンボルの説明\")); // => \"文字列とSymbol(シンボルの説明)\" \n```", "```\n// ユーザー入力を文字列として受け取る\nconst input = window.prompt(\"数字を入力してください\", \"42\");\n// 文字列を数値に変換する\nconst num = Number(input);\nconsole.log(typeof num); // => \"number\"\nconsole.log(num); // 入力された文字列を数値に変換したもの \n```", "```\n// \"1\"をパースして10 進数として取り出す\nconsole.log(Number.parseInt(\"1\", 10)); // => 1\n// 余計な文字は無視してパースした結果を返す\nconsole.log(Number.parseInt(\"42px\", 10)); // => 42\nconsole.log(Number.parseInt(\"10.5\", 10)); // => 10\n// 文字列をパースして浮動小数点数として取り出す\nconsole.log(Number.parseFloat(\"1\")); // => 1\nconsole.log(Number.parseFloat(\"42.5px\")); // => 42.5\nconsole.log(Number.parseFloat(\"10.5\")); // => 10.5 \n```", "```\n// 数字ではないため、数値へは変換できない\nNumber(\"文字列\"); // => NaN\n// 未定義の値はNaNになる\nNumber(undefined); // => NaN \n```", "```\nconst userInput = \"任意の文字列\";\nconst num = Number.parseInt(userInput, 10);\nif (Number.isNaN(num)) {\n    console.log(\"パースした結果 NaNになった\", num);\n} \n```", "```\nNumber({}); // => NaN \n```", "```\nconst x = 10;\nconst y = x + NaN;\nconst z = y + 20;\nconsole.log(x); // => 10\nconsole.log(y); // => NaN\nconsole.log(z); // => NaN \n```", "```\n// NaNはnumber 型\nconsole.log(typeof NaN); // => \"number\" \n```", "```\nfunction isNaN(x) {\n    // NaNは自分自身と一致しない\n    return x !== x;\n}\nconsole.log(isNaN(1)); // => false\nconsole.log(isNaN(\"str\")); // => false\nconsole.log(isNaN({})); // => false\nconsole.log(isNaN([])); // => false\nconsole.log(isNaN(NaN)); // => true \n```", "```\nNumber.isNaN(NaN); // => true \n```", "```\n// 任意の個数の数値を受け取り、その合計値を返す関数\nfunction sum(...values) {\n    return values.reduce((total, value) => {\n        return total + value;\n    }, 0);\n}\nconst x = 1, z = 10;\nlet y; // `y`はundefined\nconsole.log(sum(x, y, z)); // => NaN \n```", "```\nsum(1, undefined, 10); // => NaN\n// 計算中にNaNとなるため、最終結果もNaNになる\n1 + undefined; // => NaN\nNaN + 10; // => NaN \n```", "```\nfunction sum(...values) {\n    return values.reduce((total, value) => {\n        // `value`をNumberで明示的に数値へ変換してから加算する\n        return total + Number(value);\n    }, 0);\n}\nconst x = 1, z = 10;\nlet y; // `y`はundefined\nconsole.log(sum(x, y, z)); // => NaN \n```", "```\n/**\n * 数値を合計した値を返します。\n * 1つ以上の数値と共に呼び出す必要があります。\n * @param {...number} values\n * @returns {number}\n **/\nfunction sum(...values) {\n    return values.reduce((total, value) => {\n        // 値がNumber 型ではない場合に、例外を投げる\n        if (typeof value !== \"number\") {\n            throw new Error(`${value}はNumber 型ではありません`);\n        }\n        return total + Number(value);\n    }, 0);\n}\nconst x = 1, z = 10;\nlet y; // `y`はundefined\nconsole.log(x, y, z);\n// Number 型の値ではない`y`を渡しているため例外が発生する\nconsole.log(sum(x, y, z)); // => Error \n```", "```\n// 空文字列かどうかを判定\nfunction isEmptyString(str) {\n    // `str`がfalsyな値なら、`isEmptyString`関数は`true`を返す\n    return !Boolean(str);\n}\n// 空文字列列の場合は、trueを返す\nconsole.log(isEmptyString(\"\")); // => true\n// falsyな値の場合は、trueを返す\nconsole.log(isEmptyString(0)); // => true\n// undefinedの場合は、trueを返す\nconsole.log(isEmptyString()); // => true \n```", "```\n// 空文字列かどうかを判定\nfunction isEmptyString(str) {\n    // String 型でlengthが0の値の場合はtrueを返す\n    return typeof str === \"string\" && str.length === 0;\n}\nconsole.log(isEmptyString(\"\")); // => true\n// falsyな値でも正しく判定できる\nconsole.log(isEmptyString(0)); // => false\nconsole.log(isEmptyString()); // => false \n```"]