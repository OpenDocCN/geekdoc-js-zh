- en: オブジェクト
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jsprimer.net/basic/object/`](https://jsprimer.net/basic/object/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: オブジェクトはプロパティの集合です。プロパティとは名前（キー）と値（バリュー）が対になったものです。 プロパティのキーには文字列または`Symbol`が利用でき、値には任意のデータを指定できます。
    また、1つのオブジェクトは複数のプロパティを持てるため、1つのオブジェクトで多種多様な値を表現できます。
  prefs: []
  type: TYPE_NORMAL
- en: 今までも登場してきた、配列や関数などもオブジェクトの一種です。 JavaScriptには、あらゆるオブジェクトの元となる`Object`というビルトインオブジェクトがあります。
    ビルトインオブジェクトは、実行環境にあらかじめ定義されているオブジェクトのことです。 `Object`というビルトインオブジェクトはECMAScriptの仕様で定義されているため、あらゆるJavaScriptの実行環境で利用できます。
  prefs: []
  type: TYPE_NORMAL
- en: この章では、オブジェクトの作成や扱い方、`Object`というビルトインオブジェクトについて見ていきます。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#create-object)*オブジェクトを作成する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*オブジェクトを作成するには、オブジェクトリテラル（`{}`）を利用します。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトリテラルでは、初期値としてプロパティを持つオブジェクトを作成できます。 プロパティは、オブジェクトリテラル（`{}`）の中にキーと値を`:`（コロン）で区切って記述します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトリテラルのプロパティ名（キー）はクォート（`"`や`'`）を省略できます。 そのため、次のように書いても同じです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: ただし、変数名として利用できないプロパティ名はクォート（`"`や`'`）で囲む必要があります。 次の`my-prop`というプロパティ名は、変数名として利用できない`-`が含まれているため定義できません（「変数と宣言」の章の「変数名に使える名前のルール
    」を参照）
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`my-prop`というプロパティ名を定義する場合は、クォート（`"`や`''`）で囲む必要があります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトリテラルでは複数のプロパティ（キーと値の組み合わせ）を持つオブジェクトも作成できます。 複数のプロパティを定義するには、それぞれのプロパティを`,`（カンマ）で区切ります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: プロパティの値に変数名を指定すれば、そのキーは指定した変数を参照します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ��たES2015からは、プロパティ名と値に指定する変数名が同じ場合は`{ name }`のように省略して書けます。 次のコードは、プロパティ名`name`に変数`name`を値にしたプロパティを設定しています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: この省略記法は、モジュールや分割代入においても共通した表現です。 そのため、`{}`の中でプロパティ名が単独で書かれている場合は、この省略記法を利用していることに注意してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#object-instance-object)*`{}`は`Object`のインスタンスオブジェクト*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Object`はJavaScriptのビルトインオブジェクトです。 オブジェクトリテラル（`{}`）は、このビルトインオブジェクトである`Object`を元にして新しいオブジェクトを作成するための構文です。'
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトリテラル以外の方法として、`new`演算子を使うことで、`Object`から新しいオブジェクトを作成できます。 次のコードでは、`new Object()`でオブジェクトを作成していますが、これは空のオブジェクトリテラルと同じ意味です。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: オブジェクトリテラルのほうが明らかに簡潔で、プロパティの初期値も指定できるため、`new Object()`を使う利点はありません。
  prefs: []
  type: TYPE_NORMAL
- en: '`new Object()`でオブジェクトを作成することは、「`Object`のインスタンスオブジェクトを作成する」と言います。 しかしながら、`Object`やインスタンスオブジェクトなどややこしい言葉の使い分けが必要となってしまいます。
    そのため、この書籍ではオブジェクトリテラルと`new Object`どちらの方法であっても、単に「オブジェクトを作成する」と呼びます。'
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトリテラルは、`Object`から新しいインスタンスオブジェクトを作成していることを意識しておくとよいでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#property-access)*プロパティへのアクセス*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*オブジェクトのプロパティにアクセスする方法として、**ドット記法**（`.`）を使う方法と**ブラケット記法**（`[]`）があります。 それぞれの記法でプロパティ名を指定すると、その名前を持ったプロパティの値を参照できます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ドット記法（`.`）では、プロパティ名が変数名と同じく識別子の命名規則を満たす必要があります（「変数と宣言」の章の「変数名に使える名前のルール 」を参照）。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 一方、**ブラケット記法**では、`[`と`]`の間に任意の式を書けます。 そのため、識別子の命名規則とは関係なく、任意の文字列をプロパティ名として指定できます。
    ただし、プロパティ名は文字列へと暗黙的に変換されることに注意してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: また、ブラケット記法ではプロパティ名に変数も利用できます。 次のコードでは、プロパティ名に`myLang`という変数をブラケット記法で指定しています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: ドット記法ではプロパティ名に変数は利用できないため��プロパティ名に変数を指定したい場合はブラケット記法を利用します。 基本的には簡潔なドット記法（`.`）を使い、ドット記法で書けない場合はブラケット記法（`[]`）を使うとよいでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#object-destructuring)*[ES2015] オブジェクトと分割代入*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*同じオブジェクトのプロパティに何度もアクセスする場合に、何度も`オブジェクト.プロパティ名`と書くと冗長となりやすいです。 そのため、短い名前で利用できるように、そのプロパティを変数として定義し直すことがあります。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、変数`ja`と`en`を定義し、その初期値として`languages`オブジェクトのプロパティを代入しています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: このようにオブジェクトのプロパティを変数として定義し直すときには、分割代入（Destructuring assignment）が利用できます。
  prefs: []
  type: TYPE_NORMAL
- en: オブジェクトの分割代入では、左辺にオブジェクトリテラルのような構文で変数名を定義します。 右辺のオブジェクトから対応するプロパティ名が、左辺で定義した変数に代入されます。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、先ほどのコードと同じように`languages`オブジェクトから`ja`と`en`プロパティを取り出して変数として定義しています。 代入演算子のオペランドとして左辺と右辺それぞれに`ja`と`en`と書いていたのが、分割代入では一箇所に書くことができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[](#add-property)*添加属性*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*对象具有可变（mutable）的特性，即使创建后也可以更改其值。 因此，可以在创建后向对象添加属性。'
  prefs: []
  type: TYPE_NORMAL
- en: 添加属性的方法很简单，只需将值分配给要创建的属性名即可。 在这种情况下，如果对象中不存在指定的属性，则会自动创建该属性。
  prefs: []
  type: TYPE_NORMAL
- en: 可以使用点表示法或方括号表示法来添加属性。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 正如前面介绍的，点表示法只能使用作为变量标识符的属性名。
  prefs: []
  type: TYPE_NORMAL
- en: 另一方面，方括号表示法使用`object[expression]`中`expression`的评估结果作为属性名。 因此，当要将下面的内容作为属性名处理时，应使用方括号表示法。
  prefs: []
  type: TYPE_NORMAL
- en: 变量
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 无法作为变量标识符的字符串
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 使用方括号表示法定义属性也可以在对象字面量中使用。 在对象字面量中使用方括号表示法定义的属性名称为**Computed property names**。
    Computed property names 是从 ES2015 引入的语法，但其将`expression`的评估结果用作属性名与方括号表示法相同。
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码使用 Computed property names，将`key`变量的评估结果`"key-string"`作为属性名。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 我们已经介绍了 JavaScript 对象在创建后是可变的特性。 因此，函数可以向其传递的对象自行添加属性。
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码是一个不好的例子，它在`changeProperty`函数中向传入的对象添加属性。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 这样做会使对象的属性难以理解，因此最好尽量避免在创建后添加新属性。 我们建议在对象创建时使用对象字面量中定义属性。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#remove-property)*删除属性*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*要删除对象的属性，可以使用`delete`运算符。 可以通过将要删除的属性指定为`delete`运算符的右侧来删除属性。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[](#const-and-object)*[专栏] 使用 const 定义的对象是可变的*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*在前面的代码示例中，可以看到使用`const`声明的对象的属性可以无错误地更改。 执行下面的代码后，可以看到对象的属性值已更改。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript 的`const`并不是固定值，而是用于防止对变量的重新赋值。 因此，虽然可以防止对`obj`变量的重新赋值，但无法阻止对变量所指向的对象的更改（参考"变量和声明"中的
    const）。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 要防止更改创建的对象的属性，需要使用`Object.freeze`方法。 `Object.freeze`会冻结对象。 对冻结的对象进行属性添加或更改将导致抛出异常。
  prefs: []
  type: TYPE_NORMAL
- en: 但是，如果使用`Object.freeze`方法，则必须与 strict mode 一起使用（有关详细信息，请参阅"JavaScript 简介"中的 strict
    mode）。 在非 strict mode 下，即使对象被冻结，也不会抛出异常，而是简单地忽略对冻结对象的属性更改。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[](#confirm-property)*确认属性是否存在*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在 JavaScript 中，访问不存在的属性不会引发异常，而是返回`undefined`。 下面的代码尝试访问`obj`中不存在的`notFound`属性，因此返回`undefined`值。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 在 JavaScript 中，访问不存在的属性不会引发异常。 由于属性名拼写错误，只会返回`undefined`值，这可能导致错误不易被发现。
  prefs: []
  type: TYPE_NORMAL
- en: 即使属性名拼写错误，也不会引发异常。 只有在尝试访问嵌套属性名时才会引发异常。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`undefined`和`null`不是对象，因此访问不存在的属性会导致异常。 有四种方法可以检查对象是否具有某个属性。'
  prefs: []
  type: TYPE_NORMAL
- en: '`undefined`与之比较'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in`演算子'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.hasOwn`静���方法^([ES2022])'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.prototype.hasOwnProperty`方法'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#compare-to-undefined)*检查属性是否存在：与 undefined 比较*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*访问不存在的属性会返回`undefined`，因此通过实际访问属性也可以进行判断。 下面的代码通过检查`key`属性的值是否不为`undefined`来判断属性是否存在。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 然而，这种方法存在一个问题，即当属性的值为`undefined`时，无法区分属性本身是否存在。 在下面的代码中，由于`key`属性的值为`undefined`，因此尽管属性存在，但
    if 语句块不会执行。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 由于存在这样的问题，要判断属性是否存在，可以使用`in`运算符或`Object.hasOwn`静态方法。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#in-operator)*检查属性是否存在：使用 in 运算符*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`in`运算符用于判断指定对象上是否存在指定属性，并返回布尔值。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 下面的代码检查`obj`是否具有`key`属性。 `in`运算符只关注属性的存在与否，而不关心属性的值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[](#object-hasown-method)*[ES2022] 检查属性是否存在：`Object.hasOwn`静态方法*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Object.hasOwn`静态方法可以确定目标对象是否具有指定的属性。 将要检查的属性名称作为`Object.hasOwn`静态方法的参数传递给它。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 下面的代码判断了`obj`是否具有`key`属性。 `Object.hasOwn`静态方法也是如此，无论属性的值如何，只要对象具有指定的属性，它就会返回`true`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`in`操作符和`Object.hasOwn`静态方法返回相同的结果，但在严格意义上它们的行为有时会有所不同。 要了解这种行为上的差异，首先需要理解特殊对象——原型对象。
    因此，关于`in`操作符和`Object.hasOwn`静态方法的区别，将在下一章的“原型对象”中详细解释。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#hasOwnProperty-method)*检查属性是否存在：`Object.prototype.hasOwnProperty`方法*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Object.hasOwn`静态方法是在 ES2022 中引入的。 在 ES2022 之前，通常使用类似的方法`Object.prototype.hasOwnProperty`。
    `hasOwnProperty`方法与`Object.hasOwn`静态方法非常相似，但它们在调用它们的对象实例方面有所不同。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 但是，由于`hasOwnProperty`方法存在缺陷，因此在可以使用`Object.hasOwn`静态方法的情况下，没有理由使用它。 由于这个缺陷也与原型对象有关，所以将在下一章的“原型对象”中详细解释。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#optional-chaining-operator)*[ES2020] 可选链操作符（`?.`）*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*介绍了 4 种检查属性是否存在的方法。 如果属性的存在很重要，通常会使用`in`操作符或`Object.hasOwn`静态方法。*'
  prefs: []
  type: TYPE_NORMAL
- en: 但是，如果最终想要获取的是属性的值，则使用 if 语句与`undefined`进行比较也没有问题。 因为当需要获取值时，区分属性是否存在以及属性的值是否为`undefined`并没有意义。
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码如果定义了`widget.window.title`属性的值（不是`undefined`），则将该属性的值显示在控制台上。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 在访问嵌套属性（如`widget.window.title`）时，必须逐个检查属性的存在。 这是因为如果`widget`对象不具有`window`属性，则会返回`undefined`。
    在这种情况下，如果进一步访问嵌套的`widget.window.title`属性，则会导致引用`undefined.title`，从而导致异常。
  prefs: []
  type: TYPE_NORMAL
- en: 然而，每次访问属性时都用 AND 操作符（`&&`）与`undefined`进行比较会显得冗长。
  prefs: []
  type: TYPE_NORMAL
- en: 为了解决这个问题，在 ES2020 中引入了一个新的语法，即可选链操作符（`?.`）。 可选链操作符（`?.`）与点表示法（`.`）类似，用于访问属性。
  prefs: []
  type: TYPE_NORMAL
- en: 可选链操作符（`?.`）在左操作数为 nullish（`null`或`undefined`）时不会继续评估并返回`undefined`。 反之，如果属性存在，则返回该属性的值。
  prefs: []
  type: TYPE_NORMAL
- en: 换句话说，可选链操作符（`?.`）在访问不存在的属性时不会引发异常，而是返回`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 当使用 Optional chaining 操作符（`?.`）时，甚至不需要使用 if 语句就可以编写一个函数来显示上述小部件的标题。 在下面的`printWidgetTitle`函数中，如果可以访问`widget?.window?.title`，那么它的评估结果将被赋给变量`title`。
    如果无法访问属性，则返回`undefined`，因此通过 Nullish coalescing 操作符(`??`)，右侧的`"未定义"`将成为变量`title`的默认值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 此外，可选链操作符（`?.`）也可以与方括号表示法（`[]`）结合使用。 在方括号表示法中，如果左操作数为 nullish（`null`或`undefined`），则不会继续评估并返回`undefined`。
    反之，如果属性存在，则返回该属性的值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[](#toString-method)*`toString`方法*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*对象的`toString`方法是一种将对象本身转换为字符串的方法。 也可以使用`String`构造函数来执行此操作。 那么这两者有什么区别呢？（关于`String`构造函数，请参阅“隐式强制类型转换”）*'
  prefs: []
  type: TYPE_NORMAL
- en: 实际上`String`构造函数会调用传递给它的对象的`toString`方法。因此，`String`构造函数和`toString`方法的结果都是相同的。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 这一点可以通过重新定义对象的`toString`方法来理解。 试着将自定义的`toString`方法定义为对象，然后尝试使用`String`构造函数将其转换为字符串。
    结果会发现，重新定义的`toString`方法的返回值将成为`String`构造函数的返回值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[](#object-property-is-to-string)*[专栏] 对象属性名会被转换为字符串*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在访问对象的属性时，指定的属性名会被隐式转换为字符串。 使用方括号表示法时，可以将对象作为属性名指定，但这并不会按预期工作。 这是因为将对象转换为字符串会得到`"[object
    Object]"`这样的字符串。'
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码中，使用方括号表示法指定了`keyObject1`和`keyObject2`作为属性名。 但是，`keyObject1`和`keyObject2`都会被转换为相同的`"[object
    Object]"`字符串，导致属性被意外覆盖。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 作为唯一的例外，Symbol 不会被转换为字符串，可以作为对象的属性名。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 通常，应该记住对象的属性名被视为字符串。 此外，内置对象`Map`可以将对象用作键（详细信息请参阅“Map/Set”章节）。 因此，如果要将对象用作键，则应使用`Map`。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#static-method)*对象的静态方法*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*最后，让我们看一下作为内置对象的`Object`的静态方法。 **静态方法**是可以从实例对象的基础对象调用的方法。'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object`的`toString`方法等是从`Object`的实例对象调用的方法。 相反，像`Object.hasOwn`这样的静态方法是`Object`本身实现的方法。'
  prefs: []
  type: TYPE_NORMAL
- en: 这里介绍了一些在对象处理中常用的**静态方法**。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#enumeration)*对象的枚举*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*正如之前提到的，对象是属性的集合。 有三种静态方法可用于枚举对象的属性。'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object.keys`方法：返回一个由对象的属性名组成的数组'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.values`方法^([ES2017])：返回对象值的数组'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.entries`方法^([ES2017])：返回对象属性名和值的数组的数组'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 分别返回对象的键、值和键值对的数组。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 结合这些列举属性的静态方法和数组的`forEach`方法，可以对属性进行迭代处理。 下面的代码使用`Object.keys`方法获取属性名列表并将其输出到控制台。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[](#copy-and-merge)*对象的合并和复制*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Object.assign`方法^([ES2015])可以将一个对象分配给另一个对象。 使用此方法可以复制对象或合并对象。'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object.assign`方法用于将一个或多个`sources`对象的可枚举属性复制到`target`对象中。 返回值是`target`对象。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[](#merge)*对象的合并*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*让我们看一些具体的对象合并示例。'
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码将创建一个新的空对象作为`target`。 这个空对象（`target`）将合并`objectA`和`objectB`，成为`Object.assign`方法的返回值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 第一���参数可以是现有对象，而不仅仅是空对象。 如果指定现有对象作为第一个参数，则该对象的属性将被修改。
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码向指定的`objectA`添加属性。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 通过将空对象作为`target`，可以创建一个合并了对象而不影响现有对象的新对象。 因此，通常将空对象字面量作为`Object.assign`方法的第一个参数是典型用法。
  prefs: []
  type: TYPE_NORMAL
- en: 当属性名重复时，后一个对象的属性将覆盖前一个对象的属性。 在 JavaScript 中，通常是按顺序从前到后处理。 因此，可以将`objectA`分配给空对象，然后将`objectB`分配给结果。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[](#object-spread-syntax)*[ES2018] 对象的 spread 構文合并*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*在 ES2018 中，引入了对象的合并操作符`...`（spread 構文）。 在 ES2015 中，数组元素的展开操作符`...`（spread
    構文）已经被支持，而在 ES2018 中也支持了对象。 对象的 spread 構文可以展开指定对象的属性到对象字面量中。'
  prefs: []
  type: TYPE_NORMAL
- en: 对象的 spread 構文会创建一个新对象，与`Object.assign`不同。 这是因为 spread 構文只能在对象字面量中使用，而对象字面量会创建新对象。
  prefs: []
  type: TYPE_NORMAL
- en: 下面的代码将返回合并了`objectA`和`objectB`的新对象。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 当属性名冲突时，后一个对象将优先。 因此，当合并具有相同属性名的对象时，后一个对象将覆盖属性。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[](#copy)*对象的复制*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*JavaScript 中没有提供复制对象的函数。 但是，通过创建一个新的空对象，并将现有对象的属性复制到其中，可以实现对象的复制。 使用`Object.assign`方法可以复制对象。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 需要注意的是，`Object.assign`方法只会进行浅拷贝（shallow copy）操作，即只会拷贝`sources`对象直接的属性。浅拷贝意味着不会递归地复制嵌套对象的属性。如果属性的值是一个对象，它不会复制嵌套的对象。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 相反，如果要递归地复制属性值，即进行深拷贝（deep copy），可以通过递归调用浅拷贝来实现。下面的代码示例展示了如何使用`shallowClone`来实现`deepClone`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 因此，JavaScript 的内置方法通常只提供浅实现，并且很少提供深实现。这是因为 JavaScript 作为一种语言只提供了最基本的功能，更复杂的功能需要用户自己实现。
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript 作为语言规范最低限度地定义了功能，因此有很多由用户创建的小型功能库来补充它。这些库通过名为 npm 的 JavaScript 包管理工具进行发布，构建了
    JavaScript 生态系统。有关使用库的信息，请参阅“用例：在 Node.js 中创建 CLI 应用程序”章节。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#conclusion)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*本章介绍了对象。*'
  prefs: []
  type: TYPE_NORMAL
- en: 存在名为`Object`的内置对象。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 使用`{}`（对象字面量）来创建和更新对象的方法。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 要确认属性是否存在，可以使用`in`操作符或`Object.hasOwn`静态方法。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 可选链操作符（`?.`）允许同时检查嵌套属性的存在并访问它们。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 对象的实例方法和静态方法。
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript 的`Object`是其他对象的基础对象。接下来的"prototype-object"章节将探讨`Object`作为基础对象的运作方式。
  prefs: []
  type: TYPE_NORMAL
