["```\nthis.#todoListModel.onChange(() => {\n    const todoListElement = element`<ul></ul>`;\n    const todoItems = this.#todoListModel.getTodoItems();\n    todoItems.forEach(item => {\n        // 完了済みならchecked 属性をつけ、未完了ならchecked 属性を外す\n        // input 要素にはcheckboxクラスをつける\n        const todoItemElement = item.completed\n            ? element`<li><input type=\"checkbox\" class=\"checkbox\" checked><s>${item.title}</s></li>`\n            : element`<li><input type=\"checkbox\" class=\"checkbox\">${item.title}</li>`;\n        todoListElement.appendChild(todoItemElement);\n    });\n    render(todoListElement, containerElement);\n    todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n}); \n```", "```\nconst todoItemElement = element`<li><input type=\"checkbox\" class=\"checkbox\">${item.title}</li>`;\n// クラス名 checkboxを持つ要素を取得\nconst inputCheckboxElement = todoItemElement.querySelector(\".checkbox\");\n// `<input type=\"checkbox\">`のチェックが変更されたときに呼ばれるイベントリスナーを登録\ninputCheckboxElement.addEventListener(\"change\", () => {\n    // チェックボックスの表示が変わったタイミングで呼び出される処理\n    // TODO: ここでモデルを更新する処理を呼ぶ\n}); \n```", "```\n // ===============================\n    // TodoListModel.jsの既存の実装は省略\n    // ===============================\n    /**\n     * 指定したidのTodoItemのcompletedを更新する\n     * @param {{ id:number, completed: boolean }}\n     */\n    updateTodo({ id, completed }) {\n        // `id`が一致するTodoItemを見つけ、あるなら完了状態の値を更新する\n        const todoItem = this.#items.find(todo => todo.id === id);\n        if (!todoItem) {\n            return;\n        }\n        todoItem.completed = completed;\n        this.emitChange();\n    }\n} \n```", "```\nthis.#todoListModel.onChange(() => {\n    const todoListElement = element`<ul></ul>`;\n    const todoItems = this.#todoListModel.getTodoItems();\n    todoItems.forEach(item => {\n        // 完了済みならchecked 属性をつけ、未完了ならchecked 属性を外す\n        const todoItemElement = item.completed\n            ? element`<li><input type=\"checkbox\" class=\"checkbox\" checked><s>${item.title}</s></li>`\n            : element`<li><input type=\"checkbox\" class=\"checkbox\">${item.title}</li>`;\n        // チェックボックスがトグルしたときのイベントにリスナー関数を登録\n        const inputCheckboxElement = todoItemElement.querySelector(\".checkbox\");\n        inputCheckboxElement.addEventListener(\"change\", () => {\n            // 指定したTodoアイテムの完了状態を反転させる\n            this.#todoListModel.updateTodo({\n                id: item.id,\n                completed: !item.completed\n            });\n        });\n        todoListElement.appendChild(todoItemElement);\n    });\n    render(todoListElement, containerElement);\n    todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n}); \n```", "```\n // ===============================\n    // TodoListModel.jsの既存の実装は省略\n    // ===============================\n    /**\n     * 指定したidのTodoItemを削除する\n     * @param {{ id: number }}\n     */\n    deleteTodo({ id }) {\n        // `id`に一致しないTodoItemだけを残すことで、`id`に一致するTodoItemを削除する\n        this.#items = this.#items.filter(todo => {\n            return todo.id !== id;\n        });\n        this.emitChange();\n    }\n} \n```", "```\nthis.#todoListModel.onChange(() => {\n    const todoListElement = element`<ul></ul>`;\n    const todoItems = this.#todoListModel.getTodoItems();\n    todoItems.forEach(item => {\n        // 削除ボタン(x)をそれぞれ追加する\n        const todoItemElement = item.completed\n            ? element`<li><input type=\"checkbox\" class=\"checkbox\" checked>\n                <s>${item.title}</s>\n                <button class=\"delete\">x</button>\n            </li>`\n            : element`<li><input type=\"checkbox\" class=\"checkbox\">\n                ${item.title}\n                <button class=\"delete\">x</button>\n            </li>`;\n        // チェックボックスのトグル処理は変更なし\n        const inputCheckboxElement = todoItemElement.querySelector(\".checkbox\");\n        inputCheckboxElement.addEventListener(\"change\", () => {\n            this.#todoListModel.updateTodo({\n                id: item.id,\n                completed: !item.completed\n            });\n        });\n        // 削除ボタン(x)がクリックされたときにTodoListModelからアイテムを削除する\n        const deleteButtonElement = todoItemElement.querySelector(\".delete\");\n        deleteButtonElement.addEventListener(\"click\", () => {\n            this.#todoListModel.deleteTodo({\n                id: item.id\n            });\n        });\n        todoListElement.appendChild(todoItemElement);\n    });\n    render(todoListElement, containerElement);\n    todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n}); \n```"]