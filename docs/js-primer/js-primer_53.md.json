["```\nexport class EventEmitter {\n    // 登録する [イベント名, Set(リスナー関数)] を管理するMap\n    #listeners = new Map();\n    /**\n     * 指定したイベントが実行されたときに呼び出されるリスナー関数を登録する\n     * @param {string} type イベント名\n     * @param {Function} listener イベントリスナー\n     */\n    addEventListener(type, listener) {\n        // 指定したイベントに対応するSetを作成しリスナー関数を登録する\n        if (!this.#listeners.has(type)) {\n            this.#listeners.set(type, new Set());\n        }\n        const listenerSet = this.#listeners.get(type);\n        listenerSet.add(listener);\n    }\n\n    /**\n     * 指定したイベントをディスパッチする\n     * @param {string} type イベント名\n     */\n    emit(type) {\n        // 指定したイベントに対応するSetを取り出し、すべてのリスナー関数を呼び出す\n        const listenerSet = this.#listeners.get(type);\n        if (!listenerSet) {\n            return;\n        }\n        listenerSet.forEach(listener => {\n            listener.call(this);\n        });\n    }\n\n    /**\n     * 指定したイベントのイベントリスナーを解除する\n     * @param {string} type イベント名\n     * @param {Function} listener イベントリスナー\n     */\n    removeEventListener(type, listener) {\n        // 指定したイベントに対応するSetを取り出し、該当するリスナー関数を削除する\n        const listenerSet = this.#listeners.get(type);\n        if (!listenerSet) {\n            return;\n        }\n        listenerSet.forEach(ownListener => {\n            if (ownListener === listener) {\n                listenerSet.delete(listener);\n            }\n        });\n    }\n} \n```", "```\nimport { EventEmitter } from \"./EventEmitter.js\";\nconst event = new EventEmitter();\n// イベントリスナー（コールバック関数）を登録\nevent.addEventListener(\"test-event\", () => console.log(\"One!\"));\nevent.addEventListener(\"test-event\", () => console.log(\"Two!\"));\n// イベントをディスパッチする\nevent.emit(\"test-event\");\n// コールバック関数がそれぞれ呼びだされ、コンソールには次のように出力される\n// \"One!\"\n// \"Two!\" \n```", "```\n// ユニークなIDを管理する変数\nlet todoIdx = 0;\n\nexport class TodoItemModel {\n    /** @type {number} TodoアイテムのID */\n    id;\n    /** @type {string} Todoアイテムのタイトル */\n    title;\n    /** @type {boolean} Todoアイテムが完了済みならばtrue、そうでない場合はfalse */\n    completed;\n\n    /**\n     * @param {{ title: string, completed: boolean }}\n     */\n    constructor({ title, completed }) {\n        // idは連番となり、それぞれのインスタンス毎に異なるものとする\n        this.id = todoIdx++;\n        this.title = title;\n        this.completed = completed;\n    }\n} \n```", "```\nimport { TodoItemModel } from \"./TodoItemModel.js\";\nconst item = new TodoItemModel({\n    title: \"未完了のTodoアイテム\",\n    completed: false\n});\nconst completedItem = new TodoItemModel({\n    title: \"完了済みのTodoアイテム\",\n    completed: true\n});\n// それぞれの`id`は異なる\nconsole.log(item.id !== completedItem.id); // => true \n```", "```\nimport { EventEmitter } from \"../EventEmitter.js\";\n\nexport class TodoListModel extends EventEmitter {\n    #items;\n    /**\n     * @param {TodoItemModel[]} [items] 初期アイテム一覧（デフォルトは空の配列）\n     */\n    constructor(items = []) {\n        super();\n        this.#items = items;\n    }\n\n    /**\n     * TodoItemの合計個数を返す\n     * @returns {number}\n     */\n    getTotalCount() {\n        return this.#items.length;\n    }\n\n    /**\n     * 表示できるTodoItemの配列を返す\n     * @returns {TodoItemModel[]}\n     */\n    getTodoItems() {\n        return this.#items;\n    }\n\n    /**\n     * TodoListの状態が更新されたときに呼び出されるリスナー関数を登録する\n     * @param {Function} listener\n     */\n    onChange(listener) {\n        this.addEventListener(\"change\", listener);\n    }\n\n    /**\n     * 状態が変更されたときに呼ぶ。登録済みのリスナー関数を呼び出す\n     */\n    emitChange() {\n        this.emit(\"change\");\n    }\n\n    /**\n     * TodoItemを追加する\n     * @param {TodoItemModel} todoItem\n     */\n    addTodo(todoItem) {\n        this.#items.push(todoItem);\n        this.emitChange();\n    }\n} \n```", "```\nimport { TodoItemModel } from \"./TodoItemModel.js\";\nimport { TodoListModel } from \"./TodoListModel.js\";\n// 新しいTodoリストを作成する\nconst todoListModel = new TodoListModel();\n// 現在のTodoアイテム数は0\nconsole.log(todoListModel.getTotalCount()); // => 0\n// Todoリストが変更されたら呼ばれるイベントリスナーを登録する\ntodoListModel.onChange(() => {\n    console.log(\"TodoListの状態が変わりました\");\n});\n// 新しいTodoアイテムを追加する\n// => `onChange`で登録したイベントリスナーが呼び出される\ntodoListModel.addTodo(new TodoItemModel({\n    title: \"新しいTodoアイテム\",\n    completed: false\n}));\n// Todoリストにアイテムが増える\nconsole.log(todoListModel.getTotalCount()); // => 1 \n```", "```\nimport { TodoListModel } from \"./model/TodoListModel.js\";\nimport { TodoItemModel } from \"./model/TodoItemModel.js\";\nimport { element, render } from \"./view/html-util.js\";\n\nexport class App {\n    // 1\\. TodoListModelの初期化\n    #todoListModel = new TodoListModel();\n\n    mount() {\n        const formElement = document.querySelector(\"#js-form\");\n        const inputElement = document.querySelector(\"#js-form-input\");\n        const containerElement = document.querySelector(\"#js-todo-list\");\n        const todoItemCountElement = document.querySelector(\"#js-todo-count\");\n        // 2\\. TodoListModelの状態が更新されたら表示を更新する\n        this.#todoListModel.onChange(() => {\n            // TodoリストをまとめるList 要素\n            const todoListElement = element`<ul></ul>`;\n            // それぞれのTodoItem 要素をtodoListElement 以下へ追加する\n            const todoItems = this.#todoListModel.getTodoItems();\n            todoItems.forEach(item => {\n                const todoItemElement = element`<li>${item.title}</li>`;\n                todoListElement.appendChild(todoItemElement);\n            });\n            // コンテナ要素の中身をTodoリストをまとめるList 要素で上書きする\n            render(todoListElement, containerElement);\n            // アイテム数の表示を更新\n            todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n        });\n        // 3\\. フォームを送信したら、新しいTodoItemModelを追加する\n        formElement.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            // 新しいTodoItemをTodoListへ追加する\n            this.#todoListModel.addTodo(new TodoItemModel({\n                title: inputElement.value,\n                completed: false\n            }));\n            inputElement.value = \"\";\n        });\n    }\n} \n```", "```\nimport { TodoListModel } from \"./model/TodoListModel.js\";\nimport { TodoItemModel } from \"./model/TodoItemModel.js\"; \n```", "```\n// ...省略...\nexport class App {\n    // 1\\. TodoListModelの初期化\n    #todoListModel = new TodoListModel();\n    // ...省略...\n} \n```", "```\n<!-- todoListElementの実質的な中身 -->\n<ul>\n    <li>Todoアイテム1のタイトル</li>\n    <li>Todoアイテム2のタイトル</li>\n</ul> \n```", "```\nimport { TodoListModel } from \"./model/TodoListModel.js\";\n// render 関数をimportに追加する\nimport { element, render } from \"./view/html-util.js\";\nexport class App {\n    #todoListModel = new TodoListModel();\n\n    mount() {\n        // ...省略...\n        this.#todoListModel.onChange(() => {\n            // ...省略...\n            // コンテナ要素の中身をTodoリストをまとめるList 要素で上書きする\n            render(todoListElement, containerElement);\n            // アイテム数の表示を更新\n            todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n        });\n        // ...省略...\n    }\n} \n```"]