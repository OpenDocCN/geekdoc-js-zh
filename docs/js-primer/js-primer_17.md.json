["```\nwhile (条件式) {\n    実行する文;\n} \n```", "```\nlet x = 0;\nconsole.log(`ループ開始前のxの値: ${x}`);\nwhile (x < 10) {\n    console.log(x);\n    x += 1;\n}\nconsole.log(`ループ終了後のxの値: ${x}`); \n```", "```\nlet i = 1;\n// 条件式が常にtrueになるため、無限ループする\nwhile (i > 0) {\n    console.log(`${i}回目のループ`);\n    i += 1;\n} \n```", "```\ndo {\n    実行する文;\n} while (条件式); \n```", "```\nconst x = 1000;\ndo {\n    console.log(x); // => 1000\n} while (x < 10); \n```", "```\nfor (初期化式; 条件式; 増分式) {\n    実行する文;\n} \n```", "```\nlet total = 0; // totalの初期値は0\n// for 文の実行フロー\n// iを0で初期化\n// iが10 未満（条件式を満たす）ならfor 文の処理を実行\n// iに1を足し、再び条件式の判定へ\nfor (let i = 0; i < 10; i++) {\n    total += i + 1; // 1から10の値をtotalに加算している\n}\nconsole.log(total); // => 55 \n```", "```\nfunction sum(numbers) {\n    let total = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total;\n}\n\nconsole.log(sum([1, 2, 3, 4, 5])); // => 15 \n```", "```\nconst array = [1, 2, 3];\narray.forEach(currentValue => {\n    // 配列の要素ごとに呼び出される処理\n}); \n```", "```\nconst array = [1, 2, 3];\n// forEachは\"コールバック関数\"を受け取る高階関数\narray.forEach(コールバック関数); \n```", "```\nconst array = [1, 2, 3];\narray.forEach(currentValue => {\n    console.log(currentValue);\n});\n// 1\n// 2\n// 3\n// と順番に出力される \n```", "```\nfunction sum(numbers) {\n    let total = 0;\n    numbers.forEach(num => {\n        total += num;\n    });\n    return total;\n}\n\nsum([1, 2, 3, 4, 5]); // => 15 \n```", "```\nwhile (true) {\n    break; // *1 へ\n}\n// *1 次の文 \n```", "```\nconst numbers = [1, 5, 10, 15, 20];\n// 偶数があるかどうか\nlet isEvenIncluded = false;\nfor (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    // numが2で割り切れるなら偶数\n    if (num % 2 === 0) {\n        isEvenIncluded = true;\n        break;\n    }\n}\nconsole.log(isEvenIncluded); // => true \n```", "```\n// 引数の`num`が偶数ならtrueを返す\nfunction isEven(num) {\n    return num % 2 === 0;\n}\n// 引数の`numbers`に偶数が含まれているならtrueを返す\nfunction isEvenIncluded(numbers) {\n    let isEvenIncluded = false;\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        if (isEven(num)) {\n            isEvenIncluded = true;\n            break;\n        }\n    }\n    return isEvenIncluded;\n}\nconst array = [1, 5, 10, 15, 20];\nconsole.log(isEvenIncluded(array)); // => true \n```", "```\nfunction isEven(num) {\n    return num % 2 === 0;\n}\nfunction isEvenIncluded(numbers) {\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        if (isEven(num)) {\n            return true;\n        }\n    }\n    return false;\n}\nconst numbers = [1, 5, 10, 15, 20];\nconsole.log(isEvenIncluded(numbers)); // => true \n```", "```\nconst array = [1, 2, 3, 4, 5];\nconst isPassed = array.some(currentValue => {\n    // テストをパスするとtrue、そうでないならfalseを返す\n}); \n```", "```\nfunction isEven(num) {\n    return num % 2 === 0;\n}\nconst numbers = [1, 5, 10, 15, 20];\nconsole.log(numbers.some(isEven)); // => true \n```", "```\nwhile (条件式) {\n    // 実行される処理\n    continue; // `条件式` へ\n    // これ以降の行は実行されません\n} \n```", "```\n// `number`が偶数ならtrueを返す\nfunction isEven(num) {\n    return num % 2 === 0;\n}\n// `numbers`に含まれている偶数だけを取り出す\nfunction filterEven(numbers) {\n    const results = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        // 偶数ではないなら、次のループへ\n        if (!isEven(num)) {\n            continue;\n        }\n        // 偶数を`results`に追加\n        results.push(num);\n    }\n    return results;\n}\nconst array = [1, 5, 10, 15, 20];\nconsole.log(filterEven(array)); // => [10, 20] \n```", "```\nif (isEven(number)) {\n    results.push(number);\n} \n```", "```\nconst array = [1, 2, 3, 4, 5];\n// テストをパスしたものを集めた配列\nconst filteredArray = array.filter((currentValue, index, array) => {\n    // テストをパスするならtrue、そうでないならfalseを返す\n}); \n```", "```\nfunction isEven(num) {\n    return num % 2 === 0;\n}\n\nconst array = [1, 5, 10, 15, 20];\nconsole.log(array.filter(isEven)); // => [10, 20] \n```", "```\nfor (プロパティ in オブジェクト) {\n    実行する文;\n} \n```", "```\nconst obj = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n};\n// 注記: ループのたびに毎回新しいブロックに変数 keyが定義されるため、再定義エラーが発生しない\nfor (const key in obj) {\n    const value = obj[key];\n    console.log(`key:${key}, value:${value}`);\n}\n// \"key:a, value:1\"\n// \"key:b, value:2\"\n// \"key:c, value:3\" \n```", "```\nconst obj = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n};\nObject.keys(obj).forEach(key => {\n    const value = obj[key];\n    console.log(`key:${key}, value:${value}`);\n});\n// \"key:a, value:1\"\n// \"key:b, value:2\"\n// \"key:c, value:3\" \n```", "```\nconst numbers = [5, 10];\nlet total = 0;\nfor (const num in numbers) {\n    // 0 + \"0\" + \"1\" という文字列結合が行われる\n    total += num;\n}\nconsole.log(total); // => \"001\" \n```", "```\nfor (variable of iterable) {\n    実行する文;\n} \n```", "```\nconst array = [1, 2, 3];\nfor (const value of array) {\n    console.log(value);\n}\n// 1\n// 2\n// 3 \n```", "```\nconst str = \"𠮷野家\";\nfor (const value of str) {\n    console.log(value);\n}\n// \"𠮷\"\n// \"野\"\n// \"家\" \n```"]