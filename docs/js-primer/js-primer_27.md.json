["```\ntry {\n    console.log(\"try 節:この行は実行されます\");\n    // 未定義の関数を呼び出してReferenceError 例外が発生する\n    undefinedFunction();\n    // 例外が発生したため、この行は実行されません\n} catch (error) {\n    // 例外が発生したあとはこのブロックが実行される\n    console.log(\"catch 節:この行は実行されます\");\n    console.log(error instanceof ReferenceError); // => true\n    console.log(error.message); // => \"undefinedFunction is not defined\"\n} finally {\n    // このブロックは例外の発生に関係なく必ず実行される\n    console.log(\"finally 節:この行は実行されます\");\n} \n```", "```\n// catch 節のみ\ntry {\n    undefinedFunction();\n} catch (error) {\n    console.error(error);\n}\n// finally 節のみ\ntry {\n    undefinedFunction();\n} finally {\n    console.log(\"この行は実行されます\");\n}\n// finally 節のみでは例外がキャッチされないため、この行は実行されません \n```", "```\ntry {\n    // 例外を投げる\n    throw new Error(\"例外が投げられました\");\n} catch (error) {\n    // catch 節のスコープでerrorにアクセスできる\n    console.log(error.message); // => \"例外が投げられました\"\n} \n```", "```\n// 渡された数値が0 以上ではない場合に例外を投げる関数\nfunction assertPositiveNumber(num) {\n    if (num < 0) {\n        throw new Error(`${num} is not positive.`);\n    }\n}\n\ntry {\n    // 0 未満の値を渡しているので、関数が例外を投げる\n    assertPositiveNumber(-1);\n} catch (error) {\n    console.log(error instanceof Error); // => true\n    console.log(error.message); // => \"-1 is not positive.\"\n} \n```", "```\n// 文字列を例外として投げるアンチパターンの例\ntry {\n    throw \"例外が投げられました\";\n} catch (error) {\n    // catch 節の例外識別子は、投げられた値を参照する\n    console.log(error); // => \"例外が投げられました\"\n} \n```", "```\ntry {\n    // 存在しない変数を参照する\n    console.log(x);\n} catch (error) {\n    console.log(error instanceof ReferenceError); // => true\n    console.log(error.name); // => \"ReferenceError\"\n    console.log(error.message); // エラーメッセージが表示される\n} \n```", "```\n// JavaScriptとして正しくない構文をパースするとSyntaxErrorが発生する\nfoo! bar! \n```", "```\ntry {\n    // eval 関数は渡した文字列をJavaScriptとして実行する関数\n    // 正しくない構文をパースさせ、SyntaxErrorを実行時に発生させる\n    eval(\"foo! bar!\");\n} catch (error) {\n    console.log(error instanceof SyntaxError); // => true\n    console.log(error.name); // => \"SyntaxError\"\n    console.log(error.message); // エラーメッセージが表示される\n} \n```", "```\ntry {\n    // 関数ではないオブジェクトを関数として呼び出す\n    const fn = {};\n    fn();\n} catch (error) {\n    console.log(error instanceof TypeError); // => true\n    console.log(error.name); // => \"TypeError\"\n    console.log(error.message); // エラーメッセージが表示される\n} \n```", "```\n// 文字列を反転する関数\nfunction reverseString(str) {\n    if (typeof str !== \"string\") {\n        throw new TypeError(`${str} is not a string`);\n    }\n    return Array.from(str).reverse().join(\"\");\n}\n\ntry {\n    // 数値を渡す\n    reverseString(100);\n} catch (error) {\n    console.log(error instanceof TypeError); // => true\n    console.log(error.name); // => \"TypeError\"\n    console.log(error.message); // => \"100 is not a string\"\n} \n```", "```\nfunction fn() {\n    // 存在しない変数を参照する\n    x++;\n}\nfn(); \n```", "```\nfunction fn() {\n    console.log(\"メッセージ\");\n    console.error(\"エラーメッセージ\");\n}\n\nfn(); \n```", "```\nfunction somethingWork() {\n    throw new Error(\"本来のエラー\");\n}\n\ntry {\n    somethingWork();\n} catch (error) {\n    // `error` が持っていたスタックトレースが失われるため、実際にエラーが発生した場所がわからなくなる \n    throw new Error(\"somethingWork 関数でエラーが発生しました\");\n} \n```", "```\n// 数値の文字列を受け取り数値を返す関数\n// 'text' など数値にはならない文字列を渡された場合は例外を投げられる\nfunction safeParseInt(numStr) {\n    const num = Number.parseInt(numStr, 10);\n    if (Number.isNaN(num)) {\n        throw new Error(`${numStr} is not a numeric`);\n    }\n    return num;\n}\n\n// 数字の文字列を二つ受け取り、合計を返す関数\nfunction sumNumStrings(a, b) {\n    try {\n        const aNumber = safeParseInt(a);\n        const bNumber = safeParseInt(b);\n        return aNumber + bNumber;\n    } catch (e) {\n        throw new Error(\"Failed to sum a and b\", { cause: e });\n    }\n}\n\ntry {\n    // 数値にならない文字列 'string' を渡しているので例外が投げられる\n    sumNumStrings(\"string\", \"2\");\n} catch (err) {\n    console.error(err);\n} \n```"]