["```\n// 文字列\"あ\"のCode Pointを取得\nconsole.log(\"あ\".codePointAt(0)); // => 12354 \n```", "```\n// Code Pointが`12354`の文字を取得する\nconsole.log(String.fromCodePoint(12354)); // => \"あ\"\n// `12354`を16 進数リテラルで表記しても同じ結果\nconsole.log(String.fromCodePoint(0x3042)); // => \"あ\" \n```", "```\n// \"あ\"のCode Pointは12354\nconst codePointOfあ = \"あ\".codePointAt(0);\n// 12354の16 進数表現は\"3042\"\nconst hexOfあ = codePointOfあ.toString(16);\nconsole.log(hexOfあ);// => \"3042\"\n// Unicodeエスケープで\"あ\"を表現できる\nconsole.log(\"\\u{3042}\"); // => \"あ\" \n```", "```\n// 文字列をCode Unit(16 進数)の配列にして返す\nfunction convertCodeUnits(str) {\n    const codeUnits = [];\n    for (let i = 0; i < str.length; i++) {\n        codeUnits.push(str.charCodeAt(i).toString(16));\n    }\n    return codeUnits;\n}\n// 文字列をCode Point(16 進数)の配列にして返す\nfunction convertCodePoints(str) {\n    return Array.from(str).map(char => {\n        return char.codePointAt(0).toString(16);\n    });\n}\n\nconst str = \"アオイ\";\nconst codeUnits = convertCodeUnits(str);\nconsole.log(codeUnits); // => [\"30a2\", \"30aa\", \"30a4\"]\nconst codePoints = convertCodePoints(str);\nconsole.log(codePoints); // => [\"30a2\", \"30aa\", \"30a4\"] \n```", "```\n// 文字列をCode Unit(16 進数)の配列にして返す\nfunction convertCodeUnits(str) {\n    const codeUnits = [];\n    for (let i = 0; i < str.length; i++) {\n        codeUnits.push(str.charCodeAt(i).toString(16));\n    }\n    return codeUnits;\n}\n// 文字列をCode Point(16 進数)の配列にして返す\nfunction convertCodePoints(str) {\n    return Array.from(str).map(char => {\n        return char.codePointAt(0).toString(16);\n    });\n}\n\nconst str = \"リンゴ🍎\";\nconst codeUnits = convertCodeUnits(str);\nconsole.log(codeUnits); // => [\"30ea\", \"30f3\", \"30b4\", \"d83c\", \"df4e\"]\nconst codePoints = convertCodePoints(str);\nconsole.log(codePoints); // => [\"30ea\", \"30f3\", \"30b4\", \"1f34e\"] \n```", "```\n// 上位サロゲート + 下位サロゲートの組み合わせ\nconsole.log(\"\\uD867\\uDE3D\"); // => \"𩸽\"\n// Code Pointでの表現\nconsole.log(\"\\u{29e3d}\"); // => \"𩸽\" \n```", "```\n// Code Unit（上位サロゲート + 下位サロゲート）\nconsole.log(\"\\uD83C\\uDF4E\"); // => \"🍎\"\n// Code Point\nconsole.log(\"\\u{1F34E}\"); // => \"🍎\" \n```", "```\n// 内部的にはCode Unitが並んでいるものとして扱われている\nconsole.log(\"\\uD867\\uDE3D\"); // => \"𩸽\"\n// インデックスアクセスもCode Unitごととなる\nconsole.log(\"𩸽\"[0]); // => \"\\uD867\"\nconsole.log(\"𩸽\"[1]); // => \"\\uDE3D\" \n```", "```\nconsole.log(\"🍎\".length); // => 2 \n```", "```\nconst [all, fish] = \"𩸽のひらき\".match(/(.)のひらき/);\nconsole.log(all); // => \"\\ude3dのひらき\"\nconsole.log(fish); // => \"\\ude3d\" \n```", "```\nconst [all, fish] = \"𩸽のひらき\".match(/(.)のひらき/u);\nconsole.log(all); // => \"𩸽のひらき\"\nconsole.log(fish); // => \"𩸽\" \n```", "```\n// Code Unitの個数を返す\nconsole.log(\"🍎\".length); // => 2\nconsole.log(\"\\uD83C\\uDF4E\"); // => \"🍎\"\nconsole.log(\"\\uD83C\\uDF4E\".length); // => 2 \n```", "```\n// Code Pointごとの配列にする\n// Array.fromメソッドはIteratorを配列にする\nconst codePoints = Array.from(\"リンゴ🍎\");\nconsole.log(codePoints); // => [\"リ\", \"ン\", \"ゴ\", \"🍎\"]\n// Code Pointの個数を数える\nconsole.log(codePoints.length); // => 4 \n```", "```\n// 指定した`codePoint`の個数を数える\nfunction countOfCodePoints(str, codePoint) {\n    return Array.from(str).filter(item => {\n        return item === codePoint;\n    }).length;\n}\nconsole.log(countOfCodePoints(\"🍎🍇🍎🥕🍒\", \"🍎\")); // => 2 \n```", "```\n// 指定した`codePoint`の個数を数える\nfunction countOfCodePoints(str, codePoint) {\n    let count = 0;\n    for (const item of str) {\n        if (item === codePoint) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(countOfCodePoints(\"🍎🍇🍎🥕🍒\", \"🍎\")); // => 2 \n```"]