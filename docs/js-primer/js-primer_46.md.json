["```\n# sample \n```", "```\n// fs/promisesモジュール全体を読み込む\nimport * as fs from \"node:fs/promises\"; \n```", "```\n// fs/promisesモジュールからreadFile 関数を読み込む\nimport { readFile } from \"node:fs/promises\"; \n```", "```\n// 非同期 APIを提供するfs/promisesモジュールを読み込む\nimport * as fs from \"node:fs/promises\";\n\nfs.readFile(\"sample.md\").then(file => {\n    console.log(file);\n}).catch(err => {\n    console.error(err);\n}); \n```", "```\n// 同期 APIを提供するfsモジュールを読み込む\nimport * as fs from \"node:fs\";\n\ntry {\n    const file = fs.readFileSync(\"sample.md\");\n} catch (err) {\n    // ファイルが読み込めないなどのエラーが発生したときに呼ばれる\n} \n```", "```\nimport { program } from \"commander\";\n// fs/promisesモジュールをfsオブジェクトとしてインポートする\nimport * as fs from \"node:fs/promises\";\n\n// コマンドライン引数からファイルパスを取得する\nprogram.parse(process.argv);\nconst filePath = program.args[0];\n\n// ファイルを非同期で読み込む\nfs.readFile(filePath).then(file => {\n    console.log(file);\n}); \n```", "```\n$ node main.js sample.md\n<Buffer 23 20 73 61 6d 70 6c 65> \n```", "```\nimport { program } from \"commander\";\nimport * as fs from \"node:fs/promises\";\n\nprogram.parse(process.argv);\nconst filePath = program.args[0];\n\n// ファイルをUTF-8として非同期で読み込む\nfs.readFile(filePath, { encoding: \"utf8\" }).then(file => {\n    console.log(file);\n}); \n```", "```\n$ node main.js sample.md\n# sample \n```", "```\nimport { program } from \"commander\";\nimport * as fs from \"node:fs/promises\";\n\nprogram.parse(process.argv);\nconst filePath = program.args[0];\n\n// ファイルを非同期で読み込む\nfs.readFile(filePath, { encoding: \"utf8\" }).then(file => {\n    console.log(file);\n}).catch(err => {\n    console.error(err.message);\n    // 終了ステータス 1（一般的なエラー）としてプロセスを終了する\n    process.exit(1);\n}); \n```", "```\n$ node main.js notfound.md\nENOENT: no such file or directory, open 'notfound.md' \n```", "```\n// fsモジュールにはエラーファーストコールバックを扱う非同期 APIも含まれる\nimport * as fs from \"node:fs/promises\";\n\n// エラーファーストコールバックの第 1 引数にはエラー、第 2 引数 には結果が入るというルール\nfs.readFile(\"sample.md\", (err, file) => {\n    if (err) {\n        console.error(err.message);\n        process.exit(1);\n        return;\n    }\n    console.log(file);\n}); \n```"]