["```\n// greet.js\nexport function greet(name) {\n    return `Hello ${name}!`;\n}; \n```", "```\nimport { greet } from \"./greet.js\";\ngreet(\"World\"); // => \"Hello World!\" \n```", "```\nimport { marked } from \"marked\";\n\nexport function md2html(markdown, cliOptions) {\n    return marked.parse(markdown, {\n        gfm: cliOptions.gfm,\n    });\n}; \n```", "```\nimport { program } from \"commander\";\nimport * as fs from \"node:fs/promises\";\n// md2htmlモジュールからmd2html 関数をインポートする\nimport { md2html } from \"./md2html.js\";\n\nprogram.option(\"--gfm\", \"GFMを有効にする\");\nprogram.parse(process.argv);\nconst filePath = program.args[0];\n\nconst cliOptions = {\n    gfm: false,\n    ...program.opts(),\n};\n\nfs.readFile(filePath, { encoding: \"utf8\" }).then(file => {\n    // md2htmlモジュールを使ってHTMLに変換する\n    const html = md2html(file, cliOptions);\n    console.log(html);\n}).catch(err => {\n    console.error(err.message);\n    process.exit(1);\n}); \n```", "```\n$ npm install --save-dev mocha@10 \n```", "```\n{\n    ...\n    \"scripts\": {\n        \"test\": \"mocha test/\"\n    },\n    ...\n} \n```", "```\n$ npm test\n> mocha\n\n Error: No test files found \n```", "```\nimport * as assert from \"node:assert\";\nimport * as fs from \"node:fs/promises\";\nimport { md2html } from \"../md2html.js\";\n\nit(\"converts Markdown to HTML (GFM=false)\", async() => {\n    // fs.readFileはPromiseを返すので、`await`式で読み込みが完了するまで待って内容を取得する\n    const sample = await fs.readFile(\"test/fixtures/sample.md\", { encoding: \"utf8\" });\n    const expected = await fs.readFile(\"test/fixtures/expected.html\", { encoding: \"utf8\" });\n    // 末尾の改行の有無の違いを無視するため、変換後のHTMLのスペースをtrimメソッドで削除してから比較しています\n    assert.strictEqual(md2html(sample, { gfm: false }).trimEnd(), expected.trimEnd());\n});\n\nit(\"converts Markdown to HTML (GFM=true)\", async() => {\n    const sample = await fs.readFile(\"test/fixtures/sample.md\", { encoding: \"utf8\" });\n    const expected = await fs.readFile(\"test/fixtures/expected-gfm.html\", { encoding: \"utf8\" });\n    // 末尾の改行の有無の違いを無視するため、変換後のHTMLのスペースをtrimメソッドで削除してから比較しています\n    assert.strictEqual(md2html(sample, { gfm: true }).trimEnd(), expected.trimEnd());\n}); \n```", "```\n# サンプルファイル\n\nこれはサンプルです。\nhttps://jsprimer.net/\n\n- サンプル1\n- サンプル2 \n```", "```\n<h1 id=\"サンプルファイル\">サンプルファイル</h1>\n<p>これはサンプルです。\nhttps://jsprimer.net/</p>\n<ul>\n<li>サンプル1</li>\n<li>サンプル2</li>\n</ul> \n```", "```\n<h1 id=\"サンプルファイル\">サンプルファイル</h1>\n<p>これはサンプルです。\n<a href=\"https://jsprimer.net/\">https://jsprimer.net/</a></p>\n<ul>\n<li>サンプル1</li>\n<li>サンプル2</li>\n</ul> \n```", "```\n$ npm test\n> mocha\n\n  ✓ converts Markdown to HTML (GFM=false)\n  ✓ converts Markdown to HTML (GFM=true)\n\n  2 passing (31ms) \n```", "```\n$ npm test\n> mocha test/\n\n  ✔ converts Markdown to HTML (GFM=false)\n  1) converts Markdown to HTML (GFM=true)\n\n  1 passing (17ms)\n  1 failing\n\n  1) converts Markdown to HTML (GFM=true):\n\n      AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n+ actual - expected ... Lines skipped\n\n  '<h1 id=\"サンプルファイル\">サンプルファイル</h1>\\n' +\n    '<p>これはサンプルです。\\n' +\n...\n    '<li>サンプル1</li>\\n' +\n    '<li>サンプル2</li>\\n' +\n+   '</ul>'\n-   '</ul>\\n' +\n-   ';;;'\n      + expected - actual\n\n       <a href=\"https://jsprimer.net/\">https://jsprimer.net/</a></p>\n       <ul>\n       <li>サンプル1</li>\n       <li>サンプル2</li>\n      -</ul>\n      +</ul>\n      +;;; \n```"]