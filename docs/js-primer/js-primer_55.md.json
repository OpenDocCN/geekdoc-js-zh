["```\nimport { element } from \"./html-util.js\";\n\nexport class TodoItemView {\n    /**\n     * `todoItem`に対応するTodoアイテムのHTML 要素を作成して返す\n     * @param {TodoItemModel} todoItem\n     * @param {function({id:number, completed: boolean})} onUpdateTodo チェックボックスの更新イベントリスナー\n     * @param {function({id:number})} onDeleteTodo 削除ボタンのクリックイベントリスナー\n     * @returns {Element}\n     */\n    createElement(todoItem, { onUpdateTodo, onDeleteTodo }) {\n        const todoItemElement = todoItem.completed\n            ? element`<li><input type=\"checkbox\" class=\"checkbox\" checked>\n                                    <s>${todoItem.title}</s>\n                                    <button class=\"delete\">x</button>\n                                </li>`\n            : element`<li><input type=\"checkbox\" class=\"checkbox\">\n                                    ${todoItem.title}\n                                    <button class=\"delete\">x</button>\n                                </li>`;\n        const inputCheckboxElement = todoItemElement.querySelector(\".checkbox\");\n        inputCheckboxElement.addEventListener(\"change\", () => {\n            // コールバック関数に変更\n            onUpdateTodo({\n                id: todoItem.id,\n                completed: !todoItem.completed\n            });\n        });\n        const deleteButtonElement = todoItemElement.querySelector(\".delete\");\n        deleteButtonElement.addEventListener(\"click\", () => {\n            // コールバック関数に変更\n            onDeleteTodo({\n                id: todoItem.id\n            });\n        });\n        // 作成したTodoアイテムのHTML 要素を返す\n        return todoItemElement;\n    }\n} \n```", "```\nimport { render } from \"./html-util.js\";\nimport { TodoItemModel } from \"../model/TodoItemModel.js\";\nimport { TodoItemView } from \"./TodoItemView.js\";\n\n// TodoItemViewをインスタンス化\nconst todoItemView = new TodoItemView();\n// 対応するTodoItemModelを作成する\nconst todoItemModel = new TodoItemModel({\n    title: \"あたらしいTodo\",\n    completed: false\n});\n// TodoItemModelからHTML 要素を作成する\nconst todoItemElement = todoItemView.createElement(todoItemModel, {\n    onUpdateTodo: () => {\n        console.log(\"チェックボックスが更新されたときに呼ばれるリスナー関数\");\n    },\n    onDeleteTodo: () => {\n        console.log(\"削除ボタンがクリックされたときに呼ばれるリスナー関数\");\n    }\n});\nrender(todoItemElement, document.body); // <li>要素をdocument.bodyへレンダリング \n```", "```\nimport { element } from \"./html-util.js\";\nimport { TodoItemView } from \"./TodoItemView.js\";\n\nexport class TodoListView {\n    /**\n     * `todoItems`に対応するTodoリストのHTML 要素を作成して返す\n     * @param {TodoItemModel[]} todoItems TodoItemModelの配列\n     * @param {function({id:number, completed: boolean})} onUpdateTodo チェックボックスの更新イベントリスナー\n     * @param {function({id:number})} onDeleteTodo 削除ボタンのクリックイベントリスナー\n     * @returns {Element} TodoItemModelの配列に対応したリストのHTML 要素\n     */\n    createElement(todoItems, { onUpdateTodo, onDeleteTodo }) {\n        const todoListElement = element`<ul></ul>`;\n        // 各 TodoItemモデルに対応したHTML 要素を作成し、リスト要素へ追加する\n        todoItems.forEach(todoItem => {\n            const todoItemView = new TodoItemView();\n            const todoItemElement = todoItemView.createElement(todoItem, {\n                onDeleteTodo,\n                onUpdateTodo\n            });\n            todoListElement.appendChild(todoItemElement);\n        });\n        return todoListElement;\n    }\n} \n```", "```\nimport { TodoListModel } from \"./model/TodoListModel.js\";\nimport { TodoItemModel } from \"./model/TodoItemModel.js\";\nimport { TodoListView } from \"./view/TodoListView.js\";\nimport { render } from \"./view/html-util.js\";\n\nexport class App {\n    #todoListModel = new TodoListModel();\n\n    mount() {\n        const formElement = document.querySelector(\"#js-form\");\n        const inputElement = document.querySelector(\"#js-form-input\");\n        const containerElement = document.querySelector(\"#js-todo-list\");\n        const todoItemCountElement = document.querySelector(\"#js-todo-count\");\n        this.#todoListModel.onChange(() => {\n            const todoItems = this.#todoListModel.getTodoItems();\n            const todoListView = new TodoListView();\n            // todoItemsに対応するTodoListViewを作成する\n            const todoListElement = todoListView.createElement(todoItems, {\n                // Todoアイテムが更新イベントを発生したときに呼ばれるリスナー関数\n                onUpdateTodo: ({ id, completed }) => {\n                    this.#todoListModel.updateTodo({ id, completed });\n                },\n                // Todoアイテムが削除イベントを発生したときに呼ばれるリスナー関数\n                onDeleteTodo: ({ id }) => {\n                    this.#todoListModel.deleteTodo({ id });\n                }\n            });\n            render(todoListElement, containerElement);\n            todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n        });\n        formElement.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            this.#todoListModel.addTodo(new TodoItemModel({\n                title: inputElement.value,\n                completed: false\n            }));\n            inputElement.value = \"\";\n        });\n    }\n} \n```", "```\nimport { render } from \"./view/html-util.js\";\nimport { TodoListView } from \"./view/TodoListView.js\";\nimport { TodoItemModel } from \"./model/TodoItemModel.js\";\nimport { TodoListModel } from \"./model/TodoListModel.js\";\n\nexport class App {\n    #todoListView = new TodoListView();\n    #todoListModel = new TodoListModel([]);\n\n    /**\n     * Todoを追加するときに呼ばれるリスナー関数\n     * @param {string} title\n     */\n    handleAdd(title) {\n        this.#todoListModel.addTodo(new TodoItemModel({ title, completed: false }));\n    }\n\n    /**\n     * Todoの状態を更新したときに呼ばれるリスナー関数\n     * @param {{ id:number, completed: boolean }}\n     */\n    handleUpdate({ id, completed }) {\n        this.#todoListModel.updateTodo({ id, completed });\n    }\n\n    /**\n     * Todoを削除したときに呼ばれるリスナー関数\n     * @param {{ id: number }}\n     */\n    handleDelete({ id }) {\n        this.#todoListModel.deleteTodo({ id });\n    }\n\n    mount() {\n        const formElement = document.querySelector(\"#js-form\");\n        const inputElement = document.querySelector(\"#js-form-input\");\n        const todoItemCountElement = document.querySelector(\"#js-todo-count\");\n        const containerElement = document.querySelector(\"#js-todo-list\");\n        this.#todoListModel.onChange(() => {\n            const todoItems = this.#todoListModel.getTodoItems();\n            const todoListElement = this.#todoListView.createElement(todoItems, {\n                // Appに定義したリスナー関数を呼び出す\n                onUpdateTodo: ({ id, completed }) => {\n                    this.handleUpdate({ id, completed });\n                },\n                onDeleteTodo: ({ id }) => {\n                    this.handleDelete({ id });\n                }\n            });\n            render(todoListElement, containerElement);\n            todoItemCountElement.textContent = `Todoアイテム数: ${this.#todoListModel.getTotalCount()}`;\n        });\n\n        formElement.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            this.handleAdd(inputElement.value);\n            inputElement.value = \"\";\n        });\n    }\n} \n```", "```\nconst app = new App();\n// ページのロードが完了したときのイベント\nwindow.addEventListener(\"load\", () => {\n    app.mount();\n});\n// ページがアンロードされたときのイベント\nwindow.addEventListener(\"unload\", () => {\n    app.unmount();\n}); \n```"]