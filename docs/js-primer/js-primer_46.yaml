- en: 读取文件
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件
- en: 原文：[`jsprimer.net/use-case/nodecli/read-file/`](https://jsprimer.net/use-case/nodecli/read-file/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/use-case/nodecli/read-file/`](https://jsprimer.net/use-case/nodecli/read-file/)
- en: 前のセクションではコマンドライン引数からファイルパスを取得して利用できるようになりました。 このセクションでは渡されたファイルパスを元にMarkdownファイルを読み込んで、標準出力に表示してみましょう。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经能够从命令行参数中获取文件路径并加以利用。在本节中，我们将基于提供的文件路径读取Markdown文件，并将其内容输出到标准输出。
- en: '[](#read-file-by-fs)*使用`fs`模块读取文件*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#read-file-by-fs)*使用`fs`模块读取文件*'
- en: '*利用前一节获取的文件路径，读取文件。 要在 Node.js 中进行文件读写，可以使用标准模块[`fs`模块](https://nodejs.org/api/fs.html)。
    首先创建要读取的文件。 将其命名为`sample.md`，并放置在与`main.js`相同的`nodecli`目录中。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*利用前一节获取的文件路径，读取文件。要在Node.js中进行文件读写，可以使用标准模块[`fs`模块](https://nodejs.org/api/fs.html)。首先创建要读取的文件。将其命名为`sample.md`，并放置在与`main.js`相同的`nodecli`目录中。'
- en: sample.md
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: sample.md
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[](#fs-module)*`fs`模块*'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#fs-module)*`fs`模块*'
- en: '*`fs`模块提供了 Node.js 中进行文件读写的基本函数。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*`fs`模块提供了Node.js中进行文件读写的基本函数。'
- en: '`fs`模块提供了同步和异步两种形式。 虽然`fs`模块提供了同步和异步 API，但异步形式的 API 也可以使用`fs/promises`模块名来引用。
    本书中为了易于理解，将仅使用提供异步形式 API 的`fs/promises`模块。'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs`模块提供了同步和异步两种形式。虽然`fs`模块提供了同步和异步API，但异步形式的API也可以使用`fs/promises`模块名来引用。本书中为了易于理解，将仅使用提供异步形式API的`fs/promises`模块。'
- en: Node.js 的标准模块可以通过添加`node:`前缀（例如`node:fs`）来导入。 尽管可以省略前缀导入`fs`，但建议保留前缀以明确区分来自
    npm 安装的第三方模块。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的标准模块可以通过添加`node:`前缀（例如`node:fs`）来导入。尽管可以省略前缀导入`fs`，但建议保留前缀以明确区分来自npm安装的第三方模块。
- en: 下面的代码使用 ECMAScript 模块的`import * as`语法，将`fs/promises`模块作为`fs`对象导入。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码使用ECMAScript模块的`import * as`语法，将`fs/promises`模块作为`fs`对象导入。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 当然，也可以使用命名导入，只使用部分 API 而不是导入整个`fs/promises`模块。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以使用命名导入，只使用部分API而不是导入整个`fs/promises`模块。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`fs/promises`的异步 API 根据模块名称就可以理解，返回 Promise。 当文件读写等异步操作成功时，返回的 Promise 实例将被解析。
    另一方面，当文件读写等异步操作失败时，返回的 Promise 实例将被拒绝。'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs/promises`的异步API根据模块名称就可以理解，返回Promise。当文件读写等异步操作成功时，返回的Promise实例将被解析。另一方面，当文件读写等异步操作失败时，返回的Promise实例将被拒绝。'
- en: 下面的示例代码是使用`fs/promises`的`readFile`方法读取指定文件的示例。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例代码是使用`fs/promises`的`readFile`方法读取指定文件的示例。
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 然后，以下示例代码是使用`fs`模块的`readFileSync`方法读取指定文件的示例。 在 Node.js 中，具有异步 API 和同步 API 的
    API 都包含在方法名称的末尾明确表示为`Sync`。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下示例代码是使用`fs`模块的`readFileSync`方法读取指定文件的示例。在Node.js中，具有异步API和同步API的API都包含在方法名称的末尾明确表示为`Sync`。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Node.js 是单线程的，因此通常选择不阻塞其他处理的异步形式 API。 除了`fs/promises`模块外，Node.js 还提供了许多其他异步
    API，因此要熟悉异步处理。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是单线程的，因此通常选择不阻塞其他处理的异步形式API。除了`fs/promises`模块外，Node.js还提供了许多其他异步API，因此要熟悉异步处理。
- en: '[](#use-readFile)*使用 readFile 函数*'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#use-readFile)*使用 readFile 函数*'
- en: '*现在让我们使用`fs/promises`模块的`readFile`方法来读取`sample.md`文件。 修改`main.js`如下，并基于从命令行参数获取的文件路径来读取文件并将其输出到控制台。'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在让我们使用`fs/promises`模块的`readFile`方法来读取`sample.md`文件。修改`main.js`如下，并基于从命令行参数获取的文件路径来读取文件并将其输出到控制台。'
- en: main.js
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: main.js
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 传递`sample.md`作为参数的执行结果如下。 第二个参数不是字符串，这是因为回调函数的第二个参数是代表文件内容的`Buffer`实例。 `Buffer`实例将文件内容保存为字节序列。
    因此，直接传递给`console.log`方法并不会变成可读的字符串。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`sample.md`作为参数的执行结果如下。第二个参数不是字符串，这是因为回调函数的第二个参数是代表文件内容的`Buffer`实例。`Buffer`实例将文件内容保存为字节序列。因此，直接传递给`console.log`方法并不会变成可读的字符串。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`fs.readFile`函数可以通过参数指定文件的读取方式。 如果预先指定文件的编码方式作为第二个参数，则它将自动转换为字符串并传递给回调函数。 修改`main.js`如下，将读取的文件转换为
    UTF-8。'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs.readFile`函数可以通过参数指定文件的读取方式。如果预先指定文件的编码方式作为第二个参数，则它将自动转换为字符串并传递给回调函数。修改`main.js`如下，将读取的文件转换为UTF-8。'
- en: main.js
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: main.js
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 再次执行相同的命令，执行结果如下。 可以将`sample.md`文件的内容作为字符串输出。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行相同的命令，执行结果如下。可以将`sample.md`文件的内容作为字符串输出。
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[](#error-handling)*错误处理*'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#error-handling)*错误处理*'
- en: '*由于文件的存在与否、权限和文件系统的差异等原因，文件读写操作容易引发异常，因此务必编写错误处理代码。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于文件的存在与否、权限和文件系统的差异等原因，文件读写操作容易引发异常，因此务必编写错误处理代码。'
- en: 接下来的代码很简单，只是在`readFile`返回的 Promise 对象上添加了`catch`方法。 当发生错误时，它会显示错误消息并使用`process.exit`函数指定退出状态来终止进程。
    在这里，我们使用表示一般错误的退出状态`1`来终止进程。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码很简单，只是在`readFile`返回的Promise对象上添加了`catch`方法。当发生错误时，它会显示错误消息并使用`process.exit`函数指定退出状态来终止进程。在这里，我们使用表示一般错误的退出状态`1`来终止进程。
- en: main.js
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: main.js
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 当传递一个不存在的文件`notfound.md`作为命令行参数运行时，将会出现以下错误并退出。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递一个不存在的文件`notfound.md`作为命令行参数运行时，将会出现以下错误并退出。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 现在，我们已经可以读取并输出了通过命令行参数指定的文件。 在下一节中，我们将添加将读取的 Markdown 文件转换为 HTML 的功能。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经可以读取并输出通过命令行参数指定的文件。在下一节中，我们将添加将读取的Markdown文件转换为HTML的功能。
- en: '[](#node-error-first-callbak)*[专栏] Node.js 的错误优先回调*'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#node-error-first-callbak)*[专栏] Node.js 的错误优先回调*'
- en: '*我们介绍了`fs`模块提供同步和异步 API 的事实。 出于历史原因，在 Node.js 中也存在提供 Promise 和错误优先回调两种类型的异步
    API 的情况。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们介绍了`fs`模块提供同步和异步API的事实。出于历史原因，在Node.js中存在提供Promise和错误优先回调两种类型的异步API的情况。'
- en: '`fs/promises`模块的`readFile`方法是一个返回 Promise 的异步 API。 另一方面，`fs`模块也有一个`readFile`方法，该
    API 是一个处理错误优先回调的异步 API。'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`fs/promises`模块的`readFile`方法是一个返回Promise的异步API。另一方面，`fs`模块也有一个`readFile`方法，该API是一个处理错误优先回调的异步API。'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 错误优先回调也在异步章节中介绍。在 ES2015 之前，错误优先回调被广泛用作处理异步操作的方法，因为 Promises 在 ES2015 之前进入 ECMAScript
    之前，许多 Node.js 模块是在此之前创建的，因此像`fs`模块一样处理错误优先回调的 API 也存在。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 错误优先回调也在异步章节中介绍。在ES2015之前，错误优先回调被广泛用作处理异步操作的方法，因为Promises在ES2015之前进入ECMAScript之前，许多Node.js模块是在此之前创建的，因此像`fs`模块一样处理错误优先回调的API也存在于。
- en: 然而，由于 Promise 成为异步 API 的主流，Node.js 也添加了用于处理 Promise 的 API。然而，由于已经存在提供错误优先回调的同名方法，因此可以将其拆分为模块，例如对于`fs`，可以使用`fs/promises`。此外，Node.js
    还提供了一个名为`util.promisify`的方法，用于将接受错误优先回调的异步 API 包装为返回 Promise 的异步 API。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于Promise已成为异步API的主流，Node.js也添加了用于处理Promise的API。然而，由于已经存在提供错误优先回调的同名方法，因此可以将其拆分为模块，例如对于`fs`，可以使用`fs/promises`。此外，Node.js还提供了一个名为`util.promisify`的方法，用于将接受错误优先回调的异步API包装为返回Promise的异步API。
- en: 由于历史原因，Node.js 可能同时提供错误优先回调和 Promise 的 API。然而，如果两者都提供，则应使用 Promise 的 API。处理
    Promise 的 API 具有许多优点，如易于与其他处理 Promise 的操作协作、对 Async Function 的语法支持、简洁的错误处理等。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，Node.js可能同时提供错误优先回调和Promise的API。然而，如果两者都提供，则应使用Promise的API。处理Promise的API具有许多优点，如易于与其他处理Promise的操作协作、对Async
    Function的语法支持、简洁的错误处理等。
- en: '[](#section-checklist)*本节的检查清单*'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#section-checklist)*本节的检查清单*'
- en: '**   使用`fs/promises`模块的`readFile`函数读取文件'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**   使用`fs/promises`模块的`readFile`函数读取文件'
- en: 将 UTF-8 格式文件的内容输出到控制台
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UTF-8格式文件的内容输出到控制台
- en: '`readFile`函数的调用中添加了错误处理逻辑'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readFile`函数的调用中添加了错误处理逻辑'
