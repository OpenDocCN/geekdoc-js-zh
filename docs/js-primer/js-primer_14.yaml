- en: 函数和声明
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jsprimer.net/basic/function-declaration/`](https://jsprimer.net/basic/function-declaration/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 函数是将一系列操作（一组语句）作为一个处理单元组合在一起的功能。 通过使用函数，可以通过调用一次定义的函数来执行相同的操作，而不是每次都重复编写。
  prefs: []
  type: TYPE_NORMAL
- en: 到目前为止，我们使用的控制台输出 Console API 也是一个函数。 `console.log`将“将接收到的值输出到控制台”这一过程封装为一个函数。
  prefs: []
  type: TYPE_NORMAL
- en: 本章将讨论函数的定义和调用方式。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-declaration)*函数声明*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在 JavaScript 中，使用`function`关键字来定义函数。 以`function`开头的语句称为**函数声明**，可以定义如下函数。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 函数由以下 4 个元素组成。
  prefs: []
  type: TYPE_NORMAL
- en: 函数名 - 可用的名称与变量名相同（参考“变量名规则”）
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 形式参数 - 传递给函数调用的值存储在的变量中。 如果有多个，则用`,`（逗号）分隔
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 函数体 - 写有`{`和`}`的函数处理的地方
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 函数的返回值 - 调用函数时返回给调用者的值
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 声明的函数可以通过在函数名后加括号来调用。 当调用函数时与参数一起调用时，应该使用`函数名(参数 1, 参数 2)`，如果有多个参数，则用`,`（逗号）分隔。
  prefs: []
  type: TYPE_NORMAL
- en: 在函数体中，可以通过`return`语句返回任意值作为函数的执行结果。
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，定义了一个名为`double`的函数，该函数将接收到的值加倍返回。 `double`函数定义了一个名为`num`的形式参数，并将值`10`作为参数传递给函数调用。
    参数`num`被赋值为`10`，然后将其加倍的值通过`return`语句返回。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 当函数执行`return`语句时，函数内部将不再执行后续操作。 此外，如果函数不需要返回值，则可以省略`return`语句。 省略`return`语句时，将返回未定义的值`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 如果函数不需要返回任何值，则可以省略`return`语句。 省略`return`语句时，将返回值`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[](#function-arguments)*函数的参数*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在 JavaScript 中，即使定义函数时的形式参数数量与实际调用时的参数数量不同，也可以调用函数。 因此，需要了解参数数量不匹配时的行为。 此外，还将看到关于为省略参数指定默认值的默认参数语法。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-less-arguments)*呼叫时的参数过少*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*如果调用定义函数时的形式参数比实际调用时的参数少，则多余的形式参数将被赋值为`undefined`。'
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，定义了一个简单地返回传递值的`echo`函数。 `echo`函数定义了形式参数`x`，但如果在调用时没有传递参数，则形式参数`x`将包含`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 即使是接受多个参数的函数，多余的形式参数也将包含`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，定义了一个接收两个参数并将它们作为数组返回的`argumentsToArray`函数。 在这种情况下，如果只传递一个值作为参数，则剩余的形式参数将被赋值为`undefined`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[](#function-default-parameters)*[ES2015] 默认参数*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*默认参数允许在未传递与形式参数对应的参数时指定默认分配的值。 可以通过为每个形式参数指定默认值的语法`形式参数 = 默认值`来指定默认值。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 在下面的代码中，定义了一个简单地返回传递值的`echo`函数。 与之前的`echo`函数不同，这里为形式参数`x`指定了默认值。 因此，如果调用`echo`函数��没有传递参数，则形式参数`x`将被赋值为`"默认值"`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 在 ES2015 之前，经常使用 OR 运算符（`||`）来指定默认值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 然而，使用 OR 运算符（`||`）指定默认值存在一个问题。 使用 OR 运算符（`||`）时，如果左操作数为 falsy 值，则将评估右操作数。 falsy
    值是指在转换为布尔值后为`false`的值。（参考“隐式类型转换”章节）。
  prefs: []
  type: TYPE_NORMAL
- en: '`false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0n`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NaN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`""`（空字符串）'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 使用 OR 运算符（`||`）时，即使将`prefix`指定为空字符串，也会使用默认值。 这种行为非常难以理解，可能导致错误。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 使用默认参数编写可以避免这种行为，因此更加安全。 默认参数将在未传递参数时使用默认值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 此外，从 ES2020 开始，还可以使用 Nullish coalescing 运算符(`??`)来避免 OR 运算符（`||`）的问题并指定默认值。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[](#function-more-arguments)*呼叫时的参数过多*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*如果函数的形式参数比调用时的参数多，则多余的参数将被简单地忽略。'
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，定义了一个接收两个参数并返回它��之和的`add`函数。 `add`函数只有两个形式参数。 因此，即使传递了 3 个或更多的参数，第三个参数及以后的参数都将被简单地忽略。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[](#variable-arguments)*可变参数*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在函数中，参数的数量可能不固定，可能希望接受任意数量的参数。 例如，`Math.max(...args)`接受任意数量的参数，并返回接收到的参数中的最大数字的函数。
    这种接受任意数量而不是固定数量的参数称为**可变参数**。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 为了实现可变参数，可以使用特殊变量`arguments`，该变量仅在函数内部可引用。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#rest-parameters)*[ES2015] Rest parameters*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Rest parameters*是指在虚拟参数名之前加上`...`的虚拟参数，也称为剩余参数。 Rest parameters 将传递给函数的值分配为数组。'
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，`fn`函数定义了`...args`作为 Rest parameters。 当调用`fn`函数时，参数的值将被分配给`args`作为数组。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Rest parameters 可以与常规参数一起定义。 在与其他参数组合时，Rest parameters 必须作为最后一个参数进行定义。
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，第一个参数被分配给`arg1`，其余的参数被分配给`restArgs`作为数组。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Rest parameters 是指将参数收集到数组中的语法。
  prefs: []
  type: TYPE_NORMAL
- en: Spread 语法是指在数组前面加上`...`的语法，将数组的值展开作为函数的参数传递。 在下面的代码中，我们展开了`array`数组，并将其作为参数传递给`fn`函数。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[](#arguments)*`arguments`*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*处理可变参数的方法之一是使用函数内部可以引用的特殊变量`arguments`。 `arguments`是包含传递给函数的参数值的类似数组的对象。 类似数组的对象可以通过索引访问其元素，但不是`Array`，因此是一种特殊的对象，无法使用`Array`方法。'
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，`fn`函数没有定义参数。 但是，在函数内部，可以使用名为`arguments`的变量引用传递的参数，就像数组一样。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 在使用 Rest parameters 的环境中，没有必要使用`arguments`变量。 `arguments`变量存在以下问题。
  prefs: []
  type: TYPE_NORMAL
- en: 箭头函数中无法使用（有关箭头函数的详细信息，请参见下文）
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 由于是类似数组的对象，因此无法使用 Array 的方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 无法仅通过参数来判断函数是否接受可变长度参数
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`变量与参数定义无关，而是包含所有传递的参数。 因此，在仅查看函数参数定义部分时，很难知道实际函数需要的参数。 Rest parameters
    则可以清楚地表示是否接受可变长度参数。'
  prefs: []
  type: TYPE_NORMAL
- en: 因此，如果需要可变长度参数，请使用 Rest parameters 而不是`arguments`变量进行实现。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-destructuring)*[ES2015] 函数的参数和解构*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在函数参数中，也可以使用解构赋值（Destructuring assignment）。 解构赋值是一种语法，用于从对象或数组中获取属性，并重新定义为变量。*'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、関数の引数として`user`オブジェクトを渡し、`id`プロパティをコンソールへ出力しています。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 通过函数参数使用解构赋值，可以将此代码写为下面的样子。 下面的代码中，`printUserId`函数接收一个对象作为参数。 我们将传入的`user`对象的`id`属性定义为变量`id`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 在对象分解赋值的赋值运算符（`=`）中，左侧定义要定义的变量，右侧从对象中分配相应的属性。 将函数参数视为左侧，要传递给函数的参数视为右侧，就可以看到它们的语法几乎相同。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 函数参数中的解构赋值也适用于数组。 在下面的代码中，传递给参数的数组的第一个元素将分配给`first`，第二个元素将分配给`second`。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[](#first-class-function)*函数是对象*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*在 JavaScript 中，函数被称为函数对象，是一种对象。 函数不同于普通对象，因为您可以通过在函数名称后加上`()`来调用函数并调用封装的处理。*'
  prefs: []
  type: TYPE_NORMAL
- en: 另一方面，如果没有附加`()`调用，则可以引用函数作为对象。 此外，函数可以与其他值一样分配给变量或传递给函数作为参数。
  prefs: []
  type: TYPE_NORMAL
- en: 在下面的代码中，我们先将定义的`fn`函数分配给变量`myFunc`，然后调用它。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 函数可以作为值进行操作，这称为**第一类函数**。
  prefs: []
  type: TYPE_NORMAL
- en: 在上述代码中，我们先声明了函数，然后将其分配给变量。 但是，您也可以直接定义函数作为值。 当定义函数作为值时，可以使用与函数声明相同的`function`关键字方法和箭头函数方法。
    这两种方法都被称为**函数表达式**，因为它们将函数视为表达式（分配给的值）。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-expression)*函数表达式*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*函数表达式是指将函数作为值分配给变量的表达式。 函数声明是语句，而函数表达式则将函数视为值。 这与字符串或数字等变量声明的方式相同。*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 在函数表达式中，右侧的函数名可以省略`function`关键字。 这是因为定义的函数表达式可以通过变量名引用。 另一方面，在函数声明中，无法省略右侧的函数名。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 在函数表达式中，您可以将无名称的函数分配给变量。 此类无名称函数称为**匿名函数**（或者无名函数）。
  prefs: []
  type: TYPE_NORMAL
- en: 当然，您也可以为函数表达式命名。 但是，无法从外部调用该函数。 由于可以从函数内部调用，因此用于递归调用函数等。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[](#arrow-function)*[ES2015] Arrow Function*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*関数式には`function`キーワードを使った方法以外に、Arrow Functionと呼ばれる書き方があります。 名前のとおり矢印のような`=>`（イコールと大なり記号）を使い、無名関数を定義する構文です。
    次のように、`function`キーワードを使った関数式とよく似た書き方をします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Arrow Functionには書き方にいくつかのパターンがありますが、`function`キーワードに比べて短く書けるようになっています。 また、Arrow
    Functionには省略記法があり、次の場合にはさらに短く書けます。
  prefs: []
  type: TYPE_NORMAL
- en: 関数の仮引数が1つのときは`()`を省略できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 関数の処理が1つの式である場合に、ブロックと`return`文を省略できる
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: その式の評価結果を`return`の返り値とする
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Arrow Functionについては次のような特徴があります。
  prefs: []
  type: TYPE_NORMAL
- en: 名前をつけることができない（常に無名関数）
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`this`が静的に決定できる（詳細は「関数とスコープ」の章で解説します）'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function`キーワードに比べて短く書くことができる'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new`できない（コンストラクタ関数ではない）'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`変数を参照できない'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: たとえば`function`キーワードの関数式では、値を返すコールバック関数を次のように書きます。 配列の`map`メソッド��、配列の要素を順番にコールバック関数へ渡し、そのコールバック関数が返した値を新しい配列にして返します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Arrow Functionでは処理が1つの式だけである場合に、`return`文を省略し暗黙的にその式の評価結果を`return`の返り値とします。
    また、Arrow Functionは仮引数が1つである場合は`()`を省略できます。 このような省略はコールバック関数を多用する場合にコードの見通しを良くします。
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードは、先ほどの`function`キーワードで書いたコールバック関数と同じ結果になります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Arrow Functionは`function`キーワードの関数式に比べて、できることとできないことがはっきりしています。 たとえば、`function`キーワードでは非推奨としていた`arguments`変数を参照できますが、Arrow
    Functionでは参照できなくなっています。 Arrow Functionでは、人による解釈や実装の違いが生まれにくくなります。
  prefs: []
  type: TYPE_NORMAL
- en: また、`function`キーワードとArrow Functionの大きな違いとして、`this`という特殊なキーワードに関する挙動の違いがあります。
    `this`については「関数とスコープ」の章で解説しますが、Arrow Functionではこの`this`の問題の多くを解決できるという利点があります。
  prefs: []
  type: TYPE_NORMAL
- en: そのため、Arrow Functionで問題ない場合はArrow Functionで書き、そうでない場合は`function`キーワードを使うことを推奨します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-overwrite)*[コラム] 同じ名前の関数宣言は上書きされる*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*関数宣言で定義した関数は、関数の名前でのみ区別されます。 そのため、同じ名前の関数を複数回宣言した場合には、後ろで宣言された関数によって上書きされます。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`fn`という関数名を2つ定義していますが、最後に定義された`fn`関数が優先されています。 また、仮引数の定義が異なっていても、関数の名前が同じなら上書きされます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: このように、同じ関数名で複数の関数を定義することは、関数を上書きしてしまうため避けるべきです。 引数の違いで関数を呼び分けたい場合は、別々の名前で関数を定義するか関数の内部で引数の値で処理を分岐する必要があります。
  prefs: []
  type: TYPE_NORMAL
- en: この関数定義の上書きは`function`キーワードでの関数宣言と`var`キーワードを使った関数式のみで発生します。 一方で、`const`や`let`では同じ変数名の定義はエラーとなるため、このような関数定義の上書きもエラーとなります。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 関数の上書きを避けたい場合は、`const`と関数式を使って関数を定義することで、意図しない上書きが発生しにくくなります。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#callback)*コールバック関数*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*関数はファーストクラスであるため、その場で作った無名関数を関数の引数（値）として渡すことができます。 引数として渡される関数のことを**コールバック関数**と呼びます。
    一方、コールバック関数を引数として使う関数やメソッドのことを**高階関数**と呼びます。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: たとえば、配列の`forEach`メソッドはコールバック関数を引数として受け取る高階関数です。 `forEach`メソッドは、配列の各要素に対してコールバック関数を一度ずつ呼び出します。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 毎回、関数を定義してその関数をコールバック関数として渡すのは、少し手間がかかります。 そこで、関数はファーストクラスであることを利用して、コールバック関数となる無名関数をその場で定義して渡せます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: コールバック関数は非同期処理においてもよく利用されます。 非同期処理におけるコールバック関数の利用方法については「非同期処理」の章で解説します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#method)*メソッド*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*オブジェクトのプロパティである関数を**メソッド**と呼びます。 JavaScriptにおいて、関数とメソッドの機能的な違いはありません。 しかし、呼び方を区別したほうがわかりやすいため、ここではオブジェクトのプロパティである関数をメソッドと呼びます。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のコードでは、`obj`の`method1`プロパティと`method2`プロパティに関数を定義しています。 この`obj.method1`プロパティと`obj.method2`プロパティがメソッドです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 次のように空オブジェクトの`obj`を定義してから、`method`プロパティへ関数を代入してもメソッドを定義できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: メソッドを呼び出す場合は、関数呼び出しと同様に`オブジェクト.メソッド名()`と書くことで呼び出せます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[](#shorthand-for-method)*[ES2015] メソッドの短縮記法*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*先ほどの方法では、プロパティに関数を代入するという書き方になっていました。 ES2015からは、メソッドとしてプロパティを定義するための短縮した書き方が追加されています。'
  prefs: []
  type: TYPE_NORMAL
- en: 次のように、オブジェクトリテラルの中で `メソッド名(){ /*メソッドの処理*/ }` と書くことができます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: この書き方はオブジェクトのメソッドだけではなく、クラスのメソッドと共通の書き方となっています。 メソッドを定義する場合は、できるだけこの短縮記法に統一したほうがよいでしょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#function-declaration-summary)*まとめ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*この章では、次のことについて学びました。'
  prefs: []
  type: TYPE_NORMAL
- en: 関数の宣言方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 関数を値として使う方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 関数式とArrow Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: コールバック関数
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: メソッドの定義方法
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 我们学习了基本函数的定义和函数作为值。在 JavaScript 中，经常处理异步处理，在这种情况下会使用回调函数。通过使用箭头函数，可以将回调函数编写得更加简洁。
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript 中的方法是指对象属性中的函数。从 ES2015 开始，已经添加了定义方法的语法，因此我们将利用它。
  prefs: []
  type: TYPE_NORMAL
