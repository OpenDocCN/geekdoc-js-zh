- en: MarkdownをHTMLに変換する
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jsprimer.net/use-case/nodecli/md-to-html/`](https://jsprimer.net/use-case/nodecli/md-to-html/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 前のセクションではコマンドライン引数で受け取ったファイルを読み込み、標準出力に表示しました。 次は読み込んだMarkdownファイルをHTMLに変換して、その結果を標準出力に表示してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#use-marked-package)*markedパッケージを使う*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*JavaScriptでMarkdownをHTMLへ変換するために、今回は[marked](https://github.com/markedjs/marked)というライブラリを使用します。
    markedのパッケージはnpmで配布されているので、commanderと同様に`npm install`コマンドでパッケージをインストールしましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: インストールが完了したら、Node.jsのスクリプトから読み込みます。 前のセクションの最後で書いたスクリプトに、`marked`モジュールの読み込み処理を追加しましょう。
    次のように`main.js`を変更し、読み込んだMarkdownファイルをmarkedを使ってHTMLに変換します。 `marked`モジュールからインポートした`marked.parse`関数は、Markdown
    文字列を引数にとり、HTML 文字列に変換して返します。
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[](#create-convert-option)*変換オプションを作成する*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*markedにはMarkdownの[変換オプション](https://marked.js.org/#/USING_ADVANCED.md#options)があり、オプションの設定によって変換後のHTMLが変化します。
    そこで、アプリケーション中でオプションのデフォルト値を決め、さらにコマンドライン引数から設定を切り替えられるようにしてみましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: 今回のアプリケーションでは、例として`gfm`というmarkedのオプションを扱います。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#gfm-option)*gfmオプション*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`gfm`オプションは、GitHubにおけるMarkdownの仕様（[GitHub Flavored Markdown](https://github.github.com/gfm/),
    GFM）に合わせて変換するかを決めるオプションです。 markedではこの`gfm`オプションがデフォルトで`true`になっています。GFMは標準的なMarkdownにいくつかの拡張を加えたもので、代表的な拡張がURLの自動リンク化です。
    次のように`sample.md`を変更し、先ほどのスクリプトと`gfm`オプションを`false`にしたスクリプトで結果の違いを見てみましょう。'
  prefs: []
  type: TYPE_NORMAL
- en: sample.md
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`gfm`オプションが有効のときは、URLの文字列が自動的に`<a>`タグのリンクに置き換わります。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 一方、次のように`gfm`オプションを`false`にすると、単なる文字列として扱われ、リンクには置き換わりません。
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 自動リンクのほかにもいくつかの拡張がありますが、詳しくは[GitHub Flavored Markdown](https://github.github.com/gfm/)のドキュメントを参照してください。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#receive-option)*コマンドライン引数からオプションを受け取る*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*次に、`gfm`オプションをコマンドライン引数で制御できるようにしましょう。 アプリケーションのデフォルトでは`gfm`オプションを無効にした上で、次のように`--gfm`オプションを付与してコマンドを実行できるようにします。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: コマンドライン引数で`--gfm`のようなオプションを扱いたいときには、commanderの`option`メソッドを使います。 次のように必要なオプションを定義してからコマンドライン引数をパースすると、`program.opts`メソッドでパース結果のオブジェクトを取得できます。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`--gfm`オプションはファイルパスを指定する`sample.md`の前後のどちらについていても動作します。 なぜなら`program.args`配列に��`program.option`メソッドで定義したオプションが含まれないためです。
    `process.argv`配列を直接使っているとこのようなオプションの処理が面倒なので、commanderのようなパース処理を挟むのが一般的です。'
  prefs: []
  type: TYPE_NORMAL
- en: '[](#declare-default)*デフォルト設定を定義する*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*アプリケーション側でデフォルト設定を持っておくことで、将来的にmarkedの挙動が変わったときにも影響を受けにくくなります。 次のようにオプションを表現した`cliOptions`オブジェクトを作成し、`program.opts`メソッドの返り値から取得した値をセットします。
    コマンドライン引数で指定されなかったオプションには`??`（Nullish coalescing 演算子）を使ってデフォルトの値をセットします。 Nullish
    coalescing 演算子は左辺がnullishであるときにだけ右辺の値を返すため、値が指定されなかった状態と明示的に`false`が与えられた状態を区別したいときに便利です。'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: こうして作成したcliOptionsオブジェクトを、markedの`parse`関数へオプションとして渡しましょう。`main.js`の全体は次のようになります。
  prefs: []
  type: TYPE_NORMAL
- en: main.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 定義したコマンドライン引数を使って、Markdownファイルを変換してみましょう。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: また、`gfm`オプションを付与して実行すると次のように出力されるはずです。
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: これでMarkdown 変換の設定をコマンドライン引数でオプションとして与えられるようになりました。 次のセクションではアプリケーションのコードを整理し、最後にユニットテストを導入します。
  prefs: []
  type: TYPE_NORMAL
- en: '[](#section-checklist)*このセクションのチェックリスト*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**   markedパッケージを使ってMarkdown 文字列をHTML 文字列に変換した'
  prefs: []
  type: TYPE_NORMAL
- en: コマンドライン引数でmarkedの変換オプションを設定した
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: デフォルトオプションを定義し、コマンドライン引数で上書きできるようにした******
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
