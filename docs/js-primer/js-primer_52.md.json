["```\n// `id=\"js-form\"`の要素を取得\nconst formElement = document.querySelector(\"#js-form\");\n// form 要素から発生したsubmitイベントを受け取る\nformElement.addEventListener(\"submit\", (event) => {\n    // イベントが発生したときに呼ばれるコールバック関数（イベントリスナー）\n}); \n```", "```\nconst inputElement = document.querySelector(\"#js-form-input\");\nconsole.log(inputElement.value); // => \"input 要素の入力内容\" \n```", "```\nexport class App {\n    mount() {\n        const formElement = document.querySelector(\"#js-form\");\n        const inputElement = document.querySelector(\"#js-form-input\");\n        formElement.addEventListener(\"submit\", (event) => {\n            // submitイベントの本来の動作を止める\n            event.preventDefault();\n            console.log(`入力欄の値: ${inputElement.value}`);\n        });\n    }\n} \n```", "```\nimport { App } from \"./src/App.js\";\nconst app = new App();\napp.mount(); \n```", "```\nformElement.addEventListener(\"submit\", (event) => {\n    // submitイベントの本来の動作を止める\n    event.preventDefault();\n    console.log(`入力欄の値: ${inputElement.value}`);\n}); \n```", "```\nformElement.addEventListener(\"submit\", (event) => {\n    // preventDefaultしないとページがリロードされてしまう\n    // event.preventDefault();\n    console.log(`入力欄の値: ${inputElement.value}`);\n}); \n```", "```\ntodoapp\n├── index.html\n├── index.js (Appクラスのmountメソッドの呼び出し)\n└── src\n    └── App.js (Appクラスのmountメソッドの実装) \n```", "```\nexport function escapeSpecialChars(str) {\n    return str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * HTML 文字列からHTML 要素を作成して返す\n * @param {string} html \n */\nexport function htmlToElement(html) {\n    const template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return template.content.firstElementChild;\n}\n\n/**\n * HTML 文字列からDOM Nodeを作成して返すタグ関数\n * @return {Element}\n */\nexport function element(strings, ...values) {\n    const htmlString = strings.reduce((result, str, i) => {\n        const value = values[i - 1];\n        if (typeof value === \"string\") {\n            return result + escapeSpecialChars(value) + str;\n        } else {\n            return result + String(value) + str;\n        }\n    });\n    return htmlToElement(htmlString);\n}\n\n/**\n * コンテナ要素の中身をbodyElementで上書きする\n * @param {Element} bodyElement コンテナ要素の中身となる要素\n * @param {Element} containerElement コンテナ要素\n */\nexport function render(bodyElement, containerElement) {\n    // containerElementの中身を空にする\n    containerElement.innerHTML = \"\";\n    // containerElementの直下にbodyElementを追加する\n    containerElement.appendChild(bodyElement);\n} \n```", "```\nimport { element } from \"./html-util.js\";\n// HTML 文字列からHTML 要素を作成\nconst newElement = element`<ul>\n    <li>新しい要素</li>\n</ul>`;\n// 作成した要素を`document.body`の子要素として追加（appendChild）する\ndocument.body.appendChild(newElement); \n```", "```\nimport { element, render } from \"./html-util.js\";\n// renderの前に、要素をdocument.bodyへ追加する\nconst oldElement = element`<ul>\n    <li>既存の要素</li>\n</ul>`;\ndocument.body.appendChild(oldElement);\n// 新しい要素を作成する\nconst newElement = element`<ul>\n    <li>新しい要素</li>\n</ul>`;\n// `newElement`を`document.body`の子要素として追加する\n// すでに`document.body`以下にある要素は上書きされる\nrender(newElement, document.body); \n```", "```\nimport { element, render } from \"./view/html-util.js\";\n\nexport class App {\n    mount() {\n        const formElement = document.querySelector(\"#js-form\");\n        const inputElement = document.querySelector(\"#js-form-input\");\n        const containerElement = document.querySelector(\"#js-todo-list\");\n        const todoItemCountElement = document.querySelector(\"#js-todo-count\");\n        // TodoリストをまとめるList 要素\n        const todoListElement = element`<ul></ul>`;\n        // Todoアイテム数\n        let todoItemCount = 0;\n        formElement.addEventListener(\"submit\", (event) => {\n            // 本来のsubmitイベントの動作を止める\n            event.preventDefault();\n            // 追加するTodoアイテムの要素(li 要素)を作成する\n            const todoItemElement = element`<li>${inputElement.value}</li>`;\n            // TodoアイテムをtodoListElementに追加する\n            todoListElement.appendChild(todoItemElement);\n            // コンテナ要素の中身をTodoリストをまとめるList 要素で上書きする\n            render(todoListElement, containerElement);\n            // Todoアイテム数を+1し、表示されてるテキストを更新する\n            todoItemCount += 1;\n            todoItemCountElement.textContent = `Todoアイテム数: ${todoItemCount}`;\n            // 入力欄を空文字列にしてリセットする\n            inputElement.value = \"\";\n        });\n    }\n} \n```", "```\ntodoapp\n├── index.html\n├── index.js\n└── src\n    ├── App.js(Todoアイテムの表示の実装)\n    └── view\n        └── html-util.js(新規追加) \n```"]