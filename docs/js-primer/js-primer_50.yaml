- en: 入口点
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入口点
- en: 原文：[`jsprimer.net/use-case/todoapp/entrypoint/`](https://jsprimer.net/use-case/todoapp/entrypoint/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/use-case/todoapp/entrypoint/`](https://jsprimer.net/use-case/todoapp/entrypoint/)
- en: エントリーポイント指的是应用程序中首先调用的部分。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: エントリーポイント指的是应用程序中首先调用的部分。
- en: 在“Ajax 通信:エントリーポイント”用例中，入口点只是 HTML（`index.html`）。 首先加载 HTML，然后加载 HTML 中的`script`元素指定的
    JavaScript 文件。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Ajax 通信:エントリーポイント”用例中，入口点只是 HTML（`index.html`）。 首先加载 HTML，然后加载 HTML 中的`script`元素指定的
    JavaScript 文件。
- en: 本 Todo 应用程序将 JavaScript 处理模块化，并将每个模块作为单独的 JavaScript 文件创建。 JavaScript 模块可以通过
    HTML 中的`<script type="module">`加载，但每个`script`元素都有自己的模块作用域。 模块作用域是指在模块的顶层自动创建的作用域，位于全局作用域下。
    通过在不同的`script`元素中加载 JavaScript 模块，模块之间的作用域不同，因此无法协作。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本 Todo 应用程序将 JavaScript 处理模块化，并将每个模块作为单独的 JavaScript 文件创建。 JavaScript 模块可以通过
    HTML 中的`<script type="module">`加载，但每个`script`元素都有自己的模块作用域。 模块作用域是指在模块的顶层自动创建的作用域，位于全局作用域下。
    通过在不同的`script`元素中加载 JavaScript 模块，模块之间的作用域不同，因此无法协作。
- en: 下面的代码示例展示了由于每个`<script type="module">`的作用域不同，无法访问在另一个`script`元素中定义的变量。 这也适用于将
    JavaScript 模块作为文件并通过`src`属性加载的情况。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码示例展示了由于每个`<script type="module">`的作用域不同，无法访问在另一个`script`元素中定义的变量。 这也适用于将
    JavaScript 模块作为文件并通过`src`属性加载的情况。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 当将模块分别放在不同的`script`元素中处理时，模块之间无法协作。 因此，在 HTML 中只加载`index.js`的`script`元素，并从`index.js`中使用`import`语句加载其他模块。
    通过使用`import`语句，模块之间将位于一个`<script type="module">`的作用域内，从而实现模块之间的协作。 将从 HTML 加载的
    JavaScript 文件（`index.js`）作为 JavaScript 的入口点。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当将模块分别放在不同的`script`元素中处理时，模块之间无法协作。 因此，在 HTML 中只加载`index.js`的`script`元素，并从`index.js`中使用`import`语句加载其他模块。
    通过使用`import`语句，模块之间将位于一个`<script type="module">`的作用域内，从而实现模块之间的协作。 将从 HTML 加载的
    JavaScript 文件（`index.js`）作为 JavaScript 的入口点。
- en: 因此，在本次创建的 Todo 应用程序中，我们将准备 HTML 和 JavaScript 这两个入口点。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本次创建的 Todo 应用程序中，我们将准备 HTML 和 JavaScript 这两个入口点。
- en: '`index.html`：首先加载的文件，加载`index.js`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：首先加载的文件，加载`index.js`'
- en: '`index.js`：从`index.html`加载的文件，JavaScript 中首先加载的文件'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.js`：从`index.html`加载的文件，JavaScript 中首先加载的文件'
- en: 在本节中，我们将创建这两个入口点并加载它们。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建这两个入口点并加载它们。
- en: '*创建项目目录*'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*创建项目目录*'
- en: '*在这个应用中，需要多个文件，包括 HTML 和 JavaScript 等。因此，首先要创建一个目录来存放这些文件。'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这个应用中，需要多个文件，包括 HTML 和 JavaScript 等。因此，首先要创建一个目录来存放这些文件。'
- en: 在这里，我们将创建一个名为`todoapp`的新目录。 然后我们将在创建的`todoapp`目录下继续操作。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个名为`todoapp`的新目录。 然后我们将在创建的`todoapp`目录下继续操作。
- en: 在这个项目中，确保将文件保存为**UTF-8**编码，并使用**LF**作为换行符。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，确保将文件保存为**UTF-8**编码，并使用**LF**作为换行符。
- en: '*准备 HTML 文件*'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*准备 HTML 文件*'
- en: '*首先，创建一个包含最基本元素的 HTML 文件作为入口点。 在`todoapp`目录中创建名为`index.html`的 HTML 文件，并编写以下内容。
    在`body`元素的底部使用`script`元素加载`index.js`，这是本应用程序的处理 JavaScript 文件。'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，创建一个包含最基本元素的 HTML 文件作为入口点。 在`todoapp`目录中创建名为`index.html`的 HTML 文件，并编写以下内容。
    在`body`元素的底部使用`script`元素加载`index.js`，这是本应用程序的处理 JavaScript 文件。'
- en: index.html
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 接下来，在`todoapp`目录中创建`index.js`，内容如下。 为了确保`index.js`被正确加载，我们只编写输出日志到控制台的处理。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`todoapp`目录中创建`index.js`，内容如下。 为了确保`index.js`被正确加载，我们只编写输出日志到控制台的处理。
- en: index.js
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 到目前为止，`todoapp`目录的文件布局如下：
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`todoapp`目录的文件布局如下：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 接下来，我们将在浏览器中打开`index.html`，并确认控制台中是否输出了日志。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在浏览器中打开`index.html`，并确认控制台中是否输出了日志。
- en: '*在本地服务器上查看 HTML*'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*在本地服务器上查看 HTML*'
- en: '*在打开`index.html`之前，准备一个用于开发的本地服务器。 虽然可以直接打开 HTML 文件而不启动本地服务器，但这样的 URL 将以`file:///`开头。
    使用`file`协议时，由于[同源策略](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)，JavaScript
    模块将无法正常工作。 因此，在本章中，我们假设已经启动了本地服务器，并通过以`http`开头的 URL 进行访问。'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*在打开`index.html`之前，准备一个用于开发的本地服务器。 虽然可以直接打开 HTML 文件而不启动本地服务器，但这样的 URL 将以`file:///`开头。
    使用`file`协议时，由于[同源策略](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)，JavaScript
    模块将无法正常工作。 因此，在本章中，我们假设已经启动了本地服务器，并通过以`http`开头的 URL 进行访问。'
- en: 在命令行中进入`todoapp`目录，并使用以下命令启动本地服务器。 使用`npx`命令下载并执行为本书创建的`@js-primer/local-server`本地服务器模块。
    如果尚未准备好`npx`命令，请先参考“应用程序开发准备”章节。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中进入`todoapp`目录，并使用以下命令启动本地服务器。 使用`npx`命令下载并执行为本书创建的`@js-primer/local-server`本地服务器模块。
    如果尚未准备好`npx`命令，请先参考“应用程序开发准备”章节。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '访问启动的本地服务器的 URL（`http://localhost:3000`）。 页面将显示`index.html`的内容，并且可以在开发者工具的控制台中看到`index.js:
    loaded`的日志输出。'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '访问启动的本地服务器的 URL（`http://localhost:3000`）。 页面将显示`index.html`的内容，并且可以在开发者工具的控制台中看到`index.js:
    loaded`的日志输出。'
- en: '![Web 控制台中显示的日志](img/c033f8a07de6770d0a4a364a4a65cebe.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Web 控制台中显示的日志](img/c033f8a07de6770d0a4a364a4a65cebe.png)'
- en: '*在开发者工具中查看控制台日志*'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*在开发者工具中查看控制台日志*'
- en: '*要查看通过 Console API 输出的日志，需要打开 Web 浏览器的开发者工具。 大多数浏览器都内置了开发者工具，但本章将使用 Firefox
    进行演示。 打开开发者工具的**控制台**选项卡，可以查看通过 Console API 输出的日志。'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*要查看通过 Console API 输出的日志，需要打开 Web 浏览器的开发者工具。 大多数浏览器都内置了开发者工具，但本章将使用 Firefox
    进行演示。 打开开发者工具的**控制台**选项卡，可以查看通过 Console API 输出的日志。'
- en: 可以通过以下任一方法打开 Firefox 的开发者工具。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下任一方法打开 Firefox 的开发者工具。
- en: Firefox メニュー（メニューバーがある場合や macOS では、ツールメニュー）の "ブラウザーツール"のサブメニューから "ウェブ開発ツール"
    を選択する
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox メニュー（メニューバーがある場合や macOS では、ツールメニュー）の "ブラウザーツール"のサブメニューから "ウェブ開発ツール"
    を選択する
- en: キーボードショートカット`Ctrl+Shift+K`（macOSでは`Command+Option+K`）を押下する
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: キーボードショートカット`Ctrl+Shift+K`（macOSでは`Command+Option+K`）を押下する
- en: 詳細は「[ブラウザーの開発者ツールとは？](https://developer.mozilla.org/ja/docs/Learn/Common_questions/What_are_browser_developer_tools)」を参照してください。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 詳細は「[浏览器开发者工具是什么？](https://developer.mozilla.org/ja/docs/Learn/Common_questions/What_are_browser_developer_tools)」を参照してください。
- en: '*コンソールログが表示されない*'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*控制台日志不显示*'
- en: '*HTMLは表示されるがコンソールログに`index.js: loaded`が表示されない場合は、次のような問題に該当してないかを確認してください。'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTMLは表示されるがコンソールログに`index.js: loaded`が表示されない場合は、次のような問題に該当してないかを確認してください。'
- en: '*[エラー例] `index.js`の読み込みに失敗している*'
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*[错误示例] `index.js`的读取失败*'
- en: '*`script`要素の`src`属性に指定した`index.js`のパスにファイルが存在しているかを確認してください。 `<script type="module"
    src="index.js">`とした場合は`index.html`と`index.js`は同じディレクトリに配置する必要があります。'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*`script`要素の`src`属性に指定した`index.js`のパスにファイルが存在しているかを確認してください。 `<script type="module"
    src="index.js">`とした場合は`index.html`と`index.js`は同じディレクトリに配置する必要があります。'
- en: また、*CORS policy Invalid*のようなエラーがコンソールに表示されている場合は、[Same Origin Policy](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)により`index.js`の読み込みが失敗しています。
    先ほども紹介したように、`file:`からはじまるページ上からはJavaScriptモジュールは正しく動作しません。 そのため、ローカルサーバーを起動し、ローカルサーバー（`http:`からはじまるURL）にアクセスしていることを確認してください。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果控制台显示类似`CORS policy Invalid`的错误，则是因为[同源策略](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)导致`index.js`的读取失败。正如之前所介绍的，从以`file:`开头的页面上无法正确运行
    JavaScript 模块。因此，请启动本地服务器，并确认正在访问以`http:`开头的本地服务器（URL）。
- en: '*[エラー例] JavaScriptモジュールに非対応のブラウザを利用している*'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*[错误示例] 正在使用的浏览器不支持 JavaScript 模块*'
- en: '*JavaScriptモジュールはまだ新しい機能であるため、バージョンが60 以上のFirefoxが必要です。 バージョンが60 未満のFirefoxでは、JavaScript���ジュールである`index.js`が読み込めないためコンソールログは出力されません。'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于 JavaScript 模块是较新的功能，因此需要版本60以上的 Firefox。版本60以下的 Firefox 无法读取作为 JavaScript
    模块的`index.js`，因此不会在控制台输出日志。'
- en: 今回のTodoアプリでは、ネイティブでJavaScriptモジュールに対応しているブラウザが必要です。 [Can I Use](https://caniuse.com/#feat=es6-module)にネイティブでJavaScriptモジュールに対応しているブラウザがまとめられています。
    非対応のブラウザでもBundlerと呼ばれるツールを使うことで対応できますが、本章では省略します。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次 Todo 应用程序中，需要使用支持原生 JavaScript 模块的浏览器。[Can I Use](https://caniuse.com/#feat=es6-module)汇总了支持原生
    JavaScript 模块的浏览器。即使在不支持的浏览器中，也可以使用名为 Bundler 的工具来支持，但本章中省略了这部分内容。
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*モジュールのエントリーポイントの作成*'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*创建模块的入口点*'
- en: '*最後にエントリーポイントとなる`index.js`から別のJavaScriptファイルをモジュールとして読み込んでみましょう。 このアプリではJavaScriptモジュールが複数登場するため`src/`というディレクトリを作り、`src/`の下にJavaScriptモジュールを書くことにします。
    今回は`src/App.js`というファイルを作成し、これを`index.js`からモジュールとして読み込みます。'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，从作为入口点的`index.js`中尝试导入其他 JavaScript 文件作为模块。在这个应用程序中，JavaScript 模块多次出现，因此创建了一个名为`src/`的目录，并在`src/`目录下编写
    JavaScript 模块。这次创建了一个名为`src/App.js`的文件，并将其作为模块从`index.js`中导入。'
- en: 次のようなファイル配置となるように`src/App.js`を作成します。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照`src/App.js`的以下配置创建文件。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`src/App.js`ファイルを作成し、次のような内容のJavaScriptモジュールとします。 `App.js`は`App`というクラスを名前つきエクスポートしているモジュールです。
    また、`App`クラスのコンストラクタにはコンソールログを出力するコードを確認用に書いておきます。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`src/App.js`文件，并编写以下内容的 JavaScript 模块。`App.js`是一个按名称导出`App`类的模块。此外，在`App`类的构造函数中，为了验证，写入输出控制台日志的代码。
- en: src/App.js
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 次に、この`src/App.js`を`index.js`から利用するために`import`します。 `index.js`を次のように書き換え、`App.js`から`App`クラスをインポートしてインスタンス化します。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了从`index.js`中使用`import`，将`src/App.js`导入进来。将`index.js`修改如下，从`App.js`导入`App`类并实例化。
- en: index.js
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 再度ローカルサーバーのURL（`http://localhost:3000`）にブラウザでアクセスし、リロードしてみましょう。 コンソールログには、次のように処理の順番どおりのログが出力されます。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用浏览器访问本地服务器的 URL（`http://localhost:3000`），并重新加载。控制台日志将按以下顺序输出处理过程。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: まず`index.js`から`src/App.js`が名前つきエクスポートしている`App`クラスを名前つきインポートしています。 次に`App`クラスがインスタンス化されていることがログから確認できます。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从`index.js`中按名称导入了名为`App`的类，该类位于`src/App.js`。接着，从日志中可以确认`App`类已被实例化。
- en: これでHTMLとJavaScriptそれぞれのエントリーポイントの作成と動作を確認できました。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，就确认了 HTML 和 JavaScript 各自的入口点创建和运行情况。
- en: '*App.jsの読み込みに失敗する*'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*`App.js`的读取失败*'
- en: '*ここまでのJavaScriptモジュールの読み込みでエラーが発生して動かない場合には、次のことを確認します。'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在此之前的 JavaScript 模块读取过程中出现错误且无法运行，请检查以下事项。'
- en: ディレクトリ構造や`import`文で指定したファイルパスが異なると、ファイルを読み込むことができずにエラーとなってしまいます。 この場合は開発者ツールを開き、コンソールにエラーが出ていないかを確認してみてください。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目录结构或`import`语句中指定的文件路径不同，则无法读取文件并出现错误。在这种情况下，请打开开发者工具，并检查控制台是否有错误输出。
- en: '`import`文を使ったJavaScriptのモジュール読み込み時に起きる典型的なエラーと対処を次にまとめています。'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面总结了使用`import`语句进行 JavaScript 模块读取时可能遇到的典型错误及其处理方法。
- en: '*[エラー例] SyntaxError: import declarations
    may only appear at top level of a module*'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*[错误示例] 语法错误：导入声明只能出现在模块的最顶层*'
- en: '*「`import`宣言はモジュールのトップレベルでしか利用できません」というエラーが出ています。 このエラーが出ているということは、`import`文を使える条件を満たしていないということです。
    つまり、`import`文がトップレベルではないところに書かれている、またはモジュールではない実行コンテキストで実行されているということです。'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*“`import`声明只能在模块的顶层使用”这个错误表明，`import`语句没有满足可使用的条件。换句话说，`import`语句不在顶层，或者是在非模块执行上下文中执行的。'
- en: 関数の中などに`import`宣言していると、`import`宣言がトップレベルではないためエラーが発生します。 この場合は`import`文をトップレベル（プログラムの直下）に移動させてみてください。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在函数中声明了`import`，由于`import`声明不在顶层，因此会引发错误。在这种情况下，请尝试将`import`语句移动到顶层（程序的最底部）。
- en: モジュールではない実行コンテキストで実行されているというのは、裏を返せば実行コンテキストがScriptとなっているということです。 JavaScriptには実行コンテキストとしてScriptとModuleがあります。
    `import`文は実行コンテキストがModuleでないと利用できません。 そのため、`script`要素の`type`属性に`module`指定を忘れていないかをチェックしてみてください。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在非模块执行上下文中执行意味着执行上下文是Script。JavaScript 有两种执行上下文：Script 和 Module。`import`语句只能在执行上下文为
    Module 时使用。因此，请检查`script`元素的`type`属性是否指定了`module`。
- en: 若要将执行上下文作为模块执行，需要指定`type=module`，如`<script type="module" src="index.js">`（由于从`index.js`中的`import`语句引入的`App.js`将继承执行上下文，因此将在模块的执行上下文中处理）。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将执行上下文作为模块执行，需要指定`type=module`，例如`<script type="module" src="index.js">`（由于从`index.js`中的`import`语句引入的`App.js`将继承执行上下文，因此将在模块的执行上下文中处理）。
- en: '*[错误示例] 无法加载模块源 “[`localhost:3000/src/App”`](http://localhost:3000/src/App”)。*'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*[错误示例] 无法加载模块源 "[`localhost:3000/src/App”](http://localhost:3000/src/App”)。*'
- en: '*出现了无法加载`App.js`的错误。仔细查看错误消息，发现`App`而不是`App.js`。'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*出现了无法加载`App.js`的错误。仔细查看错误消息，发现错误在于`App`而不是`App.js`。'
- en: 在`import`语句中，不要省略要加载的文件的扩展名。因此，如果省略了扩展名（`.js`），则会出现此错误。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`import`语句中，不要省略要加载的文件的扩展名。因此，如果省略了扩展名（`.js`），则会出现此错误。
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 应正确编写路径，包括文件扩展名。还要确保指定的路径（`./src/App.js`）中存在文件。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 应正确编写路径，包括文件扩展名。还要确保指定的路径（`./src/App.js`）中存在文件。
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*结论*'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*结论*'
- en: '*在此部分中，我们创建了作为 HTML 入口点的文件，并加载了 JavaScript 模块的入口点 JavaScript 文件。'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*在此部分中，我们创建了作为 HTML 入口点的文件，并加载了 JavaScript 模块的入口点 JavaScript 文件。'
- en: '*此部分的检查清单*'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*此部分的检查清单*'
- en: 创建了名为**`todoapp`**的项目目录。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了名为**`todoapp`**的项目目录。
- en: 创建了入口点`index.html`。
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了入口点`index.html`。
- en: 创建了 JavaScript 的入口点`index.js`，并从`index.html`中加载了它。
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了 JavaScript 的入口点`index.js`，并从`index.html`中加载了它。
- en: 使用本地服务器显示了`index.html`。
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地服务器显示了`index.html`。
- en: '`src/App.js`文件已创建，并确保可以通过`import`语句从`index.js`中进行引用。'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/App.js`文件已创建，并确保可以通过`import`语句从`index.js`中进行引用。'
- en: 到目前为止的 Todo 应用程序可以在以下 URL 中找到。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的 Todo 应用程序可以在以下 URL 中找到。
- en: '[`jsprimer.net/use-case/todoapp/entrypoint/module-entry/`](https://jsprimer.net/use-case/todoapp/entrypoint/module-entry/)*************'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`jsprimer.net/use-case/todoapp/entrypoint/module-entry/`](https://jsprimer.net/use-case/todoapp/entrypoint/module-entry/)*************'
