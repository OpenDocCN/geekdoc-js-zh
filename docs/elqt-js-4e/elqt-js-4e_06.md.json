["```js\nlet total = 0, count = 1;\nwhile (count <= 10) {\n  total += count;\n  count += 1;\n}\nconsole.log(total);\n```", "```js\nconsole.log(sum(range(1, 10)));\n```", "```js\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n```", "```js\nfunction repeatLog(n) {\n  for (let i = 0; i < n; i++) {\n    console.log(i);\n  }\n}\n```", "```js\nfunction repeat(n, action) {\n  for (let i = 0; i < n; i++) {\n    action(i);\n  }\n}\n\nrepeat(3, console.log);\n// → 0\n// → 1\n// → 2\n```", "```js\nlet labels = [];\nrepeat(5, i => {\n  labels.push(`Unit ${i + 1}`);\n});\nconsole.log(labels);\n// → [\"Unit 1\", \"Unit 2\", \"Unit 3\", \"Unit 4\", \"Unit 5\"]\n```", "```js\nfunction greaterThan(n) {\n  return m => m > n;\n}\nlet greaterThan10 = greaterThan(10);\nconsole.log(greaterThan10(11));\n// → true\n```", "```js\nfunction noisy(f) {\n  return (...args) => {\n    console.log(\"calling with\", args);\n    let result = f(...args);\n    console.log(\"called with\", args, \", returned\", result);\n    return result;\n  };\n}\nnoisy(Math.min)(3, 2, 1);\n// → calling with [3, 2, 1]\n// → called with [3, 2, 1] , returned 1\n```", "```js\nfunction unless(test, then) {\n  if (!test) then();\n}\n\nrepeat(3, n => {\n  unless(n % 2 == 1, () => {\n    console.log(n, \"is even\");\n  });\n});\n// → 0 is even\n// → 2 is even\n```", "```js\n[\"A\", \"B\"].forEach(l => console.log(l));\n// → A\n// → B\n```", "```js\n{\n  name: \"Coptic\",\n  ranges: [[994, 1008], [11392, 11508], [11513, 11520]],\n  direction: \"ltr\",\n  year: -200,\n  living: false,\n  link: \"https://en.wikipedia.org/wiki/Coptic_alphabet\"\n}\n```", "```js\nfunction filter(array, test) {\n  let passed = [];\n  for (let element of array) {\n    if (test(element)) {\n      passed.push(element);\n    }\n  }\n  return passed;\n}\n\nconsole.log(filter(SCRIPTS, script => script.living));\n// → [{name: \"Adlam\", ...}, ...]\n```", "```js\nconsole.log(SCRIPTS.filter(s => s.direction == \"ttb\"));\n// → [{name: \"Mongolian\", ...}, ...]\n```", "```js\nfunction map(array, transform) {\n  let mapped = [];\n  for (let element of array) {\n    mapped.push(transform(element));\n }\n  return mapped;\n}\n\nlet rtlScripts = SCRIPTS.filter(s => s.direction == \"rtl\");\nconsole.log(map(rtlScripts, s => s.name));\n// → [\"Adlam\", \"Arabic\", \"Imperial Aramaic\", ...]\n```", "```js\nfunction reduce(array, combine, start) {\n  let current = start;\n  for (let element of array) {\n    current = combine(current, element);\n  }\n  return current;\n}\n\nconsole.log(reduce([1, 2, 3, 4], (a, b) => a + b, 0));\n// → 10\n```", "```js\nconsole.log([1, 2, 3, 4].reduce((a, b) => a + b));\n// → 10\n```", "```js\nfunction characterCount(script) {\n  return script.ranges.reduce((count, [from, to]) => {\n return count + (to - from);\n  }, 0);\n}\n\nconsole.log(SCRIPTS.reduce((a, b) => {\n  return characterCount(a) < characterCount(b) ? b : a;\n}));\n// → {name: \"Han\", ...}\n```", "```js\nlet biggest = null;\nfor (let script of SCRIPTS) {\n  if (biggest == null ||\n      characterCount(biggest) < characterCount(script)) {\n    biggest = script;\n  }\n}\nconsole.log(biggest);\n// → {name: \"Han\", ...}\n```", "```js\nfunction average(array) {\n  return array.reduce((a, b) => a + b) / array.length;\n}\n\nconsole.log(Math.round(average(\n  SCRIPTS.filter(s => s.living).map(s => s.year))));\n// → 1165\nconsole.log(Math.round(average(\n  SCRIPTS.filter(s => !s.living).map(s => s.year))));\n// → 204\n```", "```js\nlet total = 0, count = 0;\nfor (let script of SCRIPTS) {\n  if (script.living) {\n    total += script.year;\n    count += 1;\n  }\n}\nconsole.log(Math.round(total / count));\n// → 1165\n```", "```js\nfunction characterScript(code) {\n  for (let script of SCRIPTS) {\n    if (script.ranges.some(([from, to]) => {\n      return code >= from && code < to;\n    })) {\n      return script;\n    }\n  }\n  return null;\n}\n\nconsole.log(characterScript(121));\n// → {name: \"Latin\", ...}\n```", "```js\n// Two emoji characters, horse and shoe\nlet horseShoe = \"\";\nconsole.log(horseShoe.length);\n// → 4\nconsole.log(horseShoe[0]);\n// → (Invalid half-character)\nconsole.log(horseShoe.charCodeAt(0));\n// → 55357 (Code of the half-character)\nconsole.log(horseShoe.codePointAt(0));\n// → 128052 (Actual code for horse emoji)\n```", "```js\nlet roseDragon = \"\";\nfor (let char of roseDragon) {\n  console.log(char);\n}\n// → \n// → \n```", "```js\nfunction countBy(items, groupName) {\n  let counts = [];\n  for (let item of items) {\n    let name = groupName(item);\n    let known = counts.find(c => c.name == name);\n    if (!known) {\n      counts.push({name, count: 1});\n    } else {\n      known.count++;\n    }\n  }\n  return counts;\n}\n\nconsole.log(countBy([1, 2, 3, 4, 5], n => n > 2));\n// → [{name: false, count: 2}, {name: true, count: 3}]\n```", "```js\nfunction textScripts(text) {\n  let scripts = countBy(text, char => {\n    let script = characterScript(char.codePointAt(0));\n return script ? script.name : \"none\";\n  }).filter(({name}) => name != \"none\");\n\n  let total = scripts.reduce((n, {count}) => n + count, 0);\n  if (total == 0) return \"No scripts found\";\n\n  return scripts.map(({name, count}) => {\n    return `${Math.round(count * 100 / total)}% ${name}`;\n  }).join(\", \");\n}\n\nconsole.log(textScripts('英国的狗说\"woof\", 俄罗斯的狗说\"тяв\"'));\n// → 61% Han, 22% Latin, 17% Cyrillic\n```"]