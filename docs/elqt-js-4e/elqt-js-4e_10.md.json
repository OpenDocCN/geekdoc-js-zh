["```js\nlet re1 = new RegExp(\"abc\");\nlet re2 = /abc/;\n```", "```js\nlet aPlus = /A\\+/;\n```", "```js\nconsole.log(/abc/.test(\"abcde\"));\n// → true\nconsole.log(/abc/.test(\"abxde\"));\n// → false\n```", "```js\nconsole.log(/[0123456789]/.test(\"in 1992\"));\n// → true\nconsole.log(/[0-9]/.test(\"in 1992\"));\n// → true\n```", "```js\nlet dateTime = /\\d\\d-\\d\\d-\\d\\d\\d\\d \\d\\d:\\d\\d/;\nconsole.log(dateTime.test(\"01-30-2003 15:20\"));\n// → true\nconsole.log(dateTime.test(\"30-jan-2003 15:20\"));\n// → false\n```", "```js\nlet nonBinary = /[⁰¹]/;\nconsole.log(nonBinary.test(\"1100100010100110\"));\n// → false\nconsole.log(nonBinary.test(\"0111010112101001\"));\n// → true\n```", "```js\nconsole.log(/\\p{L}/u.test(\"α\"));\n// → true\nconsole.log(/\\p{L}/u.test(\"!\"));\n// → false\nconsole.log(/\\p{Script=Greek}/u.test(\"α\"));\n// → true\nconsole.log(/\\p{Script=Arabic}/u.test(\"α\"));\n// → false\n```", "```js\nconsole.log(/'\\d+'/.test(\"'123'\"));\n// → true\nconsole.log(/'\\d+'/.test(\"''\"));\n// → false\nconsole.log(/'\\d*'/.test(\"'123'\"));\n// → true\nconsole.log(/'\\d*'/.test(\"''\"));\n// → true\n```", "```js\nlet neighbor = /neighbou?r/;\nconsole.log(neighbor.test(\"neighbour\"));\n// → true\nconsole.log(neighbor.test(\"neighbor\"));\n// → true\n```", "```js\nlet dateTime = /\\d{1,2}-\\d{1,2}-\\d{4} \\d{1,2}:\\d{2}/;\nconsole.log(dateTime.test(\"1-30-2003 8:45\"));\n// → true\n```", "```js\nlet cartoonCrying = /boo+(hoo+)+/i;\nconsole.log(cartoonCrying.test(\"Boohoooohoohooo\"));\n// → true\n```", "```js\nlet match = /\\d+/.exec(\"one two 100\");\nconsole.log(match);\n// → [\"100\"]\nconsole.log(match.index);\n// → 8\n```", "```js\nconsole.log(\"one two 100\".match(/\\d+/));\n// → [\"100\"]\n```", "```js\nlet quotedText = /'([^']*)'/;\nconsole.log(quotedText.exec(\"she said 'hello'\"));\n// → [\"'hello'\", \"hello\"]\n```", "```js\nconsole.log(/bad(ly)?/.exec(\"bad\"));\n// → [\"bad\", undefined]\nconsole.log(/(\\d)+/.exec(\"123\"));\n// → [\"123\", \"3\"]\n```", "```js\nconsole.log(/(?:na)+/.exec(\"banana\"));\n// → [\"nana\"]\n```", "```js\nconsole.log(new Date());\n// → Fri Feb 02 2024 18:03:06 GMT+0100 (CET)\n```", "```js\nconsole.log(new Date(2009, 11, 9));\n// → Wed Dec 09 2009 00:00:00 GMT+0100 (CET)\nconsole.log(new Date(2009, 11, 9, 12, 59, 59, 999));\n// → Wed Dec 09 2009 12:59:59 GMT+0100 (CET)\n```", "```js\nconsole.log(new Date(2013, 11, 19).getTime());\n// → 1387407600000\nconsole.log(new Date(1387407600000));\n// → Thu Dec 19 2013 00:00:00 GMT+0100 (CET)\n```", "```js\nfunction getDate(string) {\n  let [_, month, day, year] =\n    /(\\d{1,2})-(\\d{1,2})-(\\d{4})/.exec(string);\n  return new Date(year, month - 1, day);\n}\nconsole.log(getDate(\"1-30-2003\"));\n// → Thu Jan 30 2003 00:00:00 GMT+0100 (CET)\n```", "```js\nconsole.log(/a(?=e)/.exec(\"braeburn\"));\n// → [\"a\"]\nconsole.log(/a(?! )/.exec(\"a b\"));\n// → null\n```", "```js\nlet animalCount = /\\d+ (pig|cow|chicken)s?/;\nconsole.log(animalCount.test(\"15 pigs\"));\n// → true\nconsole.log(animalCount.test(\"15 pugs\"));\n// → false\n```", "```js\nconsole.log(\"papa\".replace(\"p\", \"m\"));\n// → mapa\n```", "```js\nconsole.log(\"Borobudur\".replace(/[ou]/, \"a\"));\n// → Barobudur\nconsole.log(\"Borobudur\".replace(/[ou]/g, \"a\"));\n// → Barabadar\n```", "```js\nconsole.log(\n  \"Liskov, Barbara\\nMcCarthy, John\\nMilner, Robin\"\n    .replace(/(\\p{L}+), (\\p{L}+)/gu, \"$2 $1\"));\n// → Barbara Liskov\n//    John McCarthy\n//    Robin Milner\n```", "```js\nlet stock = \"1 lemon, 2 cabbages, and 101 eggs\";\nfunction minusOne(match, amount, unit) {\n  amount = Number(amount) - 1;\n  if (amount == 1) { // Only one left, remove the 's'\n    unit = unit.slice(0, unit.length - 1);\n  } else if (amount == 0) {\n    amount = \"no\";\n  }\n  return amount + \" \" + unit;\n}\nconsole.log(stock.replace(/(\\d+) (\\p{L}+)/gu, minusOne));\n// → no lemon, 1 cabbage, and 100 eggs\n```", "```js\nfunction stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*\\*\\//g, \"\");\n}\nconsole.log(stripComments(\"1 + /* 2 */3\"));\n// → 1 + 3\nconsole.log(stripComments(\"x = 10;// ten!\"));\n// → x = 10;\nconsole.log(stripComments(\"1 /* a */+/* b */ 1\"));\n// → 1  1\n```", "```js\nfunction stripComments(code) {\n  return code.replace(/\\/\\/.*|\\/\\*[^]*?\\*\\//g, \"\");\n}\nconsole.log(stripComments(\"1 /* a */+/* b */ 1\"));\n// → 1 + 1\n```", "```js\nlet name = \"harry\";\nlet regexp = new RegExp(\"(^|\\\\s)\" + name + \"($|\\\\s)\", \"gi\");\nconsole.log(regexp.test(\"Harry is a dodgy character.\"));\n// → true\n```", "```js\nlet name = \"dea+hl[]rd\";\nlet escaped = name.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\nlet regexp = new RegExp(\"(^|\\\\s)\" + escaped + \"($|\\\\s)\", \"gi\");\nlet text = \"This dea+hl[]rd guy is super annoying.\";\nconsole.log(regexp.test(text));\n// → true\n```", "```js\nconsole.log(\"  word\".search(/\\S/));\n// → 2\nconsole.log(\"    \".search(/\\S/));\n// → -1\n```", "```js\nlet pattern = /y/g;\npattern.lastIndex = 3;\nlet match = pattern.exec(\"xyzzy\");\nconsole.log(match.index);\n// → 4\nconsole.log(pattern.lastIndex);\n// → 5\n```", "```js\nlet global = /abc/g;\nconsole.log(global.exec(\"xyz abc\"));\n// → [\"abc\"]\nlet sticky = /abc/y;\nconsole.log(sticky.exec(\"xyz abc\"));\n// → null\n```", "```js\nlet digit = /\\d/g;\nconsole.log(digit.exec(\"here it is: 1\"));\n// → [\"1\"]\nconsole.log(digit.exec(\"and now: 1\"));\n// → null\n```", "```js\nconsole.log(\"Banana\".match(/an/g));\n// → [\"an\", \"an\"]\n```", "```js\nlet input = \"A string with 3 numbers in it... 42 and 88.\";\nlet matches = input.matchAll(/\\d+/g);\nfor (let match of matches) {\n  console.log(\"Found\", match[0], \"at\", match.index);\n}\n// → Found 3 at 14\n//    Found 42 at 33\n//    Found 88 at 40\n```", "```js\nsearchengine=https://duckduckgo.com/?q=$1\nspitefulness=9.7\n; Comments are preceded by a semicolon...\n; Each section concerns an individual enemy\n[larry]\nfullname=Larry Doe\ntype=kindergarten bully\nwebsite=http://www.geocities.com/CapeCanaveral/11451\n\n[davaeorn]\nfullname=Davaeorn\ntype=evil wizard\noutputdir=/home/marijn/enemies/davaeorn\n```", "```js\nfunction parseINI(string) {\n  // Start with an object to hold the top-level fields\n  let result = {};\n  let section = result;\n  for (let line of string.split(/\\r?\\n/)) {\n    let match;\n    if (match = line.match(/^(\\w+)=(.*)$/)) {\n      section[match[1]] = match[2];\n    } else if (match = line.match(/^\\[(.*)\\]$/)) {\n      section = result[match[1]] = {};\n    } else if (!/^\\s*(;|$)/.test(line)) {\n      throw new Error(\"Line '\" + line + \"' is not valid.\");\n    }\n  };\n  return result;\n}\n\nconsole.log(parseINI(`\nname=Vasilis\n[address]\ncity=Tessaloniki`));\n// → {name: \"Vasilis\", address: {city: \"Tessaloniki\"}}\n```", "```js\nconsole.log(/{3}/.test(\"\"));\n// → false\nconsole.log(/<.>/.test(\"<>\"));\n// → false\nconsole.log(/<.>/u.test(\"<>\"));\n// → true\n```", "```js\nconsole.log(/{3}/u.test(\"\"));\n// → true\n```"]