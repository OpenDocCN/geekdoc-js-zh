["```js\nconst roads = [\n  \"Alice's House-Bob's House\",   \"Alice's House-Cabin\",\n  \"Alice's House-Post Office\",   \"Bob's House-Town Hall\",\n  \"Daria's House-Ernie's House\", \"Daria's House-Town Hall\",\n  \"Ernie's House-Grete's House\", \"Grete's House-Farm\",\n  \"Grete's House-Shop\",          \"Marketplace-Farm\",\n  \"Marketplace-Post Office\",     \"Marketplace-Shop\",\n  \"Marketplace-Town Hall\",       \"Shop-Town Hall\"\n];\n```", "```js\nfunction buildGraph(edges) {\n  let graph = Object.create(null);\n  function addEdge(from, to) {\n    if (from in graph) {\n      graph[from].push(to);\n    } else {\n      graph[from] = [to];\n    }\n  }\n  for (let [from, to] of edges.map(r => r.split(\"-\"))) {\n    addEdge(from, to);\n    addEdge(to, from);\n  }\n  return graph;\n}\n\nconst roadGraph = buildGraph(roads);\n```", "```js\nclass VillageState {\n  constructor(place, parcels) {\n    this.place = place;\n    this.parcels = parcels;\n  }\n\n  move(destination) {\n    if (!roadGraph[this.place].includes(destination)) {\n      return this;\n    } else {\n      let parcels = this.parcels.map(p => {\n        if (p.place != this.place) return p;\n        return {place: destination, address: p.address};\n      }).filter(p => p.place != p.address);\n      return new VillageState(destination, parcels);\n    }\n }\n}\n```", "```js\nlet first = new VillageState(\n  \"Post Office\",\n  [{place: \"Post Office\", address: \"Alice's House\"}]\n);\nlet next = first.move(\"Alice's House\");\n\nconsole.log(next.place);\n// → Alice's House\nconsole.log(next.parcels);\n// → []\nconsole.log(first.place);\n// → Post Office\n```", "```js\nlet object = Object.freeze({value: 5});\nobject.value = 10;\nconsole.log(object.value);\n// → 5\n```", "```js\nfunction runRobot(state, robot, memory) {\n  for (let turn = 0;; turn++) {\n    if (state.parcels.length == 0) {\n      console.log(`Done in ${turn} turns`);\n      break;\n    }\n    let action = robot(state, memory);\n    state = state.move(action.direction);\n    memory = action.memory;\n    console.log(`Moved to ${action.direction}`);\n  }\n}\n```", "```js\nfunction randomPick(array) {\n  let choice = Math.floor(Math.random() * array.length);\n  return array[choice];\n}\n\nfunction randomRobot(state) {\n  return {direction: randomPick(roadGraph[state.place])};\n}\n```", "```js\nVillageState.random = function(parcelCount = 5) {\n  let parcels = [];\n  for (let i = 0; i < parcelCount; i++) {\n    let address = randomPick(Object.keys(roadGraph));\n    let place;\n    do {\n      place = randomPick(Object.keys(roadGraph));\n    } while (place == address);\n    parcels.push({place, address});\n  }\n  return new VillageState(\"Post Office\", parcels);\n};\n```", "```js\nrunRobot(VillageState.random(), randomRobot);\n// → Moved to Marketplace\n// → Moved to Town Hall\n// → ...\n// → Done in 63 turns\n```", "```js\nconst mailRoute = [\n  \"Alice's House\", \"Cabin\", \"Alice's House\", \"Bob's House\",\n  \"Town Hall\", \"Daria's House\", \"Ernie's House\",\n  \"Grete's House\", \"Shop\", \"Grete's House\", \"Farm\",\n  \"Marketplace\", \"Post Office\"\n];\n```", "```js\nfunction routeRobot(state, memory) {\n  if (memory.length == 0) {\n    memory = mailRoute;\n  }\n  return {direction: memory[0], memory: memory.slice(1)};\n}\n```", "```js\nfunction findRoute(graph, from, to) {\n  let work = [{at: from, route: []}];\n  for (let i = 0; i < work.length; i++) {\n    let {at, route} = work[i];\n    for (let place of graph[at]) {\n      if (place == to) return route.concat(place);\n      if (!work.some(w => w.at == place)) {\n        work.push({at: place, route: route.concat(place)});\n      }\n    }\n  }\n}\n```", "```js\nfunction goalOrientedRobot({place, parcels}, route) {\n  if (route.length == 0) {\n    let parcel = parcels[0];\n    if (parcel.place != place) {\n      route = findRoute(roadGraph, place, parcel.place);\n    } else {\n      route = findRoute(roadGraph, place, parcel.address);\n    }\n  }\n  return {direction: route[0], memory: route.slice(1)};\n}\n```"]