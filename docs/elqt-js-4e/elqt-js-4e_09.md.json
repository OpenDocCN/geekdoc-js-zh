["```js\nfunction canYouSpotTheProblem() {\n  \"use strict\";\n  for (counter = 0; counter < 10; counter++) {\n    console.log(\"Happy happy\");\n  }\n}\n\ncanYouSpotTheProblem();\n// → ReferenceError: counter is not defined\n```", "```js\nfunction Person(name) { this.name = name; }\nlet ferdinand = Person(\"Ferdinand\"); // Oops\nconsole.log(name);\n// → Ferdinand\n```", "```js\n\"use strict\";\nfunction Person(name) { this.name = name; }\nlet ferdinand = Person(\"Ferdinand\"); // Forgot new\n// → TypeError: Cannot set property 'name' of undefined\n```", "```js\n// (graph: Object, from: string, to: string) => string[]\nfunction findRoute(graph, from, to) {\n  // ...\n}\n```", "```js\nfunction test(label, body) {\n  if (!body()) console.log(`Failed: ${label}`);\n}\n\ntest(\"convert Latin text to uppercase\", () => {\n  return \"hello\".toUpperCase() == \"HELLO\";\n});\ntest(\"convert Greek text to uppercase\", () => {\n  return \"Χαίρετε\".toUpperCase() == \"ΧΑΙΡΕΤΕ\";\n});\ntest(\"don't convert case-less characters\", () => {\n  return \"مرحبا\".toUpperCase() == \"مرحبا\";\n});\n```", "```js\nfunction numberToString(n, base = 10) {\n  let result = \"\", sign = \"\";\n  if (n < 0) {\n    sign = \"-\";\n    n = -n;\n  }\n  do {\n    result = String(n % base) + result;\n    n /= base;\n  } while (n > 0);\n  return sign + result;\n}\nconsole.log(numberToString(13, 10));\n// → 1.5e-3231.3e-3221.3e-3211.3e-3201.3e-3191.3e-3181.3...\n```", "```js\n13\n1.3\n0.13\n0.013\n...\n1.5e-323\n```", "```js\nfunction promptNumber(question) {\n  let result = Number(prompt(question));\n  if (Number.isNaN(result)) return null;\n  else return result;\n}\n\nconsole.log(promptNumber(\"How many trees do you see?\"));\n```", "```js\nfunction lastElement(array) {\n  if (array.length == 0) {\n    return {failed: true};\n  } else {\n    return {value: array[array.length - 1]};\n  }\n}\n```", "```js\nfunction promptDirection(question) {\n  let result = prompt(question);\n  if (result.toLowerCase() == \"left\") return \"L\";\n  if (result.toLowerCase() == \"right\") return \"R\";\n  throw new Error(\"Invalid direction: \" + result);\n}\n\nfunction look() {\n  if (promptDirection(\"Which way?\") == \"L\") {\n    return \"a house\";\n  } else {\n    return \"two angry bears\";\n  }\n}\n\ntry {\n  console.log(\"You see\", look());\n} catch (error) {\n  console.log(\"Something went wrong: \" + error);\n}\n```", "```js\nconst accounts = {\n  a: 100,\n b: 0,\n  c: 20\n};\n\nfunction getAccount() {\n  let accountName = prompt(\"Enter an account name\");\n  if (!Object.hasOwn(accounts, accountName)) {\n    throw new Error(`No such account: ${accountName}`);\n  }\n  return accountName;\n}\n\nfunction transfer(from, amount) {\n  if (accounts[from] < amount) return;\n  accounts[from] -= amount;\n  accounts[getAccount()] += amount;\n}\n```", "```js\nfunction transfer(from, amount) {\n  if (accounts[from] < amount) return;\n  let progress = 0;\n  try {\n    accounts[from] -= amount;\n    progress = 1;\n    accounts[getAccount()] += amount;\n    progress = 2;\n  } finally {\n    if (progress == 1) {\n accounts[from] += amount;\n    }\n  }\n}\n```", "```js\nfor (;;) {\n  try {\n    let dir = promtDirection(\"Where?\"); // ← Typo!\n    console.log(\"You chose \", dir);\n    break;\n  } catch (e) {\n    console.log(\"Not a valid direction. Try again.\");\n  }\n}\n```", "```js\nclass InputError extends Error {}\n\nfunction promptDirection(question) {\n  let result = prompt(question);\n  if (result.toLowerCase() == \"left\") return \"L\";\n  if (result.toLowerCase() == \"right\") return \"R\";\n  throw new InputError(\"Invalid direction: \" + result);\n}\n```", "```js\nfor (;;) {\n  try {\n    let dir = promptDirection(\"Where?\");\n    console.log(\"You chose \", dir);\n    break;\n  } catch (e) {\n    if (e instanceof InputError) {\n      console.log(\"Not a valid direction. Try again.\");\n    } else {\n      throw e;\n    }\n  }\n}\n```", "```js\nfunction firstElement(array) {\n  if (array.length == 0) {\n    throw new Error(\"firstElement called with []\");\n  }\n  return array[0];\n}\n```", "```js\nconst box = new class {\n  locked = true;\n  #content = [];\n\n  unlock() { this.locked = false; }\n  lock() { this.locked = true; }\n  get content() {\n    if (this.locked) throw new Error(\"Locked!\");\n    return this.#content;\n  }\n};\n```"]