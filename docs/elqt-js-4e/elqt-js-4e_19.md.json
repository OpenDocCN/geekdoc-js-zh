["```js\n<p>Normal HTML here.</p>\n<svg >\n  <circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"red\"/>\n  <rect x=\"120\" y=\"5\" width=\"90\" height=\"90\"\n        stroke=\"blue\" fill=\"none\"/>\n</svg>\n```", "```js\nlet circle = document.querySelector(\"circle\");\ncircle.setAttribute(\"fill\", \"cyan\");\n```", "```js\n<p>Before canvas.</p>\n<canvas width=\"120\" height=\"60\"></canvas>\n<p>After canvas.</p>\n<script>\n  let canvas = document.querySelector(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n  context.fillStyle = \"red\";\n  context.fillRect(10, 10, 100, 50);\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.strokeStyle = \"blue\";\n  cx.strokeRect(5, 5, 50, 50);\n  cx.lineWidth = 5;\n  cx.strokeRect(135, 5, 50, 50);\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  for (let y = 10; y < 100; y += 10) {\n    cx.moveTo(10, y);\n    cx.lineTo(90, y);\n  }\n  cx.stroke();\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(50, 10);\n  cx.lineTo(10, 70);\n  cx.lineTo(90, 70);\n  cx.fill();\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(10, 90);\n  // control=(60,10) goal=(90,90)\n  cx.quadraticCurveTo(60, 10, 90, 90);\n  cx.lineTo(60, 10);\n  cx.closePath();\n  cx.stroke();\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  cx.moveTo(10, 90);\n  // control1=(10,10) control2=(90,10) goal=(50,90)\n  cx.bezierCurveTo(10, 10, 90, 10, 50, 90);\n  cx.lineTo(90, 10);\n  cx.lineTo(10, 10);\n  cx.closePath();\n  cx.stroke();\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.beginPath();\n  // center=(50,50) radius=40 angle=0 to 7\n  cx.arc(50, 50, 40, 0, 7);\n  // center=(150,50) radius=40 angle=0 to 1/2 pi\n  cx.arc(150, 50, 40, 0, 0.5 * Math.PI);\n  cx.stroke();\n</script>\n```", "```js\nconst results = [\n  {name: \"Satisfied\", count: 1043, color: \"lightblue\"},\n  {name: \"Neutral\", count: 563, color: \"lightgreen\"},\n  {name: \"Unsatisfied\", count: 510, color: \"pink\"},\n  {name: \"No comment\", count: 175, color: \"silver\"}\n];\n```", "```js\n<canvas width=\"200\" height=\"200\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let total = results.reduce((sum, {count}) => sum + count, 0);\n  // Start at the top\n  let currentAngle = -0.5 * Math.PI;\n  for (let result of results) {\n    let sliceAngle = (result.count / total) * 2 * Math.PI;\n    cx.beginPath();\n    // center=100,100, radius=100\n    // From current angle, clockwise by slice's angle\n    cx.arc(100, 100, 100,\n           currentAngle, currentAngle + sliceAngle);\n    currentAngle += sliceAngle;\n    cx.lineTo(100, 100);\n    cx.fillStyle = result.color;\n    cx.fill();\n  }\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.font = \"28px Georgia\";\n  cx.fillStyle = \"fuchsia\";\n  cx.fillText(\"I can draw text, too!\", 10, 50);\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/hat.png\";\n img.addEventListener(\"load\", () => {\n    for (let x = 10; x < 200; x += 30) {\n      cx.drawImage(img, x, 10);\n    }\n  });\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/player.png\";\n  let spriteW = 24, spriteH = 30;\n  img.addEventListener(\"load\", () => {\n    let cycle = 0;\n    setInterval(() => {\n      cx.clearRect(0, 0, spriteW, spriteH);\n      cx.drawImage(img,\n                   // Source rectangle\n                   cycle * spriteW, 0, spriteW, spriteH,\n                   // Destination rectangle\n                   0,               0, spriteW, spriteH);\n      cycle = (cycle + 1) % 8;\n    }, 120);\n });\n</script>\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  cx.scale(3, .5);\n  cx.beginPath();\n  cx.arc(50, 50, 40, 0, 7);\n  cx.lineWidth = 3;\n  cx.stroke();\n</script>\n```", "```js\nfunction flipHorizontally(context, around) {\n  context.translate(around, 0);\n  context.scale(-1, 1);\n  context.translate(-around, 0);\n}\n```", "```js\n<canvas></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  let img = document.createElement(\"img\");\n  img.src = \"img/player.png\";\n  let spriteW = 24, spriteH = 30;\n  img.addEventListener(\"load\", () => {\n    flipHorizontally(cx, 100 + spriteW / 2);\n    cx.drawImage(img, 0, 0, spriteW, spriteH,\n                 100, 0, spriteW, spriteH);\n  });\n</script>\n```", "```js\n<canvas width=\"600\" height=\"300\"></canvas>\n<script>\n  let cx = document.querySelector(\"canvas\").getContext(\"2d\");\n  function branch(length, angle, scale) {\n    cx.fillRect(0, 0, 1, length);\n    if (length < 8) return;\n    cx.save();\n    cx.translate(0, length);\n    cx.rotate(-angle);\n    branch(length * scale, angle, scale);\n    cx.rotate(2 * angle);\n    branch(length * scale, angle, scale);\n    cx.restore();\n  }\n  cx.translate(300, 0);\n  branch(60, 0.5, 0.8);\n</script>\n```", "```js\nclass CanvasDisplay {\n  constructor(parent, level) {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = Math.min(600, level.width * scale);\n    this.canvas.height = Math.min(450, level.height * scale);\n    parent.appendChild(this.canvas);\n    this.cx = this.canvas.getContext(\"2d\");\n\n    this.flipPlayer = false;\n\n    this.viewport = {\n      left: 0,\n      top: 0,\n      width: this.canvas.width / scale,\n      height: this.canvas.height / scale\n    };\n  }\n\n  clear() {\n    this.canvas.remove();\n  }\n}\n```", "```js\nCanvasDisplay.prototype.syncState = function(state) {\n  this.updateViewport(state);\n  this.clearDisplay(state.status);\n  this.drawBackground(state.level);\n  this.drawActors(state.actors);\n};\n```", "```js\nCanvasDisplay.prototype.updateViewport = function(state) {\n  let view = this.viewport, margin = view.width / 3;\n  let player = state.player;\n  let center = player.pos.plus(player.size.times(0.5));\n\n  if (center.x < view.left + margin) {\n    view.left = Math.max(center.x - margin, 0);\n  } else if (center.x > view.left + view.width - margin) {\n    view.left = Math.min(center.x + margin - view.width,\n                         state.level.width - view.width);\n  }\n  if (center.y < view.top + margin) {\n    view.top = Math.max(center.y - margin, 0);\n  } else if (center.y > view.top + view.height - margin) {\n    view.top = Math.min(center.y + margin - view.height,\n                        state.level.height - view.height);\n  }\n};\n```", "```js\nCanvasDisplay.prototype.clearDisplay = function(status) {\n  if (status == \"won\") {\n    this.cx.fillStyle = \"rgb(68, 191, 255)\";\n  } else if (status == \"lost\") {\n    this.cx.fillStyle = \"rgb(44, 136, 214)\";\n  } else {\n    this.cx.fillStyle = \"rgb(52, 166, 251)\";\n  }\n  this.cx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n};\n```", "```js\nlet otherSprites = document.createElement(\"img\");\notherSprites.src = \"img/sprites.png\";\n\nCanvasDisplay.prototype.drawBackground = function(level) {\n  let {left, top, width, height} = this.viewport;\n  let xStart = Math.floor(left);\n  let xEnd = Math.ceil(left + width);\n let yStart = Math.floor(top);\n  let yEnd = Math.ceil(top + height);\n\n  for (let y = yStart; y < yEnd; y++) {\n    for (let x = xStart; x < xEnd; x++) {\n      let tile = level.rows[y][x];\n      if (tile == \"empty\") continue;\n      let screenX = (x - left) * scale;\n      let screenY = (y - top) * scale;\n      let tileX = tile == \"lava\" ? scale : 0;\n      this.cx.drawImage(otherSprites,\n                        tileX,         0, scale, scale,\n                        screenX, screenY, scale, scale);\n    }\n  }\n};\n```", "```js\nlet playerSprites = document.createElement(\"img\");\nplayerSprites.src = \"img/player.png\";\nconst playerXOverlap = 4;\n\nCanvasDisplay.prototype.drawPlayer = function(player, x, y, width, height) {\n  width += playerXOverlap * 2;\n  x -= playerXOverlap;\n  if (player.speed.x != 0) {\n    this.flipPlayer = player.speed.x < 0;\n  }\n\n  let tile = 8;\n  if (player.speed.y != 0) {\n    tile = 9;\n  } else if (player.speed.x != 0) {\n    tile = Math.floor(Date.now() / 60) % 8;\n  }\n\n  this.cx.save();\n  if (this.flipPlayer) {\n    flipHorizontally(this.cx, x + width / 2);\n  }\n  let tileX = tile * width;\n  this.cx.drawImage(playerSprites, tileX, 0, width, height,\n                                   x,     y, width, height);\n  this.cx.restore();\n};\n```", "```js\nCanvasDisplay.prototype.drawActors = function(actors) {\n  for (let actor of actors) {\n    let width = actor.size.x * scale;\n    let height = actor.size.y * scale;\n    let x = (actor.pos.x - this.viewport.left) * scale;\n    let y = (actor.pos.y - this.viewport.top) * scale;\n    if (actor.type == \"player\") {\n      this.drawPlayer(actor, x, y, width, height);\n    } else {\n      let tileX = (actor.type == \"coin\" ? 2 : 1) * scale;\n      this.cx.drawImage(otherSprites,\n                        tileX, 0, width, height,\n                        x,     y, width, height);\n    }\n  }\n};\n```"]