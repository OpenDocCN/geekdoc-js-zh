- en: '22'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '22'
- en: JAVASCRIPT AND PERFORMANCE
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAVASCRIPT 和性能
- en: Running a computer program on a machine requires bridging the gap between the
    programming language and the machine’s own instruction format. This can be done
    by writing a program that *interprets* other programs, as we did in [Chapter 11](ch11.xhtml#ch11),
    but it’s usually done by *compiling* (translating) the program to machine code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器上运行计算机程序需要弥合编程语言与机器自身指令格式之间的差距。这可以通过编写一个*解释*其他程序的程序来实现，正如我们在[第11章](ch11.xhtml#ch11)中所做的，但通常是通过将程序*编译*（翻译）为机器代码来完成。
- en: Some languages, such as the C and Rust programming languages, are designed to
    express roughly those things that the machine is good at. This makes them easy
    to compile efficiently. JavaScript is designed in a very different way, focusing
    on simplicity and ease of use. Almost none of the operations it lets you express
    correspond directly to features of the machine. That makes JavaScript a lot more
    difficult to compile.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言，如 C 和 Rust 编程语言，旨在表达机器擅长的那些东西。这使得它们易于高效编译。JavaScript 的设计方式则截然不同，注重简单性和易用性。几乎没有它允许你表达的操作与机器的特性直接对应。这使得
    JavaScript 的编译变得更加困难。
- en: Yet somehow modern JavaScript *engines* (the programs that compile and run JavaScript)
    do manage to execute programs at an impressive speed. It is possible to write
    JavaScript programs that are only a few times slower than an equivalent C or Rust
    program. That may still sound like a big gap, but older JavaScript engines (as
    well as contemporary implementations of languages with a similar design, such
    as Python and Ruby) tend to be closer to 100 times slower than C. Compared to
    these languages, modern JavaScript is strikingly fast—so fast that you’ll rarely
    be forced to switch to another language because of performance problems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现代 JavaScript *引擎*（编译和运行 JavaScript 的程序）确实能够以令人印象深刻的速度执行程序。可以编写的 JavaScript
    程序，其速度仅比等效的 C 或 Rust 程序慢几倍。尽管这听起来差距很大，但较旧的 JavaScript 引擎（以及类似设计的语言的当代实现，如 Python
    和 Ruby）往往比 C 慢接近 100 倍。与这些语言相比，现代 JavaScript 的速度令人瞩目——如此之快，以至于你很少会因为性能问题而被迫切换到另一种语言。
- en: Still, you may need to adjust your code to avoid the slower aspects of the language.
    As an example of that process, this chapter works through a speed-hungry program
    and makes it faster. In the process, we’ll discuss the way JavaScript engines
    compile your programs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，你可能需要调整代码以避免语言中较慢的方面。作为这一过程的例子，本章将通过一个对速度要求高的程序来使其更快。在这个过程中，我们将讨论 JavaScript
    引擎如何编译你的程序。
- en: Staged Compilation
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分阶段编译
- en: First, you must understand that JavaScript compilers do not simply compile a
    program once, the way classical compilers do. Instead, code is compiled and recompiled
    as needed while the program is running.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须理解 JavaScript 编译器并不只是像经典编译器那样一次性编译一个程序。相反，代码在程序运行时根据需要编译和重新编译。
- en: With most languages, compiling a big program takes a while. That’s usually acceptable,
    because programs are compiled ahead of time and distributed in compiled form.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数语言，编译大型程序需要一段时间。这通常是可以接受的，因为程序是提前编译并以编译形式分发的。
- en: For JavaScript, the situation is different. A website might include a large
    amount of code that is retrieved in text form and must be compiled every time
    the website is opened. If that process took five minutes, the user wouldn’t be
    happy. A JavaScript compiler must be able to start running a program—even a big
    program—almost instantaneously.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript，情况有所不同。一个网站可能包含大量以文本形式检索的代码，每次打开网站时都必须编译。如果这个过程花费五分钟，用户肯定不会满意。JavaScript
    编译器必须能够几乎瞬间开始运行程序——即使是大型程序。
- en: To do this, these compilers have multiple compilation strategies. When a website
    is first opened, the scripts are first compiled in a cheap, superficial way. This
    doesn’t result in very fast execution, but it allows the script to start quickly.
    Functions may not be compiled at all until the first time they are called.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，这些编译器具有多种编译策略。当网站首次打开时，脚本首先以一种廉价、表面的方式编译。这并不会导致非常快的执行，但允许脚本快速启动。函数可能在第一次被调用之前根本不会被编译。
- en: In a typical program, most code is run only a handful of times (or not at all).
    For these parts of the program, the cheap compilation strategy is sufficient—they
    won’t take much time anyway. But functions that are called often or contain loops
    that do a lot of work have to be treated differently. While running the program,
    the JavaScript engine observes how often each piece of code runs. When it looks
    like some code might consume a serious amount of time (this is often called *hot
    code*), it is recompiled with a more advanced but slower compiler. This compiler
    performs more *optimizations* to produce faster code. There may even be more than
    two compilation strategies, with ever more expensive optimizations being applied
    to *very* hot code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个典型的程序中，大多数代码只会运行少数几次（或者根本不运行）。对于程序的这些部分，廉价的编译策略就足够了——反正它们不会花费太多时间。但是，频繁调用的函数或包含大量工作循环的函数必须以不同的方式对待。在运行程序时，JavaScript
    引擎会观察每段代码运行的频率。当某段代码似乎可能耗费大量时间时（这通常被称为*热点代码*），它会用一个更高级但更慢的编译器重新编译。这种编译器会进行更多的*优化*以生成更快的代码。甚至可能会有超过两种编译策略，对*非常*热点的代码应用更昂贵的优化。
- en: Interleaving running and compiling code means that by the time the clever compiler
    starts working with a piece of code, it has already been run multiple times. This
    makes it possible to *observe* the running code and gather information about it.
    Later in the chapter we’ll see how that can allow the compiler to create more
    efficient code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 交替运行和编译代码意味着在聪明的编译器开始处理一段代码时，它已经被运行多次。这使得能够*观察*运行中的代码并收集有关它的信息。在本章后面，我们将看到这如何使编译器能够生成更高效的代码。
- en: Graph Layout
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图布局
- en: 'Our example problem for this chapter concerns itself with graphs again. Pictures
    of graphs can be useful to describe road systems, networks, the way control flows
    through a computer program, and so on. The following picture shows a graph representing
    South American countries and territories, with edges between those that share
    land borders:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例问题再次与图有关。图的图片可以用于描述道路系统、网络、控制在计算机程序中的流动等。下图显示了一个表示南美国家和领土的图，其中边表示共享陆地边界的国家：
- en: '![Image](../images/f0375-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0375-01.jpg)'
- en: Deriving a picture like this from the definition of a graph is called *graph
    layout*. It involves assigning a place to each node in such a way that connected
    nodes are near each other, yet the nodes don’t crowd into each other. A random
    layout of the same graph is a lot harder to interpret.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从图的定义推导出这样的图像被称为*图布局*。它涉及为每个节点分配一个位置，使得相连的节点彼此接近，同时节点不会相互拥挤。相同图的随机布局则更难以解读。
- en: '![Image](../images/f0375-02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0375-02.jpg)'
- en: Finding a nice-looking layout for a given graph is a notoriously difficult problem.
    There is no known solution that reliably does this for arbitrary graphs. Large,
    densely connected graphs are especially challenging. But for some specific types
    of graphs, such as *planar* ones (which can be drawn without edges crossing each
    other), effective approaches exist.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定图找到一个好看的布局是一个众所周知的困难问题。对于任意图，没有已知的解决方案能够可靠地做到这一点。大型、密集连接的图尤其具有挑战性。但对于某些特定类型的图，例如*平面*图（可以画出而不让边相互交叉），有效的方法是存在的。
- en: To lay out a small graph that isn’t too tangled, we can apply an approach called
    *force-directed graph layout*. This runs a simplified physics simulation on the
    nodes of the graph, treating edges as if they are springs and having the nodes
    themselves repel each other as if electrically charged.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了布局一个不太复杂的小图，我们可以应用一种叫做*基于力的图布局*的方法。这在图的节点上运行一个简化的物理模拟，将边视为弹簧，并让节点之间相互排斥，就像带电一样。
- en: In this chapter we’ll implement a force-directed graph layout system and observe
    its performance. We can run such a simulation by repeatedly computing the forces
    that act on each node and moving the nodes around in response to those forces.
    The performance of such a program is important, since it might take a lot of iterations
    to reach a good-looking layout and each iteration computes a lot of forces.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现一个基于力的图布局系统并观察其性能。我们可以通过反复计算作用在每个节点上的力并根据这些力移动节点来运行这样的模拟。这样的程序性能很重要，因为达到一个好看的布局可能需要很多次迭代，而每次迭代都会计算大量的力。
- en: Defining a Graph
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义图
- en: We can represent a graph using a class like this. Each node gets a number, starting
    from 0, and stores a set of connected nodes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似这样的类来表示图。每个节点都有一个编号，从0开始，并存储一组连接的节点。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When building up a graph, you call addNode to define a new node, and addEdge
    to connect two nodes together. Code working with the graph can use neighbors,
    which returns a set of connected node IDs, to read information about edges.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建图时，你调用addNode来定义一个新节点，调用addEdge将两个节点连接在一起。与图一起工作的代码可以使用neighbors，返回一组连接的节点ID，以读取有关边的信息。
- en: To represent a graph layout, we’ll uses the familiar Vec class from previous
    chapters. A layout of a graph is an array of vectors with length graph.size, holding
    a position for each node.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示图的布局，我们将使用之前章节中的熟悉的Vec类。图的布局是一个长度为graph.size的向量数组，为每个节点保存一个位置。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The gridGraph function builds a graph that is just a square grid of nodes, which
    is a useful test case for a graph layout program. It creates size * size nodes
    and connects each node with the node above or to the left of it (if there is such
    a node).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: gridGraph函数构建一个只是节点的方形网格的图，这是图布局程序的一个有用测试用例。它创建size * size个节点，并将每个节点与其上方或左侧的节点连接（如果存在这样的节点）。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is what a layout for a grid might look like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个网格布局的样子：
- en: '![Image](../images/f0377-01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0377-01.jpg)'
- en: To allow us to inspect the layouts produced by our code, I’ve defined a drawGraph
    function that draws the graph onto a canvas. This function is defined in the code
    at *[eloquentjavascript.net/code/draw_layout.js](http://eloquentjavascript.net/code/draw_layout.js)*
    and is available in the online sandbox.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们检查代码生成的布局，我定义了一个drawGraph函数，将图形绘制到画布上。这个函数在*[eloquentjavascript.net/code/draw_layout.js](http://eloquentjavascript.net/code/draw_layout.js)*的代码中定义，并且在在线沙箱中可用。
- en: Force-Directed Layout
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 力导向布局
- en: We’ll move nodes one at a time, computing the forces that act on the current
    node and immediately moving that node in the direction of the sum of these forces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一次移动一个节点，计算作用于当前节点的力，并立即将该节点移动到这些力的总和方向。
- en: The force that an (idealized) spring applies can be approximated with Hooke’s
    law, which says that this force is proportional to the difference between the
    spring’s resting length and its current length. The binding spring Length defines
    the resting length of our edge springs. The rigidity of the springs is defined
    by springStrength, which we’ll multiply by the length difference to determine
    the resulting force.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （理想化的）弹簧施加的力可以用胡克定律来近似，该定律指出，这个力与弹簧的静止长度和当前长度之间的差值成正比。绑定弹簧长度定义了我们边缘弹簧的静止长度。弹簧的刚度由springStrength定义，我们将通过长度差乘以该值来确定结果力。
- en: To model the repulsion between nodes, we use another physical formula, Coulomb’s
    law, which says that the repulsion between two electrically charged particles
    is inversely proportional to the square of the distance between them. When two
    nodes are almost on top of each other, the squared distance is tiny and the resulting
    force is gigantic. As the nodes move farther apart, the squared distance grows
    rapidly so that the repelling force quickly weakens.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟节点之间的排斥力，我们使用另一个物理公式，即库仑定律，它表明两个带电粒子之间的排斥力与它们之间距离的平方成反比。当两个节点几乎重叠时，平方距离很小，结果力是巨大的。随着节点远离，平方距离迅速增大，从而排斥力迅速减弱。
- en: We’ll multiply by an experimentally determined constant, repulsion Strength,
    which controls the strength with which nodes repel each other.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将乘以一个实验确定的常数，排斥力强度，该常数控制节点之间排斥的强度。
- en: This function computes the strength of the force that acts on a node because
    of the presence of another node at a given distance. It always includes the repulsion
    force, and combines that with the force of the spring when the nodes are connected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数计算作用于节点的力的强度，因为在给定距离下存在另一个节点。它始终包括排斥力，并在节点连接时将其与弹簧的力相结合。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The way a node moves is determined by combining the forces exercised on it by
    all the other nodes. For each pair of nodes, our function needs to know the distance
    between them. We can compute that by subtracting the positions of the nodes and
    taking the length of the resulting vector. When the distance is less than one,
    we set it to one to prevent dividing by zero or by very small numbers, as doing
    so would produce NaN values or forces so gigantic they catapult nodes into outer
    space.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 节点移动的方式是通过结合所有其他节点施加在它上的力来决定的。对于每对节点，我们的函数需要知道它们之间的距离。我们可以通过减去节点的位置并计算结果向量的长度来计算这个距离。当距离小于一时，我们将其设为一，以防止除以零或非常小的数，因为这样会产生NaN值或产生巨大的力，将节点抛入太空。
- en: Using this distance and the presence or absence of a connecting edge between
    the nodes, we can compute the magnitude of the force that acts between them. To
    go from this magnitude to a force vector, we can multiply the magnitude by a normalized
    version of the apart vector. *Normalizing* a vector means creating a vector with
    the same direction but with a length of one. We can do that by dividing the vector
    by its own length. Adding that to the node’s position moves it in the direction
    of the force.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个距离以及节点之间连接边的存在与否，我们可以计算作用于它们之间的力的大小。要从这个大小得到力向量，我们可以将大小乘以一个标准化的分离向量。*标准化*一个向量意味着创建一个方向相同但长度为一的向量。我们可以通过将向量除以其自身的长度来实现。将这个值添加到节点的位置会使其朝着力的方向移动。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will use the following function to test a given implementation of our graph
    layout system. It start with a random layout and runs the model for three seconds.
    When finished, it logs the number of iterations it managed per second. To give
    us something to look at while the code runs, it draws the current layout of the
    graph after every 100 iterations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下函数来测试我们图形布局系统的给定实现。它从随机布局开始，并运行模型三秒钟。完成后，它记录每秒处理的迭代次数。为了让我们在代码运行时有所观察，它在每100次迭代后绘制当前图形的布局。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To give the browser the opportunity to actually display the graph, the function
    briefly gives control back to the event loop every time it draws the graph. The
    function is asynchronous so that it can await the timeout.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让浏览器有机会实际显示图形，该函数在每次绘制图形时将控制权短暂地返回给事件循环。该函数是异步的，以便能够等待超时。
- en: We can run this first implementation and see how much time it takes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行这个第一个实现，看看需要多少时间。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On my machine, this version manages about 1,600 iterations per second. That’s
    quite a lot already. But let’s see whether we can do better.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的机器上，这个版本每秒处理约1,600次迭代。这已经相当多了。但让我们看看是否可以做得更好。
- en: Avoiding Work
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免工作
- en: The fastest way to do something is to avoid doing it—or at least part of it—at
    all. By thinking about what the code is doing, you can often spot unnecessary
    redundance or things that can be done in a faster way.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完成某件事情最快的方法就是避免去做它——或者至少部分避免。通过思考代码的作用，你通常可以发现不必要的冗余或可以更快完成的操作。
- en: In the case of our example project, there is such an opportunity for doing less
    work. Every pair of nodes has the forces between them computed twice, once when
    moving the first node and once when moving the second. Since the force that node
    *X* exerts on node *Y* is exactly the opposite of the force *Y* exerts on *X*,
    we do not need to compute these forces twice.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们示例项目的情况下，存在减少工作量的机会。每对节点之间的力计算了两次，一次是在移动第一个节点时，另一次是在移动第二个节点时。由于节点*X*施加于节点*Y*的力恰好是节点*Y*施加于节点*X*的力的相反数，因此我们不需要计算这些力两次。
- en: The next version of the function changes the inner loop to go over only the
    nodes that come after the current one so that each pair of nodes is looked at
    exactly once. After computing a force between a pair of nodes, the function updates
    the position of both.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的下一个版本将内部循环更改为只遍历当前节点之后的节点，以便每对节点仅被查看一次。在计算一对节点之间的力之后，函数更新两个节点的位置。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Apart from the loop structure and the fact that it adjusts both nodes, this
    version is identical to the previous one. Measuring this code shows a significant
    speed boost—about 45 percent faster on Chrome and 55 percent faster on Firefox.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了循环结构以及调整两个节点的事实外，这个版本与之前的版本完全相同。测量这段代码显示出显著的速度提升——在Chrome上快约45％，在Firefox上快约55％。
- en: Different JavaScript engines work differently and may run programs at different
    speeds. So a change that makes code run faster in one engine may not help (or
    may even hurt) in a different engine—or even a different version of the same engine.
    This is annoying, but not unexpected given the complexity of these systems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的 JavaScript 引擎工作方式不同，可能以不同的速度运行程序。因此，在一个引擎中使代码运行更快的更改，在另一个引擎中可能无效（甚至可能有害）——甚至在同一引擎的不同版本中也是如此。这很烦人，但考虑到这些系统的复杂性，这并不意外。
- en: If we take another good look at what our program is doing, possibly by calling
    console.log to output size, it becomes clear that the forces generated between
    most pairs of nodes are so tiny that they aren’t really impacting the layout at
    all. Specifically, when nodes are not connected and are far away from each other,
    the forces between them don’t amount to much. Yet we still compute vectors for
    them and move the nodes a tiny bit. What if we just didn’t?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看看程序的运行情况，比如通过调用 console.log 输出大小，就会发现大多数节点对之间产生的力微乎其微，实际上并没有影响布局。具体来说，当节点未连接且相距较远时，它们之间的力几乎可以忽略不计。然而我们仍然为它们计算向量并稍微移动节点。如果我们不这样做会怎样呢？
- en: This next version defines a distance above which pairs of (unconnected) nodes
    will no longer compute and apply forces. With that distance set to 175, forces
    below 0.05 are ignored.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个版本定义了一个距离，超过该距离的（未连接）节点将不再计算和应用力。设置该距离为 175 时，忽略低于 0.05 的力。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This yields another 75 percent improvement in speed, with no discernable degradation
    of the layout. We cut a corner and got away with it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得速度又提高了 75%，而布局没有明显的退化。我们省了一些麻烦，结果也不错。
- en: Profiling
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能分析
- en: We were able to speed up the program quite a bit just by reasoning about it.
    But when it comes *micro-optimization*—the process of doing things slightly differently
    to make them faster—it is usually hard to predict which changes will help and
    which won’t. There we can no longer rely on reasoning—we have to *observe*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对程序的推理，我们能够相当大幅度地加快程序的运行速度。但在*微优化*方面——即通过稍微不同的方式来提高速度——通常很难预测哪些更改会有帮助，哪些不会。在这种情况下，我们不能再依赖推理，我们必须*观察*。
- en: Our runLayout function measures the time the program currently takes. That’s
    a good start. To improve something, you must measure it. Without measuring, you
    have no way of knowing whether your changes are having the effect you intended.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 runLayout 函数测量程序当前的运行时间。这是一个好的开始。要改善某件事，必须对其进行测量。不进行测量，你就无法知道你的更改是否达到了预期效果。
- en: The developer tools in modern browsers provide an even better way to measure
    the speed of your program. This tool is called a *profiler*. It will, while a
    program is running, gather information about the time used by the various parts
    of the program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器中的开发者工具提供了一种更好的方法来测量程序的速度。这个工具被称为*性能分析器*。在程序运行时，它会收集程序各个部分所用时间的信息。
- en: 'If your browser has a profiler, it will be available from the developer tool
    interface, probably on a tab called Performance. The profiler in Chrome spits
    out the following table when I have it record 3,000 iterations of forceDirected_skip:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的浏览器有性能分析器，它将在开发者工具界面中可用，可能在一个名为“性能”的标签上。当我让 Chrome 记录 3,000 次 forceDirected_skip
    的迭代时，性能分析器输出以下表格：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This lists the functions (or other tasks) that took a serious amount of time.
    For each function, it reports the time spent executing the function, both in milliseconds
    and as a percentage of the total time taken. The first column shows only the time
    that control was actually in the function, whereas the second column includes
    time spent in functions called by this function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这列出了耗时较长的函数（或其他任务）。对于每个函数，它报告执行该函数所花费的时间，包括毫秒和总时间的百分比。第一列只显示控制实际上在函数中的时间，而第二列包括在该函数调用的函数中花费的时间。
- en: As far as profiles go, this is a very simple one, since the program doesn’t
    *have* a lot of functions. For more complicated programs, the lists will be longer.
    Because the functions that take the most time are shown at the top, it is still
    usually easy to find the interesting information.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能分析而言，这个非常简单，因为程序*没有*很多函数。对于更复杂的程序，列表将会更长。由于耗时最长的函数显示在顶部，因此通常仍然容易找到有趣的信息。
- en: From this table, we can tell that most of the time is spent in the physics simulation
    function. That wasn’t unexpected. But on the second row, we see “Minor GC.” *GC*
    stands for “garbage collection”—the process of freeing up memory space taken up
    by values that the program no longer uses. The third row, which takes a similar
    amount of time, measures the vector constructor. These suggest the program is
    spending quite a lot of time creating and cleaning up Vec objects.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个表中，我们可以看出，大部分时间花费在物理仿真函数上。这并不意外。但在第二行，我们看到了“Minor GC”。*GC*代表“垃圾收集”—释放程序不再使用的值所占用的内存空间的过程。第三行的时间类似，测量的是向量构造函数。这些表明程序在创建和清理
    Vec 对象上花费了相当多的时间。
- en: Imagine memory, again, as a long, long row of bits. When the program starts,
    it might receive an empty piece of memory and just start putting the objects it
    creates in there, one after the other. But at some point, the space is full, and
    some of the objects in it are no longer used. The JavaScript engine has to figure
    out which objects are used and which are not so that it can reuse the unused pieces
    of memory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次想象内存是一排排长长的比特。当程序启动时，它可能会接收一块空的内存，并开始逐个放入它创建的对象。但在某个时刻，空间满了，其中的一些对象不再使用。JavaScript
    引擎必须弄清楚哪些对象正在使用，哪些对象没有使用，以便能够重用未使用的内存块。
- en: Each iteration of our loop creates five objects. The speed at which the engine
    is creating and reclaiming all these objects is already pretty impressive. Because
    many JavaScript programs create lots of objects, and managing memory for those
    objects can potentially slow the program down, a lot of effort has been spent
    on making this fast.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们循环的每次迭代都会创建五个对象。引擎创建和回收所有这些对象的速度已经相当惊人。因为许多 JavaScript 程序创建大量对象，而管理这些对象的内存可能会导致程序变慢，因此在提高这方面的效率上花费了很多精力。
- en: But as efficient as it is, it’s still work that has to happen. Let’s try a version
    of the code that doesn’t create new vectors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但尽管效率如此，它仍然是必须进行的工作。让我们尝试一个不创建新向量的代码版本。
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The new code is wordier and more repetitive, but if I measure it, the improvement
    is large enough to consider doing this kind of manual object flattening in performance-sensitive
    code. On both Firefox and Chrome, the new version is about 50 percent faster than
    the previous one.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码更加冗长和重复，但如果我进行测量，这种改进足够大，值得在对性能敏感的代码中考虑进行这种手动对象扁平化。在 Firefox 和 Chrome 上，新版本的速度比之前的版本快了大约
    50%。
- en: Taking all these steps together, we’ve made the program about four times faster
    than the initial version. That’s quite an improvement. But remember that doing
    this work is useful only for code that actually takes a lot of time. Trying to
    optimize everything right away will only slow you down and leave you with a lot
    of needlessly overcomplicated code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 综合这些步骤，我们使得程序比最初版本快了大约四倍。这是一个相当大的改进。但请记住，进行这项工作仅对那些实际消耗大量时间的代码是有用的。试图立即优化所有内容只会让你变得更加缓慢，并留下大量不必要的复杂代码。
- en: Function Inlining
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数内联
- en: Some vector methods (such as times) don’t show up in the profile we saw, even
    though they were being used heavily. This is because the compiler *inlined* them.
    Rather than having the code in the inner function call an actual method to multiply
    vectors, the vector-multiplication code is put directly inside the function, and
    no actual method calls happen in the compiled code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些向量方法（例如 times）在我们看到的分析中没有出现，尽管它们被大量使用。这是因为编译器对它们进行了*内联*。与其让内部函数中的代码调用实际方法来相乘向量，不如将向量乘法代码直接放入函数内部，编译后的代码中没有实际的方法调用。
- en: There are various ways in which inlining helps make code fast. Functions and
    methods are, at the machine level, called using a protocol that requires putting
    the arguments and the return address (the place where execution must continue
    when the function returns) somewhere the function can find them. The way a function
    call gives control to another part of the program also often requires saving some
    of the processor’s state so that the called function can use the processor without
    interfering with data that the caller still needs. All of this becomes unnecessary
    when a function is inlined.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 内联帮助代码变快的方式有很多。函数和方法在机器级别上是通过一种协议调用的，这需要将参数和返回地址（当函数返回时执行需要继续的地方）放在函数可以找到的位置。当函数调用将控制权交给程序的其他部分时，通常还需要保存一些处理器的状态，以便被调用的函数可以使用处理器而不干扰调用者仍然需要的数据。当函数被内联时，所有这些都变得不必要。
- en: Furthermore, a good compiler will do its best to find ways to simplify the code
    it generates. If functions are treated as black boxes that might do anything,
    the compiler does not have a lot to work with. On the other hand, if it can see
    and include the function body in its analysis, it might find additional opportunities
    to optimize the code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个好的编译器会尽力寻找简化其生成代码的方法。如果将函数视为可能做任何事情的黑箱，编译器就没有太多可供利用的内容。另一方面，如果它能够在分析中看到并包含函数体，可能会找到更多优化代码的机会。
- en: For example, a JavaScript engine could avoid creating some of the vector objects
    in our code altogether. In an expression like the following one, if we can see
    through the methods, it is clear that the resulting vector’s coordinates are the
    result of adding the coordinates of force to the product of normalized and the
    forceSize binding. Thus, there is no need to create the intermediate object produced
    by the times method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，JavaScript 引擎可以完全避免在我们的代码中创建一些向量对象。在像下面这样的表达式中，如果我们可以透视这些方法，很明显，结果向量的坐标是将
    force 的坐标与 normalized 和 forceSize 绑定的乘积相加的结果。因此，没有必要创建由 times 方法生成的中间对象。
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But JavaScript allows us to replace methods at any time by manipulating prototype
    objects. How does the compiler figure out which function this times method actually
    is? And what if someone changes the value stored in Vec.prototype.times later?
    The next time code that has inlined that function runs, it might continue to use
    the old definition, violating the programmer’s assumptions about the way their
    program behaves.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 JavaScript 允许我们通过操纵原型对象在任何时候替换方法。编译器如何确定这个 times 方法实际上是哪一个函数呢？如果之后有人更改了 Vec.prototype.times
    中存储的值会怎样？下次运行已内联该函数的代码时，它可能会继续使用旧的定义，从而违反程序员对程序行为的假设。
- en: This is where the interleaving of execution and compilation starts to pay off.
    When a hot function is compiled, it has already run a number of times. If, during
    those runs, it always called the same function, it is reasonable to try inlining
    that function. The code is optimistically compiled with the assumption that, in
    the future, the same function is going to be called here.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是执行和编译交错开始发挥作用的地方。当一个热点函数被编译时，它已经运行了多次。如果在这些运行中，它总是调用同一个函数，那么尝试内联这个函数是合理的。代码是乐观地编译的，假设将来会在这里调用同一个函数。
- en: To handle the pessimistic case, where another function ends up being called,
    the compiler inserts a test that compares the called function to the one that
    was inlined. If the two do not match, the optimistically compiled code is wrong,
    and the JavaScript engine must *deoptimize*, meaning it falls back to a less optimized
    version of the code. At some later point, it may try to optimize again in a different
    way based on what it knows now.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理悲观的情况，即调用了另一个函数，编译器插入了一个测试，比较被调用的函数和内联的函数。如果两者不匹配，乐观编译的代码就是错误的，JavaScript
    引擎必须 *反优化*，这意味着它回退到一个不那么优化的代码版本。在之后的某个时刻，它可能会根据现在所知道的内容尝试以不同的方式再次优化。
- en: Dynamic Types
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态类型
- en: JavaScript expressions like graph.size, which fetch a property from an object,
    are far from trivial to compile. In many languages, *bindings* have a type, and
    thus, when you perform an operation on the value they hold, the compiler already
    knows what kind of operation you need. In JavaScript, only *values* have types,
    and a binding can end up holding values of different types.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 像 graph.size 这样的 JavaScript 表达式，从对象中获取属性，并非易事。在许多语言中，*绑定* 是有类型的，因此当你对它们持有的值执行操作时，编译器已经知道你需要什么样的操作。在
    JavaScript 中，只有 *值* 有类型，而一个绑定可能会持有不同类型的值。
- en: This means that initially the compiler knows little about the property the code
    might be trying to access and has to produce code that handles all possible types.
    If graph holds an undefined value, the code must throw an error. If it holds a
    string, it must look up size in String.prototype. If it holds an object, the way
    the size property is extracted from it depends on the shape of the object. And
    so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着最初编译器对代码可能尝试访问的属性了解不多，必须生成处理所有可能类型的代码。如果 graph 持有未定义的值，代码必须抛出一个错误。如果它持有一个字符串，则必须在
    String.prototype 中查找 size。如果它持有一个对象，则从中提取 size 属性的方式取决于对象的形状。依此类推。
- en: Fortunately, though JavaScript does not require it, bindings in most programs
    *do* have a single type. And if the compiler knows this type, it can use that
    information to produce efficient code. If graph has always been an instance of
    Graph so far, the optimizing compiler can create code that inlines the size getter
    from that class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，尽管 JavaScript 不要求如此，但大多数程序中的绑定 *确实* 只有一种类型。如果编译器知道这个类型，它可以利用这些信息生成高效的代码。如果图形至今一直是
    Graph 的一个实例，那么优化编译器可以创建内联从该类获取大小的方法的代码。
- en: Again, events observed in the past don’t provide any guarantees about events
    that will occur in the future. Some piece of code that hasn’t run yet might still
    pass another type of value to our function—another kind of graph object, for example,
    whose size property works differently.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，过去观察到的事件并不能保证未来将会发生的事件。某些尚未运行的代码仍可能向我们的函数传递另一种类型的值——例如，另一种图形对象，其大小属性的工作方式不同。
- en: This means the compiled code still has to *check* whether its assumptions hold
    and take an appropriate action if they don’t. An engine could deoptimize entirely,
    falling back to the unoptimized version of the function. Or it could compile a
    new version of the function that also handles the newly observed type.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着编译的代码仍然需要 *检查* 其假设是否成立，并在不成立时采取适当的行动。引擎可以完全去优化，退回到未优化的函数版本。或者它可以编译一个新的函数版本，以处理新观察到的类型。
- en: You can observe the slowdown caused by the failure to predict object types by
    intentionally messing up the uniformity of the input objects. For example, we
    could replace randomLayout with a version that adds a property with a random name
    to every vector.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过故意破坏输入对象的一致性来观察因无法预测对象类型而导致的性能下降。例如，我们可以用一个版本替换 randomLayout，该版本为每个向量添加一个随机名称的属性。
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we run our fast simulation code on the resulting graph, it becomes about
    three times as slow on Firefox and five times as slow on Chrome. Now that object
    types vary, the code that interacts with vectors has to look up the properties
    without prior knowledge about the shape of the object, which is a lot more expensive
    to do.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在结果图上运行我们的快速模拟代码，它在 Firefox 上会变得慢大约三倍，而在 Chrome 上则变慢五倍。现在对象类型不再一致，与向量交互的代码必须在没有事先了解对象形状的情况下查找属性，这样做的成本要高得多。
- en: Interestingly, after running this code, forceDirected_noVector has become slow
    even when run on a regular, nonmangled layout vector. The messy types have “poisoned”
    the compiled code, at least for a while—at some point, browsers tend to throw
    away compiled code and recompile it from scratch, removing this effect.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，在运行此代码后，即使在常规的、未损坏的布局向量上运行 forceDirected_noVector 也变得缓慢。混乱的类型在某种程度上“毒害”了编译的代码——在某个时刻，浏览器往往会丢弃编译的代码并重新从头编译，消除这种影响。
- en: A similar technique is used for things other than property access. The + operator,
    for example, means different things depending on what kind of values it is applied
    to. Instead of always running the full code that handles all these meanings, a
    smart JavaScript compiler will use previous observations to build up some expectation
    of the type that the operator is probably being applied to. If it is applied only
    to numbers, a much simpler piece of machine code can be generated to handle it.
    But again, such assumptions must be checked every time the function runs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的技术也用于其他非属性访问的情况。例如，+ 运算符的意义取决于它应用于什么类型的值。聪明的 JavaScript 编译器不会每次都运行处理所有这些含义的完整代码，而是会利用先前的观察构建对运算符可能应用类型的某种预期。如果它仅应用于数字，则可以生成一个更简单的机器代码来处理它。但同样，这种假设必须在每次函数运行时进行检查。
- en: The lesson here is that if a piece of code needs to be fast, you can help by
    feeding it consistent types. JavaScript engines can handle cases where a few different
    types occur relatively well—they will generate code that handles all these types
    and deoptimizes only when a new type is seen. But even there, the resulting code
    is slower than what you would get for a single type.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的教训是，如果一段代码需要快速执行，你可以通过提供一致的类型来帮助它。JavaScript 引擎能够相对较好地处理少量不同类型的情况——它们会生成处理所有这些类型的代码，并且仅在看到新类型时才会进行去优化。但即便如此，生成的代码仍然比单一类型时的代码慢。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Thanks to the enormous amount of money being poured into the web, as well as
    the rivalry between the different browsers, JavaScript compilers are good at what
    they do: making code run fast. But sometimes you have to help them a little and
    rewrite your inner loops to avoid more expensive JavaScript features. Creating
    fewer objects (and arrays and strings) often helps.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了大量资金投入到网络中，以及不同浏览器之间的竞争，JavaScript 编译器在其工作中表现出色：使代码运行得更快。但有时你需要稍微帮助它们，重写你的内循环，以避免更昂贵的
    JavaScript 特性。创建更少的对象（以及数组和字符串）通常会有所帮助。
- en: Before you start mangling your code to be faster, think about ways to make it
    do less work. The biggest opportunities for optimization are often found in that
    direction.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始修改代码以提高速度之前，先考虑如何减少代码的工作量。优化的最大机会通常在于这个方向。
- en: JavaScript engines compile hot code multiple times and will use information
    gathered during previous execution to compile more efficient code. Giving your
    bindings a consistent type helps make this type of optimization possible.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 引擎会多次编译热点代码，并利用之前执行过程中收集的信息来编译更高效的代码。为你的绑定提供一致的类型有助于实现这种类型的优化。
- en: Exercises
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '*Prime Numbers*'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*质数*'
- en: Write a generator (see [Chapter 11](ch11.xhtml#ch11)) primes that produces an
    endless stream of *prime numbers*. Prime numbers are whole numbers greater than
    1 that cannot be divided by any whole number less than them and greater than 1\.
    For example, the first five primes are 2, 3, 5, 7, and 11\. Don’t worry about
    speed (yet).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个生成器（见 [第11章](ch11.xhtml#ch11)） `primes`，生成源源不断的*质数*。质数是大于1的整数，不能被任何小于它们且大于1的整数整除。例如，前五个质数是2、3、5、7和11。现在先不考虑速度。
- en: Set up a function measurePrimes that uses Date.now() to measure the time it
    takes your primes function to find the first ten thousand prime numbers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个函数 `measurePrimes`，使用 `Date.now()` 来测量你的质数函数找到前一万个质数所需的时间。
- en: '*Faster Prime Numbers*'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*更快的质数*'
- en: Now that you have a measured test case, find a way to make your primes function
    faster. Think about ways to reduce the number of remainder checks you have to
    perform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个测量过的测试用例，想办法让你的质数函数更快。考虑减少你需要执行的余数检查的次数。
