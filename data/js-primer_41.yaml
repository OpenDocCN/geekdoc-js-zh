- en: データを表示する
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示数据
- en: 原文：[`jsprimer.net/use-case/ajaxapp/display/`](https://jsprimer.net/use-case/ajaxapp/display/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/use-case/ajaxapp/display/`](https://jsprimer.net/use-case/ajaxapp/display/)
- en: 前のセクションでは、Fetch APIを使ってGitHubのAPIからユーザー情報を取得しました。 このセクションでは取得したデータをHTMLに整形して、アプリケーションにユーザー情報を表示してみましょう。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们使用Fetch API从GitHub API获取了用户信息。在本节中，我们将对获取的数据进行HTML格式化，并在应用程序中显示用户信息。
- en: '*HTMLを組み立てる*'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*构建HTML*'
- en: '*HTML 文字列の生成にはテンプレートリテラルを使います。 テンプレートリテラルは文字列中の改行が可能なため、HTMLのインデントを表現できて見通しが良くなります。
    また、変数の埋め込みも簡単なため、HTMLのテンプレートに対して動的なデータをあてはめるのに適しています。'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*在生成HTML字符串时使用模板字符串。模板字符串允许在字符串中包含换行，因此可以表示HTML的缩进，从而提高可读性。此外，它还允许轻松嵌入变量，因此非常适合动态地将数据应用于HTML模板。'
- en: 次のコードではGitHubのユーザー情報から組み立てるHTMLのテンプレートを宣言しています。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码声明了从GitHub用户信息构建的HTML模板。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: このテンプレートに`userInfo`オブジェクトの値をあてはめると、次のようなHTML 文字列になります。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 将`userInfo`对象的值应用到这个模板中，将生成如下HTML字符串。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*HTML 文字列をDOMに追加する*'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*将HTML字符串添加到DOM中*'
- en: '*次に、生成したHTML 文字列をDOMツリーに追加して表示します。 まずは動的にHTMLをセットするために、目印となる要素を`index.html`に追加します。
    今回は`result`というidを持ったdiv 要素（以降`div#result`要素と表記します）を配置します。'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来，将生成的HTML字符串添加到DOM树中并显示。首先，为了动态设置HTML，需要在`index.html`中添加一个标记元素。这次，我们添加了一个具有`result`
    id的div元素（以下称为`div#result`元素）。 '
- en: index.html
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ここから、`div#result`要素の子要素としてHTML 文字列を挿入することになります。 [document.getElementById](https://developer.mozilla.org/ja/docs/Web/API/Document/getElementById)メソッドを使い、id
    属性が設定された要素にアクセスします。 `div#result`要素が取得できたら、先ほど生成したHTML 文字列を`innerHTML`プロパティにセットします。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，将HTML字符串作为`div#result`元素的孩子插入。使用`document.getElementById`方法通过id属性访问设置了id的元素。如果成功获取到`div#result`元素，则将之前生成的HTML字符串设置为`innerHTML`属性。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JavaScriptによってHTML 要素をDOMに追加する方法には、大きく分けて２つあります。 1つは、今回のようにHTML 文字列を[ElementのinnerHTML](https://developer.mozilla.org/ja/docs/Web/API/Element/innerHTML)プロパティにセットする方法です。
    もう1つは、文字列ではなく[Element](https://developer.mozilla.org/ja/docs/Web/API/Element)オブジェクトを生成して[手続き的にツリー構造を構築する](https://developer.mozilla.org/ja/docs/Web/API/Node/appendChild)方法です。
    後者はセキュリティ的に安全ですが、コードは少し冗長になります。 今回はElementの`innerHTML`プロパティを使いつつ、セキュリティのためのエスケープ処理を行います。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript将HTML元素添加到DOM中的方法主要有两种。一种是将HTML字符串设置为Element的`innerHTML`属性，就像这次这样。另一种是生成Element对象，然后[逐步构建树结构](https://developer.mozilla.org/ja/docs/Web/API/Node/appendChild)。后者在安全性方面更安全，但代码会更冗长。这次，我们将使用Element的`innerHTML`属性，同时进行安全性的转义处理。
- en: '*HTML 文字列をエスケープする*'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*转义HTML字符串*'
- en: '*Elementの`innerHTML`プロパティに文字列をセットすると、その文字列はHTMLとして解釈されます。 たとえばGitHubのユーザー名に`<`記号や`>`記号が含まれていると、意図しない構造のHTMLになる可能性があります。
    これを回避するために、文字列���セットする前に、特定の記号を安全な表現に置換する必要があります。 この処理を一般にHTMLのエスケープと呼びます。'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*将字符串设置到Element的`innerHTML`属性中时，该字符串将被解释为HTML。例如，如果GitHub的用户名中包含`<`或`>`符号，则可能会产生意外的HTML结构。为了避免这种情况，在设置字符串之前，需要将特定的符号替换为安全的表示。这个过程通常被称为HTML转义。'
- en: 多くのViewライブラリは内部にエスケープ機構を持っていて、動的にHTMLを組み立てるときにはデフォルトでエスケープをしてくれます。 または、[HTMLエスケープ用のライブラリ](https://github.com/teppeis/htmlspecialchars)を利用するケースも多いでしょう。
    今回のように独自実装するのは特別なケースで、一般的にはライブラリが提供する機能を使うのがほとんどです。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 许多View库内部都包含转义机制，在动态构建HTML时，默认会进行转义。或者，也经常使用[HTML转义库](https://github.com/teppeis/htmlspecialchars)。像这样进行独立实现的情况是特殊情况，通常几乎都是使用库提供的功能。
- en: 次のように、特殊な記号に対するエスケープ処理を`escapeSpecialChars`関数として宣言します。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式，声明名为`escapeSpecialChars`的函数以进行特殊字符的转义处理。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: この`escapeSpecialChars`関数を、HTML 文字列の中で`userInfo`から値を注入しているすべての箇所で呼び出します。 ただし、テンプレートリテラル中で挿入している部分すべてに関数を適用するのは手間ですし、メンテナンス性もよくありません。
    そこで、タグつきテンプレート関数を利用することで、明示的にエスケープ用の関数を呼び出す必要がないようにします。 タグつきテンプレート関数は、テンプレートによる値の埋め込み時に呼ばれる関数を扱えます。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML字符串中，将`userInfo`中的值注入到所有需要调用`escapeSpecialChars`函数的位置。但是，在模板字符串中插入的所有部分都应用函数会比较麻烦，而且维护性也不好。因此，通过使用带标签的模板函数，可以避免显式调用转义函数。带标签的模板函数可以处理在模板值嵌入时调用的函数。
- en: 次の`escapeHTML`関数は**タグ関数**です（詳細は「文字列」の章の「タグつきテンプレート関数」を参照）。 タグ関数には、第一引数に文字列リテラルの配列、第二引数に埋め込まれる値の配列が与えられます。
    `escapeHTML`関数では、文字列リテラルと値が元の順番どおりに並ぶように文字列を組み立てつつ、 値が文字列型であればエスケープするようにしています。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`escapeHTML`函数是**标签函数**（详细信息请参考“字符串”章节中的“带标签的模板函数”）。标签函数接受一个字符串字面量数组作为第一个参数，一个要嵌入的值数组作为第二个参数。在`escapeHTML`函数中，在构建字符串时保持字符串字面量和值的原始顺序，如果值是字符串类型，则进行转义。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`escapeHTML`関数はタグ関数なので、通常の`()`による呼び出しではなく、テンプレートリテラルに対してタグづけして使います。 テンプレートリテラルのバッククォート記号の前に関数を書くと、関数をタグ関数として呼び出せます。'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`escapeHTML`函数是标签函数，因此不是使用通常的`()`调用，而是使用标签对模板字符串进行标记后使用。在模板字符串的转义引号前写上函数，可以将函数作为标签函数调用。'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: これでHTML 文字列の生成とエスケープができました。 これらの処理を前のセクションで作成した `fetchUserInfo` 関数の中で呼び出します。
    ここまでで、index.jsとindex.htmlは次のようになっています。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经完成了HTML字符串的生成和转义。在这些处理中，将调用前面创建的`fetchUserInfo`函数。到目前为止，`index.js`和`index.html`如下所示。
- en: index.js
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: index.js
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: index.html
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: index.html
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: アプリケーションを開いてボタンを押すと、次のようにユーザー情報が表示されます。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序启动并点击按钮时，用户信息将按如下方式显示。
- en: '![ユーザー情報の表示](img/ce2fbff4fda4c97207376b67af18ae7d.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![用户信息显示](img/ce2fbff4fda4c97207376b67af18ae7d.png)'
- en: '*このセクションのチェックリスト*'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*本节的检查清单*'
- en: '**   テンプレートリテラルを使ってHTML 文字列を組み立てた'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**   使用模板字符串来构建HTML字符串**'
- en: '`innerHTML`プロパティを使ってHTML 文字列をDOMに追加した'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`innerHTML`属性将HTML字符串添加到DOM中
- en: タグつきテンプレート関数を使ってHTML 文字列をエスケープした
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带标签的模板函数来转义HTML字符串
- en: '`fetchUserInfo`関数を呼び出し、HTMLにユーザー情報が表示されることを確認した'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`fetchUserInfo`函数，确认用户信息已显示在HTML中
- en: ここまでのアプリは次のURLで確認できます。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的应用程序可以通过以下URL进行查看。
- en: '[`jsprimer.net/use-case/ajaxapp/display/example/`](https://jsprimer.net/use-case/ajaxapp/display/example/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`jsprimer.net/use-case/ajaxapp/display/example/`](https://jsprimer.net/use-case/ajaxapp/display/example/)'
