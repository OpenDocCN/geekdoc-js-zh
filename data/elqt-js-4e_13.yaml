- en: '12'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '12'
- en: 'PROJECT: A PROGRAMMING LANGUAGE'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：一种编程语言
- en: Building your own programming language is surprisingly easy (as long as you
    do not aim too high) and very enlightening.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自己的编程语言出乎意料地简单（只要你不追求太高的目标），而且非常有启发性。
- en: The main thing I want to show in this chapter is that there’s no magic involved
    in building a programming language. I’ve often felt that some human inventions
    were so immensely clever and complicated that I’d never be able to understand
    them. But with a little reading and experimenting, they often turn out to be quite
    mundane.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这一章中想要展示的主要内容是，构建编程语言并没有什么神秘之处。我常常觉得某些人类发明如此聪明复杂，以至于我永远无法理解它们。但经过一点阅读和实验，它们往往显得相当平凡。
- en: We will build a programming language called Egg. It will be a tiny, simple language—but
    one that is powerful enough to express any computation you can think of. It will
    allow simple abstraction based on functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一种名为Egg的编程语言。它将是一个小而简单的语言——但足够强大，能够表达你能想到的任何计算。它将允许基于函数的简单抽象。
- en: Parsing
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析
- en: The most immediately visible part of a programming language is its *syntax*,
    or notation. A *parser* is a program that reads a piece of text and produces a
    data structure that reflects the structure of the program contained in that text.
    If the text does not form a valid program, the parser should point out the error.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言最明显的部分是它的*语法*或符号。*解析器*是一个读取文本并生成反映该文本中程序结构的数据结构的程序。如果文本未形成有效的程序，解析器应该指出错误。
- en: Our language will have a simple and uniform syntax. Everything in Egg is an
    expression. An expression can be the name of a binding, a number, a string, or
    an *application*. Applications are used for function calls but also for constructs
    such as if or while.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的语言将拥有简单且统一的语法。在Egg中，一切都是表达式。表达式可以是绑定的名称、数字、字符串或*应用*。应用用于函数调用，也用于如if或while等结构。
- en: To keep the parser simple, strings in Egg do not support anything like backslash
    escapes. A string is simply a sequence of characters that are not double quotes,
    wrapped in double quotes. A number is a sequence of digits. Binding names can
    consist of any character that is not whitespace and that does not have a special
    meaning in the syntax.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持解析器的简单性，Egg中的字符串不支持反斜杠转义之类的功能。字符串只是一个不包含双引号的字符序列，用双引号括起来。数字是一个数字字符的序列。绑定名称可以由任何非空白字符组成，并且在语法中没有特殊含义。
- en: Applications are written the way they are in JavaScript, by putting parentheses
    after an expression and having any number of arguments between those parentheses,
    separated by commas.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的写法与JavaScript相同，在表达式后放置括号，并在这些括号之间放入任意数量的参数，用逗号分隔。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The uniformity of the Egg language means that operators in JavaScript (such
    as >) are normal bindings in this language, applied just like other functions.
    Since the syntax has no concept of a block, we need a do construct to represent
    doing multiple things in sequence.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Egg语言的统一性意味着JavaScript中的运算符（如>）在该语言中是普通绑定，与其他函数一样被应用。由于语法没有块的概念，我们需要一个do结构来表示顺序执行多个操作。
- en: The data structure that the parser will use to describe a program consists of
    expression objects, each of which has a type property indicating the kind of expression
    it is and other properties to describe its content.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器将用来描述程序的数据结构由表达式对象组成，每个对象都有一个类型属性，指示它是哪种表达式，以及其他属性来描述其内容。
- en: Expressions of type “value” represent literal strings or numbers. Their value
    property contains the string or number value that they represent. Expressions
    of type “word” are used for identifiers (names). Such objects have a name property
    that holds the identifier’s name as a string. Finally, “apply” expressions represent
    applications. They have an operator property that refers to the expression that
    is being applied, as well as an args property that holds an array of argument
    expressions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为“值”的表达式表示字面字符串或数字。它们的值属性包含它们所表示的字符串或数字值。类型为“单词”的表达式用于标识符（名称）。这样的对象有一个名称属性，作为字符串保存标识符的名称。最后，“应用”表达式代表应用。它们有一个操作符属性，指向被应用的表达式，以及一个args属性，保存一个参数表达式的数组。
- en: 'The >(x, 5) part of the previous program would be represented like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个程序中的>(x, 5)部分将表示为：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Such a data structure is called a *syntax tree*. If you imagine the objects
    as dots and the links between them as lines between those dots, as shown in the
    following diagram, the structure has a treelike shape. The fact that expressions
    contain other expressions, which in turn might contain more expressions, is similar
    to the way tree branches split and split again.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的数据结构被称为*语法树*。如果你想象这些对象为点，而它们之间的链接为这些点之间的线，如下图所示，结构呈现树状形状。表达式包含其他表达式，而这些表达式又可能包含更多的表达式，这类似于树枝的分叉和再分叉的方式。
- en: '![Image](../images/f0197-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0197-01.jpg)'
- en: 'Contrast this to the parser we wrote for the configuration file format in [Chapter
    9](ch09.xhtml#ch09), which had a simple structure: it split the input into lines
    and handled those lines one at a time. There were only a few simple forms that
    a line was allowed to have.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与我们在[第9章](ch09.xhtml#ch09)中为配置文件格式编写的解析器进行对比，该解析器结构简单：它将输入分割成行，并逐行处理。允许每行的形式仅有几种简单的类型。
- en: Here we must find a different approach. Expressions are not separated into lines,
    and they have a recursive structure. Application expressions *contain* other expressions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们必须找到一种不同的方法。表达式不是按行分隔的，而且它们具有递归结构。应用表达式*包含*其他表达式。
- en: Fortunately, this problem can be solved very well by writing a parser function
    that is recursive in a way that reflects the recursive nature of the language.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个问题可以通过编写一个递归的解析函数来很好地解决，反映出语言的递归特性。
- en: We define a function parseExpression that takes a string as input. It returns
    an object containing the data structure for the expression at the start of the
    string, along with the part of the string left after parsing this expression.
    When parsing subexpressions (the argument to an application, for example), this
    function can be called again, yielding the argument expression as well as the
    text that remains. This text may in turn contain more arguments or may be the
    closing parenthesis that ends the list of arguments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个函数parseExpression，它接受一个字符串作为输入。它返回一个包含字符串开头表达式的数据结构的对象，以及解析完该表达式后剩余的字符串部分。在解析子表达式（例如应用的参数）时，可以再次调用该函数，从而得到参数表达式以及剩余的文本。该文本可能包含更多的参数，或者可能是结束参数列表的右括号。
- en: 'This is the first part of the parser:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是解析器的第一部分：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because Egg, like JavaScript, allows any amount of whitespace between its elements,
    we have to repeatedly cut the whitespace off the start of the program string.
    The skipSpace function helps with this.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Egg（像JavaScript一样）允许元素之间有任意数量的空白，我们必须反复从程序字符串的开头去掉空白。skipSpace函数对此提供了帮助。
- en: 'After skipping any leading space, parseExpression uses three regular expressions
    to spot the three atomic elements that Egg supports: strings, numbers, and words.
    The parser constructs a different kind of data structure depending on which expression
    matches. If the input does not match one of these three forms, it is not a valid
    expression and the parser throws an error. We use the SyntaxError constructor
    here. This is an exception class defined by the standard, like Error, but more
    specific.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过任何前导空格后，parseExpression使用三个正则表达式来识别Egg支持的三种基本元素：字符串、数字和单词。解析器根据匹配的表达式构造不同类型的数据结构。如果输入不符合这三种形式之一，则不是有效表达式，解析器会抛出错误。我们在这里使用SyntaxError构造函数。这是一个由标准定义的异常类，类似于Error，但更加具体。
- en: We then cut off the part that was matched from the program string and pass that,
    along with the object for the expression, to parseApply, which checks whether
    the expression is an application. If so, it parses a parenthesized list of arguments.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们从程序字符串中截去匹配的部分，并将其与表达式对象一起传递给parseApply，后者检查该表达式是否为应用。如果是，它将解析一个括号内的参数列表。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the next character in the program is not an opening parenthesis, this is
    not an application, and parseApply returns the expression it was given. Otherwise,
    it skips the opening parenthesis and creates the syntax tree object for this application
    expression. It then recursively calls parseExpression to parse each argument until
    a closing parenthesis is found. The recursion is indirect, through parseApply
    and parseExpression calling each other.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序中的下一个字符不是左括号，这就不是一个应用，parseApply返回它所给出的表达式。否则，它会跳过左括号，并为这个应用表达式创建语法树对象。然后，它递归调用parseExpression以解析每个参数，直到找到右括号。递归是间接的，通过parseApply和parseExpression相互调用。
- en: Because an application expression can itself be applied (such as in multiplier(2)(1)),
    parseApply must, after it has parsed an application, call itself again to check
    whether another pair of parentheses follows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为应用表达式本身可以被应用（例如在multiplier(2)(1)中），所以parseApply在解析完一个应用后必须再次调用自身，以检查是否跟随另一个括号。
- en: This is all we need to parse Egg. We wrap it in a convenient parse function
    that verifies that it has reached the end of the input string after parsing the
    expression (an Egg program is a single expression), and that gives us the program’s
    data structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是解析Egg所需的一切。我们将其包装在一个方便的解析函数中，该函数在解析表达式后验证是否已经到达输入字符串的末尾（一个Egg程序是一个单一的表达式），这为我们提供了程序的数据结构。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It works! It doesn’t give us very helpful information when it fails and doesn’t
    store the line and column on which each expression starts, which might be helpful
    when reporting errors later, but it’s good enough for our purposes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效！当它失败时并没有提供非常有用的信息，也没有存储每个表达式开始时的行和列，这在稍后报告错误时可能会很有帮助，但对于我们的目的来说已经足够了。
- en: The Evaluator
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 求值器
- en: What can we do with the syntax tree for a program? Run it, of course! And that
    is what the evaluator does. You give it a syntax tree and a scope object that
    associates names with values, and it will evaluate the expression that the tree
    represents and return the value that this produces.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用程序的语法树做什么？当然是运行它！这就是求值器所做的。你给它一个语法树和一个将名称与值关联的作用域对象，它将评估树所代表的表达式并返回产生的值。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The evaluator has code for each of the expression types. A literal value expression
    produces its value. (For example, the expression 100 evaluates to the number 100.)
    For a binding, we must check whether it is actually defined in the scope and,
    if it is, fetch the binding’s value.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 求值器为每种表达式类型都有代码。字面值表达式产生其值。（例如，表达式100评估为数字100。）对于绑定，我们必须检查它是否在作用域中实际定义，如果是，则获取绑定的值。
- en: Applications are more involved. If they are a special form, like if, we do not
    evaluate anything—we just pass the argument expressions, along with the scope,
    to the function that handles this form. If it is a normal call, we evaluate the
    operator, verify that it is a function, and call it with the evaluated arguments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序更复杂。如果它们是特殊形式，例如if，我们不评估任何内容——我们只是将参数表达式与作用域一起传递给处理此形式的函数。如果它是普通调用，我们评估运算符，验证它是一个函数，然后用评估后的参数调用它。
- en: We use plain JavaScript function values to represent Egg’s function values.
    We will come back to this later, when the special form fun is defined.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用普通的JavaScript函数值来表示Egg的函数值。当定义特殊形式fun时我们会再回来讨论这一点。
- en: The recursive structure of evaluate resembles the structure of the parser, and
    both mirror the structure of the language itself. It would also be possible to
    combine the parser and the evaluator into one function and evaluate during parsing,
    but splitting them up this way makes the program clearer and more flexible.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 求值的递归结构类似于解析器的结构，两者都反映了语言本身的结构。将解析器和求值器合并为一个函数并在解析过程中进行求值也是可能的，但这样拆分使程序更清晰、更灵活。
- en: This is really all that’s needed to interpret Egg. It’s that simple. But without
    defining a few special forms and adding some useful values to the environment,
    you can’t do much with this language yet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上就是解释Egg所需的一切。就是这么简单。但如果不定义一些特殊形式并向环境中添加一些有用的值，你在这个语言中也做不了多少。
- en: Special Forms
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊形式
- en: The specialForms object is used to define special syntax in Egg. It associates
    words with functions that evaluate such forms. It is currently empty. Let’s add
    if.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: specialForms对象用于在Egg中定义特殊语法。它将词与评估这些形式的函数关联。目前它是空的。让我们添加if。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Egg’s if construct expects exactly three arguments. It will evaluate the first,
    and if the result isn’t the value false, it will evaluate the second. Otherwise,
    the third gets evaluated. This if form is more similar to JavaScript’s ternary
    ?: operator than to JavaScript’s if. It is an expression, not a statement, and
    it produces a value—namely, the result of the second or third argument.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Egg的if构造期待恰好三个参数。它将评估第一个，如果结果不是值false，则将评估第二个。否则，评估第三个。这个if形式更类似于JavaScript的三元运算符?:而不是JavaScript的if。它是一个表达式，而不是语句，并且产生一个值——即第二或第三个参数的结果。
- en: Egg also differs from JavaScript in how it handles the condition value to if.
    It will treat only the value false as false, not things like zero or the empty
    string.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Egg 在处理 if 的条件值时也与 JavaScript 不同。它只会将值 false 视为 false，而不是像零或空字符串这样的东西。
- en: The reason we need to represent if as a special form rather than a regular function
    is that all arguments to functions are evaluated before the function is called,
    whereas if should evaluate only *either* its second or its third argument, depending
    on the value of the first.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将 if 表示为特殊形式而不是普通函数的原因是，所有函数的参数在调用函数之前都会被评估，而 if 应该只评估它的第二个或第三个参数，这取决于第一个参数的值。
- en: The while form is similar.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: while 形式类似。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Another basic building block is do, which executes all its arguments from top
    to bottom. Its value is the value produced by the last argument.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个基本构建块是 do，它从上到下执行所有参数。它的值是最后一个参数产生的值。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To be able to create bindings and give them new values, we also create a form
    called define. It expects a word as its first argument and an expression producing
    the value to assign to that word as its second argument. Since define, like everything,
    is an expression, it must return a value. We’ll make it return the value that
    was assigned (just like JavaScript’s = operator).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够创建绑定并给它们赋予新值，我们还创建了一个叫做 define 的形式。它的第一个参数期望一个单词，第二个参数期望一个产生赋值给该单词的表达式。由于
    define 和其他所有内容一样，是一个表达式，因此它必须返回一个值。我们将使它返回被赋予的值（就像 JavaScript 的 = 操作符）。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Environment
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境
- en: The scope accepted by evaluate is an object with properties whose names correspond
    to binding names and whose values correspond to the values those bindings are
    bound to. Let’s define an object to represent the global scope.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: evaluate 接受的作用域是一个对象，其中的属性名对应于绑定名称，而属性值对应于这些绑定所绑定的值。让我们定义一个对象来表示全局作用域。
- en: To be able to use the if construct we just defined, we must have access to Boolean
    values. Since there are only two Boolean values, we do not need special syntax
    for them. We simply bind two names to the values true and false and use them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用我们刚定义的 if 构造，我们必须能够访问布尔值。由于只有两个布尔值，我们不需要为它们提供特殊的语法。我们简单地将两个名称绑定到值 true
    和 false，并使用它们。
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can now evaluate a simple expression that negates a Boolean value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以评估一个简单的表达式，它对布尔值取反。
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To supply basic arithmetic and comparison operators, we will also add some function
    values to the scope. In the interest of keeping the code short, we’ll use Function
    to synthesize a bunch of operator functions in a loop instead of defining them
    individually.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供基本的算术和比较运算符，我们还会将一些函数值添加到作用域中。为了保持代码简洁，我们将使用 Function 在一个循环中合成一组运算符函数，而不是单独定义它们。
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It’s also useful to have a way to output values, so we’ll wrap console.log in
    a function and call it print.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 也很有用的是有一种输出值的方法，因此我们将 console.log 包裹在一个函数中并将其命名为 print。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That gives us enough elementary tools to write simple programs. The following
    function provides a convenient way to parse a program and run it in a fresh scope:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们足够的基本工具来编写简单的程序。下面的函数提供了一种方便的方式来解析程序并在新的作用域中运行它：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We’ll use object prototype chains to represent nested scopes so that the program
    can add bindings to its local scope without changing the top-level scope.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用对象原型链来表示嵌套作用域，以便程序可以向其局部作用域添加绑定，而不改变顶层作用域。
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is the program we’ve seen several times before that computes the sum of
    the numbers 1 to 10, expressed in Egg. It is clearly uglier than the equivalent
    JavaScript program—but not bad for a language implemented in fewer than 150 lines
    of code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前多次看到的程序，它计算从 1 到 10 的数字之和，用 Egg 表达。显然，它比等效的 JavaScript 程序更丑陋，但对于一个实现少于
    150 行代码的语言来说，这并不算坏。
- en: Functions
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: A programming language without functions is a poor programming language indeed.
    Fortunately, it isn’t hard to add a fun construct, which treats its last argument
    as the function’s body and uses all arguments before that as the names of the
    function’s parameters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 没有函数的编程语言确实是个糟糕的编程语言。幸运的是，添加一个函数构造并不困难，它将最后一个参数视为函数体，并使用之前的所有参数作为函数参数的名称。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Functions in Egg get their own local scope. The function produced by the fun
    form creates this local scope and adds the argument bindings to it. It then evaluates
    the function body in this scope and returns the result.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Egg 中的函数有自己的局部作用域。由 fun 形式产生的函数创建这个局部作用域，并将参数绑定添加到其中。然后，它在这个作用域中评估函数体并返回结果。
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Compilation
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译
- en: What we have built is an interpreter. During evaluation, it acts directly on
    the representation of the program produced by the parser.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建的是一个解释器。在评估过程中，它直接作用于解析器生成的程序表示。
- en: '*Compilation* is the process of adding another step between the parsing and
    the running of a program, which transforms the program into something that can
    be evaluated more efficiently by doing as much work as possible in advance. For
    example, in well-designed languages it is obvious, for each use of a binding,
    which binding is being referred to, without actually running the program. This
    can be used to avoid looking up the binding by name every time it is accessed,
    instead directly fetching it from some predetermined memory location.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译*是指在解析和运行程序之间增加另一步的过程，它将程序转换为可以更高效地评估的东西，尽可能多地提前完成工作。例如，在设计良好的语言中，每次使用绑定时，引用的绑定是显而易见的，而无需实际运行程序。这可以用来避免每次访问时通过名称查找绑定，而是直接从某个预定的内存位置获取。'
- en: Traditionally, compilation involves converting the program to machine code,
    the raw format that a computer’s processor can execute. But any process that converts
    a program to a different representation can be thought of as compilation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，编译涉及将程序转换为机器代码，这是计算机处理器可以执行的原始格式。但任何将程序转换为不同表示的过程都可以视为编译。
- en: It would be possible to write an alternative evaluation strategy for Egg, one
    that first converts the program to a JavaScript program, uses Function to invoke
    the JavaScript compiler on it, and runs the result. When done right, this would
    make Egg run very fast while still being quite simple to implement.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能为Egg编写一种替代评估策略，首先将程序转换为JavaScript程序，使用Function来调用JavaScript编译器，并运行结果。做到这一点的话，Egg将运行得非常快，同时实现起来也相当简单。
- en: If you are interested in this topic and willing to spend some time on it, I
    encourage you to try to implement such a compiler as an exercise.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个主题感兴趣并愿意花一些时间去研究，我鼓励你尝试实现一个这样的编译器作为练习。
- en: Cheating
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作弊
- en: When we defined if and while, you probably noticed that they were more or less
    trivial wrappers around JavaScript’s own if and while. Similarly, the values in
    Egg are just regular old JavaScript values. Bridging the gap to a more primitive
    system, such as the machine code the processor understands, takes more effort—but
    the way it works resembles what we are doing here.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义if和while时，你可能注意到它们更多的是围绕JavaScript自身的if和while的简单封装。类似地，Egg中的值只是常规的JavaScript值。将其桥接到更原始的系统，例如处理器所理解的机器代码，需要更多的努力，但其工作方式与我们在这里所做的相似。
- en: Though the toy language in this chapter doesn’t do anything that couldn’t be
    done better in JavaScript, there *are* situations where writing small languages
    helps get real work done.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章中的玩具语言在JavaScript中可以做得更好，但在某些情况下，编写小语言确实有助于完成实际工作。
- en: Such a language does not have to resemble a typical programming language. If
    JavaScript didn’t come equipped with regular expressions, for example, you could
    write your own parser and evaluator for regular expressions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语言不必类似于典型的编程语言。例如，如果JavaScript没有提供正则表达式，你可以为正则表达式编写自己的解析器和评估器。
- en: Or imagine you are building a program that makes it possible to quickly create
    parsers by providing a logical description of the language they need to parse.
    You could define a specific notation for that, and a compiler that compiles it
    to a parser program.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者想象你正在构建一个程序，使得通过提供语言的逻辑描述可以快速创建解析器。你可以为此定义一种特定的符号表示法，并编写一个将其编译为解析器程序的编译器。
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is what is usually called a *domain-specific language*, a language tailored
    to express a narrow domain of knowledge. Such a language can be more expressive
    than a general-purpose language because it is designed to describe exactly the
    things that need to be described in its domain and nothing else.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常被称为*领域特定语言*，是一种旨在表达狭窄知识领域的语言。这种语言比通用语言更具表现力，因为它专门设计用来准确描述该领域内需要描述的内容，而不是其他任何东西。
- en: Exercises
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '*Arrays*'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*数组*'
- en: 'Add support for arrays to Egg by adding the following three functions to the
    top scope: array(...values) to construct an array containing the argument values,
    length(array) to get an array’s length, and element(array, n) to fetch the *n*th
    element from an array.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向顶层作用域添加以下三个函数来为Egg添加数组支持：array(...values)用于构造一个包含参数值的数组，length(array)用于获取数组的长度，以及element(array,
    n)用于从数组中获取第*n*个元素。
- en: '*Closure*'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*闭包*'
- en: The way we have defined fun allows functions in Egg to reference the surrounding
    scope, allowing the function’s body to use local values that were visible at the
    time the function was defined, just like JavaScript functions do.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义函数的方式允许Egg中的函数引用周围的作用域，使得函数体可以使用在函数定义时可见的局部值，就像JavaScript函数一样。
- en: 'The following program illustrates this: function f returns a function that
    adds its argument to f’s argument, meaning that it needs access to the local scope
    inside f to be able to use binding a.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的程序说明了这一点：函数f返回一个函数，该函数将其参数与f的参数相加，这意味着它需要访问f内部的局部作用域，以便能够使用绑定a。
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Go back to the definition of the fun form and explain which mechanism causes
    this to work.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到fun形式的定义，解释是什么机制使其起作用。
- en: '*Comments*'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*注释*'
- en: It would be nice if we could write comments in Egg. For example, whenever we
    find a hash sign (#), we could treat the rest of the line as a comment and ignore
    it, similar to // in JavaScript.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能在Egg中写注释，那就太好了。例如，每当我们发现一个井号（#）时，可以将该行的其余部分视为注释并忽略它，类似于JavaScript中的//。
- en: We do not have to make any big changes to the parser to support this. We can
    simply change skipSpace to skip comments as if they are whitespace so that all
    the points where skipSpace is called will now also skip comments. Make this change.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要对解析器进行任何重大修改来支持这个功能。我们只需将skipSpace更改为像跳过空格一样跳过注释，这样所有调用skipSpace的地方现在也将跳过注释。进行此更改。
- en: '*Fixing Scope*'
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*修复作用域*'
- en: Currently, the only way to assign a binding a value is define. This construct
    acts as a way both to define new bindings and to give existing ones a new value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，赋予绑定一个值的唯一方法是定义。这个构造既可以定义新的绑定，也可以为现有绑定赋予一个新值。
- en: This ambiguity causes a problem. When you try to give a nonlocal binding a new
    value, you will end up defining a local one with the same name instead. Some languages
    work like this by design, but I’ve always found it an awkward way to handle scope.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模糊性造成了问题。当你尝试给非局部绑定赋予一个新值时，最终会定义一个具有相同名称的局部绑定。一些语言本身就是这样设计的，但我总觉得这种处理作用域的方式很尴尬。
- en: Add a special form set, similar to define, which gives a binding a new value,
    updating the binding in an outer scope if it doesn’t already exist in the inner
    scope. If the binding is not defined at all, throw a ReferenceError (another standard
    error type).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个特殊的形式集，类似于定义，赋予绑定一个新值，如果在内部作用域中不存在该绑定，则更新外部作用域中的绑定。如果绑定根本未定义，则抛出ReferenceError（另一种标准错误类型）。
- en: The technique of representing scopes as simple objects, which has made things
    convenient so far, will get in your way a little at this point. You might want
    to use the Object.getPrototypeOf function, which returns the prototype of an object.
    Also remember that you can use Object.hasOwn to find out if a given object has
    a property.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将作用域表示为简单对象的技术，虽然到目前为止让事情变得方便，但此时会有点妨碍你。你可能想使用Object.getPrototypeOf函数，它返回一个对象的原型。同时记得可以使用Object.hasOwn来判断给定对象是否具有某个属性。
