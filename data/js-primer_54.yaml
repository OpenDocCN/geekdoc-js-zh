- en: 实现更新和删除 Todo 项目
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现更新和删除 Todo 项目
- en: 原文：[`jsprimer.net/use-case/todoapp/update-delete/`](https://jsprimer.net/use-case/todoapp/update-delete/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jsprimer.net/use-case/todoapp/update-delete/`](https://jsprimer.net/use-case/todoapp/update-delete/)
- en: 在本节中，我们将实现 Todo 应用的剩余功能，即“更新 Todo 项目”和“删除 Todo 项目”。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现 Todo 应用的剩余功能，即“更新 Todo 项目”和“删除 Todo 项目”。
- en: “更新 Todo 项目”是指单击复选框，如果未完成，则标记为已完成，反之亦然。 它为每个 Todo 项目保留了一个完成状态，并管理了每个 Todo 的进度。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “更新 Todo 项目”是指单击复选框，如果未完成，则标记为已完成，反之亦然。 它为每个 Todo 项目保留了一个完成状态，并管理了每个 Todo 的进度。
- en: 另一方面，“删除 Todo 项目”是指单击按钮后删除 Todo 项目的功能。 可用于删除不需要的 Todo 项目或清除已完成的 Todo 项目等功能。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，“删除 Todo 项目”是指单击按钮后删除 Todo 项目的功能。 可用于删除不需要的 Todo 项目或清除已完成的 Todo 项目等功能。
- en: 首先实现“更新 Todo 项目”，然后再实现“删除 Todo 项目”。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先实现“更新 Todo 项目”，然后再实现“删除 Todo 项目”。
- en: '*更新 Todo 项目*'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*更新 Todo 项目*'
- en: '*目前，Todo 项目的完成状态尚未显示。 因此，首先需要显示 Todo 项目是否已完成。 使用 HTML 的[`<input type="checkbox">`](https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/checkbox)元素显示复选框，并表示每个
    Todo 项目的完成状态。'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*目前，Todo 项目的完成状态尚未显示。 因此，首先需要显示 Todo 项目是否已完成。 使用 HTML 的[`<input type="checkbox">`](https://developer.mozilla.org/ja/docs/Web/HTML/Element/Input/checkbox)元素显示复选框，并表示每个
    Todo 项目的完成状态。'
- en: '`<input type="checkbox">`如果没有`checked`属性，则复选框处于未选中状态。 另一方面，如果有`checked`属性，比如`<input
    type="checkbox" checked>`，则复选框处于选中状态。'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`如果没有`checked`属性，则复选框处于未选中状态。 另一方面，如果有`checked`属性，比如`<input
    type="checkbox" checked>`，则复选框处于选中状态。'
- en: '![input element checked 属性的区别](img/965424f11cf84356abd4925e6a7ab65c.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![input element checked 属性的区别](img/965424f11cf84356abd4925e6a7ab65c.png)'
- en: 首先，请确保在`src/App.js`中，将 TodoListModel 的`onChange`方法注册的监听函数内部修改，以显示复选框。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保在`src/App.js`中，将 TodoListModel 的`onChange`方法注册的监听函数内部修改，以显示复选框。
- en: 在代表 Todo 项目的`<li>`元素中添加`<input>`元素，以显示复选框。 为复选框`<input>`元素添加`class`属性作为样式`checkbox`。
    同时，如果已完成，则使用`<s>`元素显示删除线。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在代表 Todo 项目的`<li>`元素中添加`<input>`元素，以显示复选框。 为复选框`<input>`元素添加`class`属性作为样式`checkbox`。
    同时，如果已完成，则使用`<s>`元素显示删除线。
- en: 从`src/App.js`中提取更改内容。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/App.js`中提取更改内容。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`<input type="checkbox">`元素被点击时，复选框的显示会切换。 但是，模型`TodoItemModel`的`completed`属性状态不会自动切换。
    这会导致显示状态和模型状态不一致的问题。'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`元素被点击时，复选框的显示会切换。 但是，模型`TodoItemModel`的`completed`属性状态不会自动切换。
    这会导致显示状态和模型状态不一致的问题。'
- en: 您可以通过尝试以下操作来确认此问题。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过尝试以下操作来确认此问题。
- en: 添加 Todo 项目
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Todo 项目
- en: 给 Todo 项目的复选框打勾
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给 Todo 项目的复选框打勾
- en: 添加另一个新的 Todo 项目
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个新的 Todo 项目
- en: 所有复选框的选中状态都将被重置
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有复选框的选中状态都将被重置
- en: 为了避免这个问题，当`<input type="checkbox">`元素被选中时，需要更新模型的状态。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，当`<input type="checkbox">`元素被选中时，需要更新模型的状态。
- en: '`<input type="checkbox">`元素在被选中时会触发`change`事件。 监听这个`change`事件，就可以更新 TodoItem
    模型的状态，从而同步模型和显示状态。'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="checkbox">`元素在被选中时会触发`change`事件。 监听这个`change`事件，就可以更新 TodoItem
    模型的状态，从而同步模型和显示状态。'
- en: 可以如下所示监听`input`元素分派的`change`事件。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以如下所示监听`input`元素分派的`change`事件。
- en: 首先，使用`querySelector`方法在`todoItemElement`元素下查找`input`元素。 以前，我们使用`document.querySelector`在整个文档中查找与
    CSS 选择器匹配的元素。 使用`todoItemElement.querySelector`方法，我们可以仅在`todoItemElement`下查找元素。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用`querySelector`方法在`todoItemElement`元素下查找`input`元素。 以前，我们使用`document.querySelector`在整个文档中查找与
    CSS 选择器匹配的元素。 使用`todoItemElement.querySelector`方法，我们可以仅在`todoItemElement`下查找元素。
- en: 然后，可以为找到的`input`元素注册一个回调函数，以便在`change`事件发生时调用。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以为找到的`input`元素注册一个回调函数，以便在`change`事件发生时调用。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 总结到目前为止，可以通过以下两个步骤实现更新 Todo 项目。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 总结到目前为止，可以通过以下两个步骤实现更新 Todo 项目。
- en: 向`TodoListModel`添加更新指定的 Todo 项目的处理
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`TodoListModel`添加更新指定的 Todo 项目的处理
- en: 当复选框的`change`事件发生时，更新模型的状态
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当复选框的`change`事件发生时，更新模型的状态
- en: 现在，让我们开始在`todoapp`项目中实现 Todo 项目的更新。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始在`todoapp`项目中实现 Todo 项目的更新。
- en: '*向`TodoListModel`添加更新指定的 Todo 项目的处理*'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*向`TodoListModel`添加更新指定的 Todo 项目的处理*'
- en: '*首先，在`TodoListModel`中添加一个名为`updateTodo`的方法来更新指定的 Todo 项目。 TodoListModel 的`updateTodo`方法用于更新与指定
    id 匹配的 Todo 项目的完成状态（`completed`属性）。'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，在`TodoListModel`中添加一个名为`updateTodo`的方法来更新指定的 Todo 项目。 TodoListModel 的`updateTodo`方法用于更新与指定
    id 匹配的 Todo 项目的完成状态（`completed`属性）。'
- en: 从`src/model/TodoListModel.js`中提取更改内容。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/model/TodoListModel.js`中提取更改内容。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*当复选框的`change`事件发生时，更新 Todo 项目的完成状态*'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*当复选框的`change`事件发生时，更新 Todo 项目的完成状态*'
- en: '*接下来，在`input`元素的`change`事件的监听函数中，更新 Todo 项目的完成状态。'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来，在`input`元素的`change`事件的监听函数中，更新 Todo 项目的完成状态。'
- en: 在`src/App.js`中，将 TodoListModel 的`onChange`方法注册的监听函数内部修改如下。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，将 TodoListModel 的`onChange`方法注册的监听函数内部修改如下。
- en: 在`App.js`中，作为`todoItemElement`的子元素添加一个带有`checkbox`类名的`input`元素。 当此`input`元素的`change`事件发生时，调用
    TodoListModel 的`updateTodo`方法。 每次切换时都会调用，因此将当前状态的反转（切换）传递给`completed`。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中，作为`todoItemElement`的子元素添加一个带有`checkbox`类名的`input`元素。 当此`input`元素的`change`事件发生时，调用
    TodoListModel 的`updateTodo`方法。 每次切换时都会调用，因此将当前状态的反转（切换）传递给`completed`。
- en: 从`src/App.js`中提取更改内容。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从`src/App.js`中提取更改内容。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 在 TodoListModel 的`updateTodo`方法内部，通过`emitChange`方法通知`TodoListModel`的更改。 这将触发
    TodoListModel 的`onChange`事件注册的监听器，并更新显示。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TodoListModel 的`updateTodo`方法内部，通过`emitChange`方法通知`TodoListModel`的更改。 这将触发
    TodoListModel 的`onChange`事件注册的监听器，并更新显示。
- en: 这样显示和模型就同步了，实现了“Todo 项目的更新处理”。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这样显示和模型就同步了，实现了“Todo 项目的更新处理”。
- en: '*删除功能*'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*删除功能*'
- en: '*接下来将实现“Todo 项目的删除功能”。'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来将实现“Todo 项目的删除功能”。'
- en: 基本流程与“Todo 项目的更新功能”相同。 在`TodoListModel`中添加删除 Todo 项目的处理过程。 然后在显示中添加删除按钮，并在单击删除按钮时调用删除指定
    Todo 项目的处理过程。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 基本流程与“Todo 项目的更新功能”相同。 在`TodoListModel`中添加删除 Todo 项目的处理过程。 然后在显示中添加删除按钮，并在单击删除按钮时调用删除指定
    Todo 项目的处理过程。
- en: '*添加删除指定 Todo 项目的处理过程到`TodoListModel`*'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*添加删除指定 Todo 项目的处理过程到`TodoListModel`*'
- en: '*首先，将删除指定 Todo 项目的`deleteTodo`方法添加到`TodoListModel`中。 `TodoListModel`的`deleteTodo`方法将删除与指定
    id 匹配的 Todo 项目。'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*首先，将删除指定 Todo 项目的`deleteTodo`方法添加到`TodoListModel`中。 `TodoListModel`的`deleteTodo`方法将删除与指定
    id 匹配的 Todo 项目。'
- en: 通过从名为`items`的 Todo 项目数组中删除与指定 id 匹配的 Todo 项目来实现删除。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从名为`items`的 Todo 项目数组中删除与指定 id 匹配的 Todo 项目来实现删除。
- en: 从 src/model/TodoListModel.js 中提取更改点
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从 src/model/TodoListModel.js 中提取更改点
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*当点击删除按钮时，删除 Todo 项目*'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*当点击删除按钮时，删除 Todo 项目*'
- en: '*接下来添加删除按钮，并在单击按钮时调用删除 Todo 项目的处理过程(`deleteTodo`)的实现添加到`App.js`中。'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来添加删除按钮，并在单击按钮时调用删除 Todo 项目的处理过程(`deleteTodo`)的实现添加到`App.js`中。'
- en: 在`src/App.js`中，将`TodoListModel`的`onChange`方法注册的监听函数内部修改为以下内容。 将`button`元素添加为`todoItemElement`的子元素，并为其添加名为`delete`的类名。
    当单击此元素时（`click`），使用`addEventListener`方法注册调用 TodoListModel 的`deleteTodo`方法，并删除指定
    id 的 Todo 项目。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/App.js`中，将`TodoListModel`的`onChange`方法注册的监听函数内部修改为以下内容。 将`button`元素添加为`todoItemElement`的子元素，并为其添加名为`delete`的类名。
    当单击此元素时（`click`），使用`addEventListener`方法注册调用 TodoListModel 的`deleteTodo`方法，并删除指定
    id 的 Todo 项目。
- en: 从 src/App.js 中提取更改点
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从 src/App.js 中提取更改点
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 在`TodoListModel`的`deleteTodo`方法中，通过`emitChange`方法通知`TodoListModel`的更改。 这样，显示将与`TodoListModel`同步更新，从而可以从显示中删除
    Todo 项目。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TodoListModel`的`deleteTodo`方法中，通过`emitChange`方法通知`TodoListModel`的更改。 这样，显示将与`TodoListModel`同步更新，从而可以从显示中删除
    Todo 项目。
- en: 这样就实现了“Todo 项目的删除功能”。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就实现了“Todo 项目的删除功能”。
- en: '*本节的检查清单*'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*本节的检查清单*'
- en: '**   添加了一个用于表示 Todo 项目完成状态的`<input type="checkbox">`。'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**   添加了一个用于表示 Todo 项目完成状态的`<input type="checkbox">`。'
- en: 在复选框更新时的`change`事件监听函数中更新了 Todo 项目。
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在复选框更新时的`change`事件监听函数中更新了 Todo 项目。
- en: 添加了一个用于删除 Todo 项目的按钮，即`<button class="delete">x</button>`。
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个用于删除 Todo 项目的按钮，即`<button class="delete">x</button>`。
- en: 在删除按钮的`click`事件监听函数中删除了 Todo 项目。
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除按钮的`click`事件监听函数中删除了 Todo 项目。
- en: Todo 项目的添加、更新、删除功能已经确认可正常运作。
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todo 项目的添加、更新、删除功能已经确认可正常运作。
- en: 通过这一节，已经实现了 Todo 应用程序所需的要求。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一节，已经实现了 Todo 应用程序所需的要求。
- en: 可以添加 Todo 项目
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以添加 Todo 项目
- en: 可以更新 Todo 项目的完成状态
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以更新 Todo 项目的完成状态
- en: 可以删除 Todo 项目
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以删除 Todo 项目
- en: 您可以在以下 URL 中查看到目前的 Todo 应用程序。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下 URL 中查看到目前的 Todo 应用程序。
- en: '[`jsprimer.net/use-case/todoapp/update-delete/delete-feature/`](https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`jsprimer.net/use-case/todoapp/update-delete/delete-feature/`](https://jsprimer.net/use-case/todoapp/update-delete/delete-feature/)'
- en: 在最后一节中，我们将看到如何对`App.js`进行重构，以便持续开发可持续的应用程序。*******
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们将看到如何对`App.js`进行重构，以便持续开发可持续的应用程序。*******
