- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '7'
- en: 'PROJECT: A ROBOT'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：一个机器人
- en: In “project” chapters, I’ll stop pummeling you with new theory for a brief moment,
    and instead we’ll work through a program together. Theory is necessary to learn
    to program, but reading and understanding actual programs is just as important.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在“项目”章节中，我会暂时停止向你灌输新的理论，而是我们将一起完成一个程序。理论对于学习编程是必要的，但阅读和理解实际程序同样重要。
- en: Our project in this chapter is to build an automaton, a little program that
    performs a task in a virtual world. Our automaton will be a mail-delivery robot
    picking up and dropping off parcels.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目是构建一个自动机，一个在虚拟世界中执行任务的小程序。我们的自动机会是一个邮件投递机器人，负责拾取和投递包裹。
- en: Meadowfield
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Meadowfield
- en: 'The village of Meadowfield isn’t very big. It consists of 11 places with 14
    roads between them. It can be described with this array of roads:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Meadowfield 村不大。它由11个地点和14条道路组成。可以用以下道路数组进行描述：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Image](../images/f0116-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0116-01.jpg)'
- en: The network of roads in the village forms a *graph*. A graph is a collection
    of points (places in the village) with lines between them (roads). This graph
    will be the world that our robot moves through.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 村庄中的道路网络形成一个*图*。图是一个点（村庄中的地点）和它们之间的线（道路）的集合。这个图将是我们的机器人移动的世界。
- en: The array of strings isn’t very easy to work with. What we’re interested in
    is the destinations that we can reach from a given place. Let’s convert the list
    of roads to a data structure that, for each place, tells us what can be reached
    from there.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数组的处理并不容易。我们感兴趣的是从给定地点可以到达的目的地。让我们将道路列表转换为一个数据结构，该结构为每个地点提供可以从那里到达的地点。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Given an array of edges, buildGraph creates a map object that, for each node,
    stores an array of connected nodes. It uses the split method to go from the road
    strings—which have the form Start-End—to two-element arrays containing the start
    and end as separate strings.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一组边，buildGraph 创建一个地图对象，为每个节点存储一个连接节点的数组。它使用 split 方法将道路字符串（形式为 Start-End）转换为包含起始和结束的两个元素数组。
- en: The Task
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Our robot will be moving around the village. There are parcels in various places,
    each addressed to some other place. The robot picks up parcels when it comes across
    them and delivers them when it arrives at their destinations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器人将在村庄中移动。各处有包裹，每个包裹都寄往其他地方。当机器人遇到包裹时，它会拾取并在到达目的地时投递。
- en: The automaton must decide, at each point, where to go next. It has finished
    its task when all parcels have been delivered.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自动机必须在每个时刻决定下一步该去哪里。当所有包裹都送达后，它的任务就完成了。
- en: To be able to simulate this process, we must define a virtual world that can
    describe it. This model tells us where the robot is and where the parcels are.
    When the robot has decided to move somewhere, we need to update the model to reflect
    the new situation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够模拟这个过程，我们必须定义一个能够描述它的虚拟世界。该模型告诉我们机器人在哪里，以及包裹在哪里。当机器人决定移动时，我们需要更新模型以反映新情况。
- en: 'If you’re thinking in terms of object-oriented programming, your first impulse
    might be to start defining objects for the various elements in the world: a class
    for the robot, one for a parcel, maybe one for places. These could then hold properties
    that describe their current state, such as the pile of parcels at a location,
    which we could change when updating the world.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在考虑面向对象编程，你的第一反应可能是为世界中的各种元素定义对象：为机器人定义一个类，为包裹定义一个类，可能还有一个为地点定义的类。这样可以持有描述其当前状态的属性，比如某个地点的包裹堆，这可以在更新世界时进行更改。
- en: This is wrong. At least, it usually is. The fact that something sounds like
    an object does not automatically mean that it should be an object in your program.
    Reflexively writing classes for every concept in your application tends to leave
    you with a collection of interconnected objects that each have their own internal,
    changing state. Such programs are often hard to understand and thus easy to break.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误的。至少，通常是如此。某物听起来像对象并不意味着它应该在你的程序中成为对象。反射性地为应用程序中的每个概念编写类，往往会让你拥有一组相互关联的对象，每个对象都有其内部的、变化的状态。这类程序通常难以理解，因此容易出错。
- en: Instead, let’s condense the village’s state down to the minimal set of values
    that define it. There’s the robot’s current location and the collection of undelivered
    parcels, each of which has a current location and a destination address. That’s
    it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们将村庄的状态简化为定义它的最小值集合。这里包括机器人的当前位置和未投递包裹的集合，每个包裹都有当前位置和目的地地址。就这些。
- en: While we’re at it, let’s make it so that we don’t *change* this state when the
    robot moves but rather compute a *new* state for the situation after the move.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，让我们确保在机器人移动时不*改变*这个状态，而是为移动后的情况计算一个*新*状态。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The move method is where the action happens. It first checks whether there is
    a road going from the current place to the destination, and if not, it returns
    the old state, since this is not a valid move.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 移动方法是动作发生的地方。它首先检查从当前位置到目的地是否有道路，如果没有，则返回旧状态，因为这不是一个有效的移动。
- en: Next, the method creates a new state with the destination as the robot’s new
    place. It also needs to create a new set of parcels—parcels that the robot is
    carrying (that are at the robot’s current place) need to be moved along to the
    new place. And parcels that are addressed to the new place need to be delivered—that
    is, they need to be removed from the set of undelivered parcels. The call to map
    takes care of the moving, and the call to filter does the delivering.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，该方法创建一个新的状态，将目的地设为机器人的新位置。它还需要创建一组新的包裹——机器人携带的（位于机器人当前位置的）包裹需要移动到新位置。而寄往新位置的包裹需要被投递——也就是说，它们需要从未投递包裹的集合中移除。调用
    map 处理移动，调用 filter 处理投递。
- en: Parcel objects aren’t changed when they are moved but re-created. The move method
    gives us a new village state but leaves the old one entirely intact.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 包裹对象在移动时不会被改变，而是被重新创建。移动方法给我们一个新的村庄状态，但完全保留了旧状态。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The move causes the parcel to be delivered, which is reflected in the next state.
    But the initial state still describes the situation where the robot is at the
    post office and the parcel is undelivered.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个移动使得包裹被投递，这在下一个状态中得以反映。但初始状态仍然描述了机器人位于邮局且包裹未投递的情况。
- en: Persistent Data
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持久数据
- en: Data structures that don’t change are called *immutable* or *persistent*. They
    behave a lot like strings and numbers in that they are who they are and stay that
    way, rather than containing different things at different times.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不会改变的数据结构称为*不可变*或*持久*。它们的行为与字符串和数字很相似，即它们始终保持原样，而不是在不同时间包含不同的内容。
- en: In JavaScript, just about everything *can* be changed, so working with values
    that are supposed to be persistent requires some restraint. There is a function
    called Object.freeze that changes an object so that writing to its properties
    is ignored. You could use that to make sure your objects aren’t changed, if you
    want to be careful. Freezing does require the computer to do some extra work,
    and having updates ignored is just about as likely to confuse someone as having
    them do the wrong thing. I usually prefer to just tell people that a given object
    shouldn’t be messed with and hope they remember it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，几乎所有东西都*可以*被改变，因此处理应保持不变的值需要一些克制。有一个名为 Object.freeze 的函数，可以改变一个对象，使对其属性的写入被忽略。如果你想小心的话，可以使用它来确保你的对象不会被改变。冻结确实需要计算机进行一些额外的工作，而被忽视的更新与执行错误的操作几乎同样可能会让人困惑。我通常更喜欢直接告诉人们某个对象不应该被修改，并希望他们能记住。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Why am I going out of my way to not change objects when the language is obviously
    expecting me to? Because it helps me understand my programs. This is about complexity
    management again. When the objects in my system are fixed, stable things, I can
    consider operations on them in isolation— moving to Alice’s house from a given
    start state always produces the same new state. When objects change over time,
    that adds a whole new dimension of complexity to this kind of reasoning.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我为什么要特别避免改变对象，尽管语言显然期待我这么做？因为这有助于我理解我的程序。这再次涉及复杂性管理。当我系统中的对象是固定、稳定的事物时，我可以孤立地考虑对它们的操作——从给定的起始状态移动到爱丽丝的家总是产生相同的新状态。当对象随时间变化时，这会给这种推理增加全新的复杂性维度。
- en: For a small system like the one we are building in this chapter, we could handle
    that bit of extra complexity. But the most important limit on what kind of systems
    we can build is how much we can understand. Anything that makes your code easier
    to understand makes it possible to build a more ambitious system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在本章构建的小型系统来说，我们可以处理这点额外的复杂性。但限制我们能构建什么样系统的最重要因素是我们能理解多少。任何使你的代码更容易理解的东西，都能让你构建出更具雄心的系统。
- en: Unfortunately, although understanding a system built on persistent data structures
    is easier, *designing* one, especially when your programming language isn’t helping,
    can be a little harder. We’ll look for opportunities to use persistent data structures
    in this book, but we’ll also be using changeable ones.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，尽管理解建立在持久数据结构上的系统更容易，*设计*一个系统，尤其是在你的编程语言没有帮助的情况下，可能会更困难。我们将在本书中寻找使用持久数据结构的机会，但我们也会使用可变数据结构。
- en: Simulation
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟
- en: A delivery robot looks at the world and decides in which direction it wants
    to move. So we could say that a robot is a function that takes a VillageState
    object and returns the name of a nearby place.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 送货机器人观察世界并决定它想朝哪个方向移动。因此，我们可以说，机器人是一个接受VillageState对象并返回附近地点名称的函数。
- en: Because we want robots to be able to remember things so they can make and execute
    plans, we also pass them their memory and allow them to return a new memory. Thus,
    the thing a robot returns is an object containing both the direction it wants
    to move in and a memory value that will be given back to it the next time it is
    called.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们希望机器人能够记住事物，以便它们可以制定和执行计划，所以我们也将它们的记忆传递给它们，并允许它们返回一个新的记忆。因此，机器人返回的东西是一个包含它想要移动的方向和一个记忆值的对象，该值将在下次调用时返回给它。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Consider what a robot has to do to “solve” a given state. It must pick up all
    parcels by visiting every location that has a parcel and deliver them by visiting
    every location to which a parcel is addressed, but only after picking up the parcel.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下机器人需要做些什么才能“解决”给定的状态。它必须通过访问每个有包裹的地点来收集所有包裹，然后通过访问每个包裹的地址来送递它们，但只能在收集完包裹后进行送递。
- en: What is the dumbest strategy that could possibly work? The robot could just
    walk in a random direction every turn. That means, with great likelihood, it will
    eventually run into all parcels and then also at some point reach the place where
    they should be delivered.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是可能有效的最笨拙策略？机器人可以在每次转弯时随机走一个方向。这意味着，它很可能最终会遇到所有的包裹，并在某个时刻到达包裹应该被送达的地方。
- en: 'Here’s what that could look like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是这样的：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Remember that Math.random() returns a number between 0 and 1—but always below
    1\. Multiplying such a number by the length of an array and then applying Math.floor
    to it gives us a random index for the array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Math.random()返回一个介于0和1之间的数字——但总是小于1。将这样的数字乘以数组的长度，然后应用Math.floor，便可以得到数组的随机索引。
- en: Since this robot does not need to remember anything, it ignores its second argument
    (remember that JavaScript functions can be called with extra arguments without
    ill effects) and omits the memory property in its returned object.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个机器人不需要记住任何东西，它忽略了第二个参数（记住，JavaScript函数可以在没有负面影响的情况下使用额外参数调用），并在返回的对象中省略了记忆属性。
- en: To put this sophisticated robot to work, we’ll first need a way to create a
    new state with some parcels. A static method (written here by directly adding
    a property to the constructor) is a good place to put that functionality.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要让这个复杂的机器人开始工作，我们首先需要一种方法来创建一个带有一些包裹的新状态。一个静态方法（在这里通过直接向构造函数添加属性来编写）是放置该功能的好地方。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We don’t want any parcels to be sent from the same place that they are addressed
    to. For this reason, the do loop keeps picking new places when it gets one that’s
    equal to the address.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望包裹从它们被寄往的地方发送出去。因此，当获取到一个与地址相等的地方时，do循环会持续选择新的地点。
- en: Let’s start up a virtual world.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个虚拟世界。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It takes the robot a lot of turns to deliver the parcels because it isn’t planning
    ahead very well. We’ll address that soon.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人送递包裹需要经过很多次转弯，因为它的规划不够充分。我们会很快解决这个问题。
- en: The Mail Truck’s Route
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邮件卡车的路线
- en: 'We should be able to do a lot better than the random robot. An easy improvement
    would be to take a hint from the way real-world mail delivery works. If we find
    a route that passes all places in the village, the robot could run that route
    twice, at which point it is guaranteed to be done. Here is one such route (starting
    from the post office):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够比随机机器人做得更好。一个简单的改进是借鉴现实世界邮递的工作方式。如果我们找到一条经过村庄所有地点的路线，机器人可以沿着这条路线运行两次，这样它就一定能完成任务。这是一条这样的路线（从邮局出发）：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To implement the route-following robot, we’ll need to make use of robot memory.
    The robot keeps the rest of its route in its memory and drops the first element
    every turn.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现跟随路线的机器人，我们需要利用机器人的记忆。机器人将其路线的其余部分保存在记忆中，并在每次转弯时丢弃第一个元素。
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This robot is a lot faster already. It’ll take a maximum of 26 turns (twice
    the 13-step route) but usually less.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人已经快得多。它最多会经过26次转弯（两次13步的路线），但通常会更少。
- en: Pathfinding
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻路
- en: Still, I wouldn’t really call blindly following a fixed route intelligent behavior.
    The robot could work more efficiently if it adjusted its behavior to the actual
    work that needs to be done.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我并不认为盲目跟随固定路线是一种智能行为。如果机器人能根据实际需要做出的工作来调整自己的行为，它的工作效率将会更高。
- en: To do that, it has to be able to deliberately move toward a given parcel or
    toward the location where a parcel has to be delivered. Doing that, even when
    the goal is more than one move away, will require some kind of route-finding function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，它必须能够有意识地朝着特定的包裹或需要投递包裹的地点移动。即使目标距离超过一步，这样做也需要某种寻路功能。
- en: The problem of finding a route through a graph is a typical *search problem*.
    We can tell whether a given solution (a route) is valid, but we can’t directly
    compute the solution the way we could for 2 + 2\. Instead, we have to keep creating
    potential solutions until we find one that works.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过图找到一条路线的问题是一个典型的 *搜索问题*。我们可以判断给定的解决方案（路线）是否有效，但我们不能像计算 2 + 2 那样直接计算出解决方案。相反，我们必须不断创建潜在的解决方案，直到找到一个有效的。
- en: The number of possible routes through a graph is infinite. But when searching
    for a route from *A* to *B*, we are interested only in the ones that start at
    *A*. We also don’t care about routes that visit the same place twice— those are
    definitely not the most efficient route anywhere. So that cuts down on the number
    of routes that the route finder has to consider.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过图的可能路线是无限的。但在从 *A* 到 *B* 寻找路线时，我们只关注从 *A* 开始的路线。我们也不关心那些访问同一地点两次的路线——因为那些绝对不是任何地方的最高效路线。这就减少了寻路器需要考虑的路线数量。
- en: In fact, since we are mostly interested in the *shortest* route, we want to
    make sure we look at short routes before we look at longer ones. A good approach
    would be to “grow” routes from the starting point, exploring every reachable place
    that hasn’t been visited yet until a route reaches the goal. That way, we’ll explore
    only routes that are potentially interesting, and we know that the first route
    we find is the shortest route (or one of the shortest routes, if there are more
    than one).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，由于我们主要关注 *最短* 路线，我们希望确保先查看短路线，再查看较长的路线。一个好的方法是“从起始点生长”路线，探索每一个尚未访问的可达地点，直到找到到达目标的路线。这样，我们只会探索那些潜在有趣的路线，而且我们知道找到的第一条路线是最短的路线（如果有多条路线，它就是其中之一）。
- en: 'Here is a function that does this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个实现这个功能的函数：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The exploring has to be done in the right order—the places that were reached
    first have to be explored first. We can’t immediately explore a place as soon
    as we reach it because that would mean places reached *from there* would also
    be explored immediately, and so on, even though there may be other, shorter paths
    that haven’t yet been explored.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 探索必须按正确的顺序进行——首先到达的地方必须首先被探索。我们不能在到达一个地方后立即探索，因为那意味着从 *那里* 到达的地方也会立即被探索，依此类推，尽管可能还有其他尚未探索的更短路径。
- en: Therefore, the function keeps a *work list*. This is an array of places that
    should be explored next, along with the route that got us there. It starts with
    just the start position and an empty route.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，该函数保持一个 *工作列表*。这是一个包含接下来应探索地点的数组，以及到达那里的路线。它从起始位置和一个空路线开始。
- en: The search then operates by taking the next item in the list and exploring that,
    which means it looks at all roads going from that place. If one of them is the
    goal, a finished route can be returned. Otherwise, if we haven’t looked at this
    place before, a new item is added to the list. If we have looked at it before,
    since we are looking at short routes first, we’ve found either a longer route
    to that place or one precisely as long as the existing one, and we don’t need
    to explore it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索过程通过取出列表中的下一个项目并进行探索来进行，这意味着它查看从该地点出发的所有道路。如果其中一条是目标，则可以返回一条完成的路线。否则，如果我们之前没有查看过这个地点，就会将一个新项目添加到列表中。如果我们之前查看过，由于我们优先查看短路线，我们要么找到了一条更长的路线，要么找到了一条正好和现有路线一样长的路线，因此我们不需要再进行探索。
- en: You can visualize this as a web of known routes crawling out from the start
    location, growing evenly on all sides (but never tangling back into itself). As
    soon as the first thread reaches the goal location, that thread is traced back
    to the start, giving us our route.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其可视化为从起始位置爬出的已知路线网络，均匀向各侧扩展（但绝不会回头缠绕在一起）。一旦第一条线程到达目标位置，该线程就会被追踪回起点，从而给我们提供路线。
- en: Our code doesn’t handle the situation where there are no more work items on
    the work list because we know that our graph is *connected*, meaning that every
    location can be reached from all other locations. We’ll always be able to find
    a route between two points, and the search can’t fail.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码没有处理工作列表上没有更多工作项的情况，因为我们知道我们的图是*连通的*，这意味着每个位置都可以从所有其他位置到达。我们总是能够在两点之间找到一条路线，搜索不会失败。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This robot uses its memory value as a list of directions to move in, just like
    the route-following robot. Whenever that list is empty, it has to figure out what
    to do next. It takes the first undelivered parcel in the set and, if that parcel
    hasn’t been picked up yet, plots a route toward it. If the parcel *has* been picked
    up, it still needs to be delivered, so the robot creates a route toward the delivery
    address instead.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人使用它的内存值作为移动方向的列表，就像跟踪路线的机器人一样。每当这个列表为空时，它必须找出接下来该做什么。它取出未交付包裹中的第一个，如果那个包裹还没有被取走，就为其规划一条路线。如果包裹*已经*被取走，它仍然需要被交付，因此机器人会创建一条前往交付地址的路线。
- en: This robot usually finishes the task of delivering 5 parcels in about 16 turns.
    That’s slightly better than routeRobot but still definitely not optimal. We’ll
    continue refining it in the exercises.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人通常在大约 16 次回合内完成交付 5 个包裹的任务。这比 routeRobot 略好，但仍然显然不是最优的。我们将在接下来的练习中继续改进它。
- en: Exercises
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '*Measuring a Robot*'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*测量机器人*'
- en: It’s hard to objectively compare robots by just letting them solve a few scenarios.
    Maybe one robot just happened to get easier tasks or the kind of tasks that it
    is good at, whereas the other didn’t.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅让机器人解决几个场景很难客观比较它们。也许某个机器人碰巧得到了一些较简单的任务或它擅长的任务，而另一个则没有。
- en: Write a function compareRobots that takes two robots (and their starting memory).
    It should generate 100 tasks and let both of the robots solve each of these tasks.
    When done, it should output the average number of steps each robot took per task.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 compareRobots 函数，接受两个机器人（及其初始内存）。它应该生成 100 个任务，并让这两个机器人解决每一个任务。完成后，它应输出每个机器人每个任务所用的平均步骤数。
- en: For the sake of fairness, make sure you give each task to both robots rather
    than generating different tasks per robot.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了公平起见，请确保将每个任务都交给两个机器人，而不是为每个机器人生成不同的任务。
- en: '*Robot Efficiency*'
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*机器人效率*'
- en: Can you write a robot that finishes the delivery task faster than goalOriented
    Robot? If you observe that robot’s behavior, what obviously stupid things does
    it do? How could those be improved?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你能写一个比目标导向机器人更快完成交付任务的机器人吗？如果你观察那个机器人的行为，它做了哪些显然愚蠢的事情？这些可以如何改进？
- en: If you solved the previous exercise, you might want to use your compareRobots
    function to verify whether you improved the robot.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你解决了之前的练习，你可能想用你的 compareRobots 函数来验证你是否改善了机器人。
- en: '*Persistent Group*'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*持久性组*'
- en: Most data structures provided in a standard JavaScript environment aren’t very
    well suited for persistent use. Arrays have slice and concat methods, which allow
    us to easily create new arrays without damaging the old one. But Set, for example,
    has no methods for creating a new set with an item added or removed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准的 JavaScript 环境中，大多数数据结构并不太适合持久性使用。数组有 slice 和 concat 方法，这使我们能够轻松创建新的数组而不损坏旧的数组。但例如，Set
    没有用于添加或移除项以创建新集合的方法。
- en: Write a new class PGroup, similar to the Group class from [Chapter 6](ch06.xhtml#ch06),
    which stores a set of values. Like Group, it has add, delete, and has methods.
    Its add method, however, should return a *new* PGroup instance with the given
    member added and leave the old one unchanged. Similarly, delete should create
    a new instance without a given member.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个新的类PGroup，类似于[第6章](ch06.xhtml#ch06)中的Group类，存储一组值。像Group一样，它具有add、delete和has方法。然而，它的add方法应该返回一个*新的*
    PGroup实例，添加给定成员，同时保留旧实例不变。同样，delete应该创建一个没有给定成员的新实例。
- en: The class should work for values of any type, not just strings. It does *not*
    have to be efficient when used with large numbers of values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类应该适用于任何类型的值，而不仅仅是字符串。当处理大量值时，它*不必*高效。
- en: The constructor shouldn’t be part of the class’s interface (though you’ll definitely
    want to use it internally). Instead, there is an empty instance, PGroup.empty,
    that can be used as a starting value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数不应该是类接口的一部分（尽管你肯定希望在内部使用它）。相反，有一个空实例PGroup.empty，可以用作起始值。
- en: Why do you need only one PGroup.empty value rather than having a function that
    creates a new, empty map every time?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么只需要一个PGroup.empty值，而不是每次都创建一个新的空映射的函数？
- en: '*Debugging is twice as hard as writing the code in the first place. Therefore,
    if you write the code as cleverly as possible, you are, by definition, not smart
    enough to debug it.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*调试的难度是编写代码难度的两倍。因此，如果你尽可能聪明地编写代码，那么，从定义上讲，你就不够聪明去调试它。*'
- en: —Brian Kernighan and P.J. Plauger, *The Elements of Programming Style*
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: —布赖恩·肯尼汉和P.J.普劳杰，*程序设计风格元素*
- en: '![Image](../images/f0126-01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0126-01.jpg)'
