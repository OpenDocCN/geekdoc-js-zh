- en: Chapter 12\. Iterators and Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。迭代器和生成器
- en: 'Iterable objects and their associated iterators are a feature of ES6 that we’ve
    seen several times throughout this book. Arrays (including TypedArrays) are iterable,
    as are strings and Set and Map objects. This means that the contents of these
    data structures can be iterated—looped over—with the `for/of` loop, as we saw
    in [§5.4.4](ch05.xhtml#forofloop):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可迭代对象及其相关的迭代器是 ES6 的一个特性，在本书中我们已经多次见到。数组（包括 TypedArrays）、字符串以及 Set 和 Map 对象都是可迭代的。这意味着这些数据结构的内容可以被迭代——使用`for/of`循环遍历，就像我们在[§5.4.4](ch05.xhtml#forofloop)中看到的那样：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Iterators can also be used with the `...` operator to expand or “spread” an
    iterable object into an array initializer or function invocation, as we saw in
    [§7.1.2](ch07.xhtml#spread-operator-in-array-literals):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器也可以与`...`运算符一起使用，将可迭代对象展开或“扩展”到数组初始化程序或函数调用中，就像我们在[§7.1.2](ch07.xhtml#spread-operator-in-array-literals)中看到的那样：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Iterators can be used with destructuring assignment:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器可以与解构赋值一起使用：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you iterate a Map object, the returned values are `[key, value]` pairs,
    which work well with destructuring assignment in a `for/of` loop:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你迭代 Map 对象时，返回的值是`[key, value]`对，这与`for/of`循环中的解构赋值很好地配合使用：
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to iterate just the keys or just the values rather than the pairs,
    you can use the `keys()` and `values()` methods:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想迭代键或值而不是键值对，可以使用`keys()`和`values()`方法：
- en: '[PRE4]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, a number of built-in functions and constructors that are commonly
    used with Array objects are actually written (in ES6 and later) to accept arbitrary
    iterators instead. The `Set()` constructor is one such API:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一些常用于 Array 对象的内置函数和构造函数实际上（在 ES6 及更高版本中）被编写为接受任意迭代器。`Set()`构造函数就是这样一个 API：
- en: '[PRE5]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This chapter explains how iterators work and demonstrates how to create your
    own data structures that are iterable. After explaining basic iterators, this
    chapter covers generators, a powerful new feature of ES6 that is primarily used
    as a particularly easy way to create iterators.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了迭代器的工作原理，并演示了如何创建自己的可迭代数据结构。在解释基本迭代器之后，本章涵盖了生成器，这是 ES6 的一个强大新功能，主要用作一种特别简单的创建迭代器的方法。
- en: 12.1 How Iterators Work
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.1 迭代器的工作原理
- en: 'The `for/of` loop and spread operator work seamlessly with iterable objects,
    but it is worth understanding what is actually happening to make the iteration
    work. There are three separate types that you need to understand to understand
    iteration in JavaScript. First, there are the *iterable* objects: these are types
    like Array, Set, and Map that can be iterated. Second, there is the *iterator*
    object itself, which performs the iteration. And third, there is the *iteration
    result* object that holds the result of each step of the iteration.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`for/of`循环和展开运算符与可迭代对象无缝配合，但值得理解实际上是如何使迭代工作的。在理解 JavaScript 中的迭代过程时，有三种不同的类型需要理解。首先是*可迭代*对象：这些是可以被迭代的类型，如
    Array、Set 和 Map。其次，是执行迭代的*迭代器*对象本身。第三，是保存迭代每一步结果的*迭代结果*对象。'
- en: 'An *iterable* object is any object with a special iterator method that returns
    an iterator object. An *iterator* is any object with a `next()` method that returns
    an iteration result object. And an *iteration result* object is an object with
    properties named `value` and `done`. To iterate an iterable object, you first
    call its iterator method to get an iterator object. Then, you call the `next()`
    method of the iterator object repeatedly until the returned value has its `done`
    property set to `true`. The tricky thing about this is that the iterator method
    of an iterable object does not have a conventional name but uses the Symbol `Symbol.iterator`
    as its name. So a simple `for/of` loop over an iterable object `iterable` could
    also be written the hard way, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*可迭代*对象是任何具有特殊迭代器方法的对象，该方法返回一个迭代器对象。*迭代器*是任何具有返回迭代结果对象的`next()`方法的对象。而*迭代结果*对象是具有名为`value`和`done`的属性的对象。要迭代可迭代对象，首先调用其迭代器方法以获取一个迭代器对象。然后，重复调用迭代器对象的`next()`方法，直到返回的值的`done`属性设置为`true`为止。关于这一点的棘手之处在于，可迭代对象的迭代器方法没有传统的名称，而是使用符号`Symbol.iterator`作为其名称。因此，对可迭代对象`iterable`进行简单的`for/of`循环也可以以较困难的方式编写，如下所示：'
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The iterator object of the built-in iterable datatypes is itself iterable.
    (That is, it has a method named `Symbol.iterator` that just returns itself.) This
    is occasionally useful in code like the following when you want to iterate though
    a “partially used” iterator:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 内置可迭代数据类型的迭代器对象本身也是可迭代的。（也就是说，它有一个名为`Symbol.iterator`的方法，该方法返回自身。）这在以下代码中偶尔会有用，当你想要遍历“部分使用过”的迭代器时：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 12.2 Implementing Iterable Objects
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.2 实现可迭代对象
- en: Iterable objects are so useful in ES6 that you should consider making your own
    datatypes iterable whenever they represent something that can be iterated. The
    Range classes shown in Examples [9-2](ch09.xhtml#range2.js) and [9-3](ch09.xhtml#range3.js)
    in [Chapter 9](ch09.xhtml#classes) were iterable. Those classes used generator
    functions to make themselves iterable. We’ll document generators later in this
    chapter, but first, we will implement the Range class one more time, making it
    iterable without relying on a generator.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ES6 中，可迭代对象非常有用，因此当它们表示可以被迭代的内容时，你应该考虑使自己的数据类型可迭代。在[第9-2](ch09.xhtml#range2.js)和[第9-3](ch09.xhtml#range3.js)示例中展示的
    Range 类是可迭代的。这些类使用生成器函数使自己可迭代。我们稍后会介绍生成器，但首先，我们将再次实现 Range 类，使其可迭代而���依赖于生成器。
- en: In order to make a class iterable, you must implement a method whose name is
    the Symbol `Symbol.iterator`. That method must return an iterator object that
    has a `next()` method. And the `next()` method must return an iteration result
    object that has a `value` property and/or a boolean `done` property. [Example 12-1](#rangeclass)
    implements an iterable Range class and demonstrates how to create iterable, iterator,
    and iteration result objects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要使类可迭代，必须实现一个方法，其名称为符号`Symbol.iterator`。该方法必须返回具有`next()`方法的迭代器对象。而`next()`方法必须返回具有`value`属性和/或布尔`done`属性的迭代结果对象。[示例 12-1](#rangeclass)
    实现了一个可迭代的 Range 类，并演示了如何创建可迭代、迭代器和迭代结果对象。
- en: Example 12-1\. An iterable numeric Range class
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-1\. 一个可迭代的数字范围类
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In addition to making your classes iterable, it can be quite useful to define
    functions that return iterable values. Consider these iterable-based alternatives
    to the `map()` and `filter()` methods of JavaScript arrays:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使您的类可迭代之外，定义返回可迭代值的函数也非常有用。考虑这些基于迭代的替代方案，用于 JavaScript 数组的`map()`和`filter()`方法：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'One key feature of iterable objects and iterators is that they are inherently
    lazy: when computation is required to compute the next value, that computation
    can be deferred until the value is actually needed. Suppose, for example, that
    you have a very long string of text that you want to tokenize into space-separated
    words. You could simply use the `split()` method of your string, but if you do
    this, then the entire string has to be processed before you can use even the first
    word. And you end up allocating lots of memory for the returned array and all
    of the strings within it. Here is a function that allows you to lazily iterate
    the words of a string without keeping them all in memory at once (in ES2020, this
    function would be much easier to implement using the iterator-returning `matchAll()`
    method described in [§11.3.2](ch11.xhtml#regexps-string-methods)):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可迭代对象和迭代器的一个关键特性是它们本质上是惰性的：当需要计算下一个值时，该计算可以推迟到实际需要该值时。例如，假设您有一个非常长的文本字符串，您希望将其标记为以空格分隔的单词。您可以简单地使用字符串的`split()`方法，但如果这样做，那么必须在使用第一个单词之前处理整个字符串。并且您最终会为返回的数组及其中的所有字符串分配大量内存。以下是一个函数，允许您惰性迭代字符串的单词，而无需一次性将它们全部保存在内存中（在
    ES2020 中，使用返回迭代器的`matchAll()`方法更容易实现此函数，该方法在 [§11.3.2](ch11.xhtml#regexps-string-methods)
    中描述）：
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '12.2.1 “Closing” an Iterator: The Return Method'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2.1 “关闭”迭代器：返回方法
- en: Imagine a (server-side) JavaScript variant of the `words()` iterator that, instead
    of taking a source string as its argument, takes the name of a file, opens the
    file, reads lines from it, and iterates the words from those lines. In most operating
    systems, programs that open files to read from them need to remember to close
    those files when they are done reading, so this hypothetical iterator would be
    sure to close the file after the `next()` method returns the last word in it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个（服务器端）JavaScript 变体的`words()`迭代器，它不是以源字符串作为参数，而是以文件���作为参数，打开文件，从中读取行，并迭代这些行中的单词。在大多数操作系统中，打开文件以从中读取的程序在完成读取后需要记住关闭这些文件，因此这个假设的迭代器将确保在`next()`方法返回其中的最后一个单词后关闭文件。
- en: 'But iterators don’t always run all the way to the end: a `for/of` loop might
    be terminated with a `break` or `return` or by an exception. Similarly, when an
    iterator is used with destructuring assignment, the `next()` method is only called
    enough times to obtain values for each of the specified variables. The iterator
    may have many more values it could return, but they will never be requested.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但迭代器并不总是运行到结束：`for/of`循环可能会被`break`、`return`或异常终止。同样，当迭代器与解构赋值一起使用时，`next()`方法只会被调用足够次数以获取每个指定变量的值。迭代器可能有更多值可以返回，但它们永远不会被请求。
- en: If our hypothetical words-in-a-file iterator never runs all the way to the end,
    it still needs to close the file it opened. For this reason, iterator objects
    may implement a `return()` method to go along with the `next()` method. If iteration
    stops before `next()` has returned an iteration result with the `done` property
    set to `true` (most commonly because you left a `for/of` loop early via a `break`
    statement), then the interpreter will check to see if the iterator object has
    a `return()` method. If this method exists, the interpreter will invoke it with
    no arguments, giving the iterator the chance to close files, release memory, and
    otherwise clean up after itself. The `return()` method must return an iterator
    result object. The properties of the object are ignored, but it is an error to
    return a non-object value.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设的文件中的单词迭代器从未完全运行到结束，它仍然需要关闭打开的文件。因此，迭代器对象可能会实现一个`return()`方法，与`next()`方法一起使用。如果在`next()`返回具有`done`属性设置为`true`的迭代结果之前迭代停止（通常是因为您通过`break`语句提前离开了`for/of`循环），那么解释器将检查迭代器对象是否具有`return()`方法。如果存在此方法，解释器将以无参数调用它，使迭代器有机会关闭文件，释放内存，并在完成后进行清理。`return()`方法必须返回一个迭代结果对象。对象的属性将被忽略，但返回非对象值是错误的。
- en: The `for/of` loop and the spread operator are really useful features of JavaScript,
    so when you are creating APIs, it is a good idea to use them when possible. But
    having to work with an iterable object, its iterator object, and the iterator’s
    result objects makes the process somewhat complicated. Fortunately, generators
    can dramatically simplify the creation of custom iterators, as we’ll see in the
    rest of this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`for/of`循环和展开运算符是 JavaScript 的非常有用的特性，因此在创建 API 时，尽可能使用它们是一个好主意。但是，必须使用可迭代对象、其迭代器对象和迭代器的结果对象来处理过程有些复杂。幸运的是，生成器可以极大地简化自定义迭代器的创建，我们将在本章的其余部分中看到。'
- en: 12.3 Generators
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.3 生成器
- en: A *generator* is a kind of iterator defined with powerful new ES6 syntax; it’s
    particularly useful when the values to be iterated are not the elements of a data
    structure, but the result of a computation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*生成器*是一种使用强大的新 ES6 语法定义的迭代器；当要迭代的值不是数据结构的元素，而是计算结果时，它特别有用。'
- en: 'To create a generator, you must first define a *generator function*. A generator
    function is syntactically like a regular JavaScript function but is defined with
    the keyword `function*` rather than `function`. (Technically, this is not a new
    keyword, just a `*` after the keyword `function` and before the function name.)
    When you invoke a generator function, it does not actually execute the function
    body, but instead returns a generator object. This generator object is an iterator.
    Calling its `next()` method causes the body of the generator function to run from
    the start (or whatever its current position is) until it reaches a `yield` statement.
    `yield` is new in ES6 and is something like a `return` statement. The value of
    the `yield` statement becomes the value returned by the `next()` call on the iterator.
    An example makes this clearer:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个生成器，你必须首先定义一个*生成器函数*。生成器函数在语法上类似于普通的JavaScript函数，但是用关键字`function*`而不是`function`来定义。（从技术上讲，这不是一个新关键字，只是在关键字`function`之后和函数名之前加上一个`*`。）当你调用一个生成器函数时，它实际上不会执行函数体，而是返回一个生成器对象。这个生成器对象是一个迭代器。调用它的`next()`方法会导致生成器函数的主体从头开始运行（或者从当前位置开始），直到达到一个`yield`语句。`yield`在ES6中是新的，类似于`return`语句。`yield`语句的值成为迭代器上`next()`调用返回的值。通过示例可以更清楚地理解这一点：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this example, we used a `function*` statement to define a generator. Like
    regular functions, however, we can also define generators in expression form.
    Once again, we just put an asterisk after the `function` keyword:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了`function*`语句来定义一个生成器。然而，和普通函数一样，我们也可以以表达式形式定义生成器。再次强调，我们只需在`function`关键字后面加上一个星号：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In classes and object literals, we can use shorthand notation to omit the `function`
    keyword entirely when we define methods. To define a generator in this context,
    we simply use an asterisk before the method name where the `function` keyword
    would have been, had we used it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在类和对象字面量中，我们可以使用简写符号来完全省略定义方法时的`function`关键字。在这种情况下定义生成器，我们只需在方法名之前使用一个星号，而不是使用`function`关键字：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that there is no way to write a generator function using arrow function
    syntax.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有办法使用箭头函数语法编写生成器函数。
- en: 'Generators often make it particularly easy to define iterable classes. We can
    replace the `[Symbol.iterator]()` method show in [Example 12-1](#rangeclass) with
    a much shorter `*[Symbol.iterator&rbrack;()` generator function that looks like
    this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器通常使得定义可迭代类变得特别容易。我们可以用一个更简短的`*[Symbol.iterator&rbrack;()`生成器函数来替换[示例 12-1](#rangeclass)中展示的`[Symbol.iterator]()`方法，代码如下：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See [Example 9-3](ch09.xhtml#range3.js) in [Chapter 9](ch09.xhtml#classes) to
    see this generator-based iterator function in context.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[第9章](ch09.xhtml#classes)中的[示例 9-3](ch09.xhtml#range3.js)以查看上下文中基于生成器的迭代器函数。
- en: 12.3.1 Generator Examples
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3.1 生成器示例
- en: 'Generators are more interesting if they actually *generate* the values they
    yield by doing some kind of computation. Here, for example, is a generator function
    that yields Fibonacci numbers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生成器实际上*生成*它们通过进行某种计算来产生的值，那么生成器就更有趣了。例如，这里是一个产生斐波那契数的生成器函数：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that the `fibonacciSequence()` generator function here has an infinite
    loop and yields values forever without returning. If this generator is used with
    the `...` spread operator, it will loop until memory is exhausted and the program
    crashes. With care, it is possible to use it in a `for/of` loop, however:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里的`fibonacciSequence()`生成器函数有一个无限循环，并且永远产生值而不返回。如果这个生���器与`...`扩展运算符一起使用，它将循环直到内存耗尽并且程序崩溃。然而，经过谨慎处理，可以在`for/of`循环中使用它：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This kind of infinite generator becomes more useful with a `take()` generator
    like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种无限生成器与这样的`take()`生成器结合使用更有用：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is another useful generator function that interleaves the elements of
    multiple iterable objects:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个有用的生成器函数，它交错多个可迭代对象的元素：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 12.3.2 yield* and Recursive Generators
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3.2 `yield*` 和递归生成器
- en: 'In addition to the `zip()` generator defined in the preceding example, it might
    be useful to have a similar generator function that yields the elements of multiple
    iterable objects sequentially rather than interleaving them. We could write that
    generator like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在前面的示例中定义的`zip()`生成器之外，可能还有一个类似的生成器函数很有用，它按顺序而不是交错地产生多个可迭代对象的元素。我们可以这样编写这个生成器：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This process of yielding the elements of some other iterable object is common
    enough in generator functions that ES6 has special syntax for it. The `yield*`
    keyword is like `yield` except that, rather than yielding a single value, it iterates
    an iterable object and yields each of the resulting values. The `sequence()` generator
    function that we’ve used can be simplified with `yield*` like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成器函数中产生其他可迭代对象的元素的过程在生成器函数中是很常见的，ES6为此提供了特殊的语法。`yield*`关键字类似于`yield`，不同之处在于，它不是产生单个值，而是迭代一个可迭代对象并产生每个结果值。我们使用的`sequence()`生成器函数可以用`yield*`简化如下：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The array `forEach()` method is often an elegant way to loop over the elements
    of an array, so you might be tempted to write the `sequence()` function like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的`forEach()`方法通常是遍历数组元素的一种优雅方式，因此你可能会尝试像这样编写`sequence()`函数：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This does not work, however. `yield` and `yield*` can only be used within generator
    functions, but the nested arrow function in this code is a regular function, not
    a `function*` generator function, so `yield` is not allowed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是行不通的。`yield`和`yield*`只能在生成器函数内部使用，但是这段代码中的嵌套箭头函数是一个普通函数，而不是`function*`生成器函数，因此不允许使用`yield`。
- en: '`yield*` can be used with any kind of iterable object, including iterables
    implemented with generators. This means that `yield*` allows us to define recursive
    generators, and you might use this feature to allow simple non-recursive iteration
    over a recursively defined tree structure, for example.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield*`可以与任何类型的可迭代对象一起使用，包括使用生成器实现的可迭代对象。这意味着`yield*`允许我们定义递归生成器，你可以使用这个特性来允许对递归定义的树结构进行简单的非递归迭代，例如。'
- en: 12.4 Advanced Generator Features
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.4 高级生成器功能
- en: The most common use of generator functions is to create iterators, but the fundamental
    feature of generators is that they allow us to pause a computation, yield intermediate
    results, and then resume the computation later. This means that generators have
    features beyond those of iterators, and we explore those features in the following
    sections.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器函数最常见的用途是创建迭代器，但生成器的基本特性是允许我们暂停计算，产生中间结果，然后稍后恢复计算。这意味着生成器具有超出迭代器的功能，并且我们将在以下部分探讨这些功能。
- en: 12.4.1 The Return Value of a Generator Function
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4.1 生成器函数的返回值
- en: 'The generator functions we’ve seen so far have not had `return` statements,
    or if they have, they have been used to cause an early return, not to return a
    value. Like any function, though, a generator function can return a value. In
    order to understand what happens in this case, recall how iteration works. The
    return value of the `next()` function is an object that has a `value` property
    and/or a `done` property. With typical iterators and generators, if the `value`
    property is defined, then the `done` property is undefined or is `false`. And
    if `done` is `true`, then `value` is undefined. But in the case of a generator
    that returns a value, the final call to `next` returns an object that has both
    `value` and `done` defined. The `value` property holds the return value of the
    generator function, and the `done` property is `true`, indicating that there are
    no more values to iterate. This final value is ignored by the `for/of` loop and
    by the spread operator, but it is available to code that manually iterates with
    explicit calls to `next()`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的生成器函数没有`return`语句，或者如果有的话，它们被用来导致早期返回，而不是返回一个值。不过，与任何函数一样，生成器函数可以返回一个值。为了理解在这种情况下会发生什么，回想一下迭代的工作原理。`next()`函数的返回值是一个具有`value`属性和/或`done`属性的对象。对于典型的迭代器和生成器，如果`value`属性被定义，则`done`属性未定义或为`false`。如果`done`为`true`，则`value`为未定义。但是对于返回值的生成器，最后一次调用`next`会返回一个同时定义了`value`和`done`的对象。`value`属性保存生成器函数的返回值，`done`属性为`true`，表示没有更多的值可迭代。这个最终值被`for/of`循环和展开运算符忽略，但对于手动使用显式调用`next()`的代码是可用的：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 12.4.2 The Value of a yield Expression
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4.2 yield表达式的值
- en: In the preceding discussion, we’ve treated `yield` as a statement that takes
    a value but has no value of its own. In fact, however, `yield` is an expression,
    and it can have a value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的讨论中，我们将`yield`视为接受值但没有自身值的语句。实际上，`yield`是一个表达式，它可以有一个值。
- en: 'When the `next()` method of a generator is invoked, the generator function
    runs until it reaches a `yield` expression. The expression that follows the `yield`
    keyword is evaluated, and that value becomes the return value of the `next()`
    invocation. At this point, the generator function stops executing right in the
    middle of evaluating the `yield` expression. The next time the `next()` method
    of the generator is called, the argument passed to `next()` becomes the value
    of the `yield` expression that was paused. So the generator returns values to
    its caller with `yield`, and the caller passes values in to the generator with
    `next()`. The generator and caller are two separate streams of execution passing
    values (and control) back and forth. The following code illustrates:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用生成器的`next()`方法时，生成器函数运行直到达到`yield`表达式。`yield`关键字后面的表达式被评估，该值成为`next()`调用的返回值。此时，生成器函数在评估`yield`表达式的过程中停止执行。下次调用生成器的`next()`方法时，传递给`next()`的参数成为暂停的`yield`表达式的值。因此，生成器通过`yield`向其调用者返回值，调用者通过`next()`向生成器传递值。生成器和调用者是两个独立的执行流，来回传递值（和控制）。以下代码示例：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When this code runs, it produces the following output that demonstrates the
    back-and-forth between the two blocks of code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行这段代码时，会产生以下输出，展示了两个代码块之间的来回交互：
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note the asymmetry in this code. The first invocation of `next()` starts the
    generator, but the value passed to that invocation is not accessible to the generator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这段代码中的不对称性。第一次调用`next()`启动了生成器，但传递给该调用的值对生成器不可访问。
- en: 12.4.3 The return() and throw() Methods of a Generator
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4.3 生成器的return()和throw()方法
- en: We’ve seen that you can receive values yielded by or returned by a generator
    function. And you can pass values to a running generator by passing those values
    when you call the `next()` method of the generator.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到可以接收生成器函数产生的值。您可以通过在调用生成器的`next()`方法时传递这些值来向正在运行的生成器传递值。
- en: In addition to providing input to a generator with `next()`, you can also alter
    the flow of control inside the generator by calling its `return()` and `throw()`
    methods. As the names suggest, calling these methods on a generator causes it
    to return a value or throw an exception as if the next statement in the generator
    was a `return` or `throw`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`next()`向生成器提供输入外，还可以通过调用其`return()`和`throw()`方法来更改生成器内部的控制流。如其名称所示，调用这些方法会导致生成器返回一个值或抛出异常，就好像生成器中的下一条语句是`return`或`throw`一样。
- en: Recall from earlier in the chapter that, if an iterator defines a `return()`
    method and iteration stops early, then the interpreter automatically calls the
    `return()` method to give the iterator a chance to close files or do other cleanup.
    In the case of generators, you can’t define a custom `return()` method to handle
    cleanup, but you can structure the generator code to use a `try/finally` statement
    that ensures the necessary cleanup is done (in the `finally` block) when the generator
    returns. By forcing the generator to return, the generator’s built-in `return()`
    method ensures that the cleanup code is run when the generator will no longer
    be used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面提到，如果迭代器定义了一个`return()`方法并且迭代提前停止，那么解释器会自动调用`return()`方法，以便让迭代器有机会关闭文件或进行其他清理工作。对于生成器来说，你不能定义一个自定义的`return()`方法来处理清理工作，但你可以结构化生成器代码以使用`try/finally`语句，在生成器返回时确保必要的清理工作已完成（在`finally`块中）。通过强制生成器返回，生成器的内置`return()`方法确保在生成器不再使用时运行清理代码。
- en: Just as the `next()` method of a generator allows us to pass arbitrary values
    into a running generator, the `throw()` method of a generator gives us a way to
    send arbitrary signals (in the form of exceptions) into a generator. Calling the
    `throw()` method always causes an exception inside the generator. But if the generator
    function is written with appropriate exception-handling code, the exception need
    not be fatal but can instead be a means of altering the behavior of the generator.
    Imagine, for example, a counter generator that yields an ever-increasing sequence
    of integers. This could be written so that an exception sent with `throw()` would
    reset the counter to zero.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 就像生成器的`next()`方法允许我们向正在运行的生成器传递任意值一样，生成器的`throw()`方法给了我们一种向生成器发送任意信号（以异常的形式）的方法。调用`throw()`方法总是在生成器内部引发异常。但如果生成器函数编写了适当的异常处理代码，异常不必是致命的，而可以是改变生成器行为的手段。例如，想象一个计数器生成器，产生一个不断增加的整数序列。这可以被编写成使用`throw()`发送的异常将计数器重置为零。
- en: When a generator uses `yield*` to yield values from some other iterable object,
    then a call to the `next()` method of the generator causes a call to the `next()`
    method of the iterable object. The same is true of the `return()` and `throw()`
    methods. If a generator uses `yield*` on an iterable object that has these methods
    defined, then calling `return()` or `throw()` on the generator causes the iterator’s
    `return()` or `throw()` method to be called in turn. All iterators *must* have
    a `next()` method. Iterators that need to clean up after incomplete iteration
    *should* define a `return()` method. And any iterator *may* define a `throw()`
    method, though I don’t know of any practical reason to do so.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成器使用`yield*`从其他可迭代对象中产生值时，那么对生成器的`next()`方法的调用会导致对可迭代对象的`next()`方法的调用。`return()`和`throw()`方法也是如此。如果生成器在可迭代对象上使用`yield*`，那么在生成器上调用`return()`或`throw()`会导致依次调用迭代器的`return()`或`throw()`方法。所有迭代器*必须*有一个`next()`方法。需要在不完整迭代后进行清理的迭代器*应该*定义一个`return()`方法。任何迭代器*可以*定义一个`throw()`方法，尽管我不知道任何实际原因这样做。
- en: 12.4.4 A Final Note About Generators
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4.4 关于生成器的最后说明
- en: Generators are a very powerful generalized control structure. They give us the
    ability to pause a computation with `yield` and restart it again at some arbitrary
    later time with an arbitrary input value. It is possible to use generators to
    create a kind of cooperative threading system within single-threaded JavaScript
    code. And it is possible to use generators to mask asynchronous parts of your
    program so that your code appears sequential and synchronous, even though some
    of your function calls are actually asynchronous and depend on events from the
    network.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ���成器是一种非常强大的通用控制结构。它们使我们能够使用`yield`暂停计算，并在任意后续时间点以任意输入值重新启动。可以使用生成器在单线程JavaScript代码中创建一种协作线程系统。也可以使用生成器掩盖程序中的异步部分，使你的代码看起来是顺序和同步的，尽管你的一些函数调用实际上是异步的并依赖于网络事件。
- en: Trying to do these things with generators leads to code that is mind-bendingly
    hard to understand or to explain. It has been done, however, and the only really
    practical use case has been for managing asynchronous code. JavaScript now has
    `async` and `await` keywords (see [Chapter 13](ch13.xhtml#async)) for this very
    purpose, however, and there is no longer any reason to abuse generators in this
    way.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试用生成器做这些事情会导致代码难以理解或解释。然而，已经做到了，唯一真正实用的用例是管理异步代码。然而，JavaScript现在有`async`和`await`关键字（见[第13章](ch13.xhtml#async)）用于这个目的，因此不再有任何滥用生成器的理由。
- en: 12.5 Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.5 总结
- en: 'In this chapter, you have learned:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到了：
- en: The `for/of` loop and the `...` spread operator work with iterable objects.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for/of`循环和`...`扩展运算符适用于可迭代对象。'
- en: An object is iterable if it has a method with the symbolic name `[Symbol.iterator]`
    that returns an iterator object.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个对象有一个名为`[Symbol.iterator]`的方法返回一个迭代器对象，那么它就是可迭代的。
- en: An iterator object has a `next()` method that returns an iteration result object.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代器对象有一个`next()`方法返回一个迭代结果对象。
- en: An iteration result object has a `value` property that holds the next iterated
    value, if there is one. If the iteration has completed, then the result object
    must have a `done` property set to `true`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代结果对象有一个`value`属性，保存下一个迭代的值（如果有的话）。如果迭代已完成，则结果对象必须将`done`属性设置为`true`。
- en: You can implement your own iterable objects by defining a `[Symbol.iterator]()`
    method that returns an object with a `next()` method that returns iteration result
    objects. You can also implement functions that accept iterator arguments and return
    iterator values.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过定义一个`[Symbol.iterator]()`方法返回一个具有`next()`方法返回迭代结果对象的对象来实现自己的可迭代对象。你也可以实现接受迭代器参数并返回迭代器值的函数。
- en: Generator functions (functions defined with `function*` instead of `function`)
    are another way to define iterators.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器函数（使用`function*`而不是`function`定义的函数）是定义迭代器的另一种方式。
- en: When you invoke a generator function, the body of the function does not run
    right away; instead, the return value is an iterable iterator object. Each time
    the `next()` method of the iterator is called, another chunk of the generator
    function runs.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用生成器函数时，函数体不会立即运行；相反，返回值是一个可迭代的迭代器对象。每次调用迭代器的`next()`方法时，生成器函数的另一个块会运行。
- en: Generator functions can use the `yield` operator to specify the values that
    are returned by the iterator. Each call to `next()` causes the generator function
    to run up to the next `yield` expression. The value of that `yield` expression
    then becomes the value returned by the iterator. When there are no more `yield`
    expressions, then the generator function returns, and the iteration is complete.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器函数可以使用`yield`运算符指定迭代器返回的值。每次调用`next()`都会导致生成器函数运行到下一个`yield`表达式。该`yield`表达式的值然后成为迭代器返回的值。当没有更多的`yield`表达式时，生成器函数返回，迭代完成。
