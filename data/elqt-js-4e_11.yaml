- en: '10'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '10'
- en: MODULES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: Ideally, a program has a clear, straightforward structure. The way it works
    is easy to explain, and each part plays a well-defined role.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，程序应具有清晰、简单的结构。它的工作原理容易解释，每个部分都扮演着明确的角色。
- en: In practice, programs grow organically. Pieces of functionality are added as
    the programmer identifies new needs. Keeping such a program well structured requires
    constant attention and work. This is work that will pay off only in the future,
    the *next* time someone works on the program, so it’s tempting to neglect it and
    allow the various parts of the program to become deeply entangled.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，程序是有机增长的。随着程序员识别新的需求，功能块被逐步添加。保持这样的程序结构良好需要持续的关注和努力。这项工作只有在将来、下次有人处理该程序时才会得到回报，因此很容易忽视它，让程序的各个部分深度纠缠。
- en: This causes two practical issues. First, understanding an entangled system is
    hard. If everything can touch everything else, it is difficult to look at any
    given piece in isolation. You are forced to build up a holistic understanding
    of the entire thing. Second, if you want to use any of the functionality from
    such a program in another situation, rewriting it may be easier than trying to
    disentangle it from its context.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这造成了两个实际问题。首先，理解一个纠缠的系统很困难。如果一切都能相互触及，那么很难孤立地看待任何特定的部分。你被迫建立对整个事物的整体理解。其次，如果你想在另一种情况下使用这样的程序的任何功能，重写它可能比试图将其从上下文中解开要容易。
- en: The phrase “big ball of mud” is often used for such large, structureless programs.
    Everything sticks together, and when you try to pick out a piece, the whole thing
    comes apart, and you succeed only in making a mess.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “大球泥土”这个短语常用来形容这样的庞大、无结构的程序。一切都粘在一起，当你试图挑出一部分时，整个东西就会散架，你最终只会搞得一团糟。
- en: Modular Programs
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化程序
- en: '*Modules* are an attempt to avoid these problems. A module is a piece of program
    that specifies which other pieces it relies on and which functionality it provides
    for other modules to use (its *interface*).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块*是试图避免这些问题的一个尝试。一个模块是一段程序，指定它依赖于哪些其他部分以及它为其他模块提供哪些功能（它的*接口*）。'
- en: Module interfaces have a lot in common with object interfaces, as we saw them
    in [Chapter 6](ch06.xhtml#ch06). They make part of the module available to the
    outside world and keep the rest private.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 模块接口与对象接口有很多相似之处，正如我们在[第六章](ch06.xhtml#ch06)中看到的。它们将模块的一部分公开给外部世界，而将其余部分保留为私有。
- en: But the interface that a module provides for others to use is only half the
    story. A good module system also requires modules to specify which code *they*
    use from other modules. These relations are called *dependencies*. If module A
    uses functionality from module B, it is said to *depend* on that module. When
    these are clearly specified in the module itself, they can be used to figure out
    which other modules need to be present to be able to use a given module and to
    automatically load dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，一个模块为其他模块提供的接口只是故事的一部分。一个好的模块系统还要求模块指定*它们*使用其他模块的哪些代码。这些关系称为*依赖*。如果模块A使用模块B的功能，就说模块A*依赖*于该模块。当这些在模块内部被明确指定时，可以用来确定使用特定模块所需的其他模块，并自动加载依赖项。
- en: When the ways in which modules interact with each other are explicit, a system
    becomes more like LEGO, where pieces interact through well-defined connectors,
    and less like mud, where everything mixes with everything else.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块之间的交互方式是明确的时，系统就更像乐高，组件通过明确定义的连接器相互作用，而不像泥土那样，所有东西都混在一起。
- en: ES Modules
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ES模块
- en: The original JavaScript language did not have any concept of a module. All scripts
    ran in the same scope, and accessing a function defined in another script was
    done by referencing the global bindings created by that script. This actively
    encouraged accidental, hard-to-see entanglement of code and invited problems like
    unrelated scripts trying to use the same binding name.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的JavaScript语言没有模块的概念。所有脚本都在同一个作用域内运行，访问在另一个脚本中定义的函数是通过引用该脚本创建的全局绑定来完成的。这积极鼓励了代码的意外、难以察觉的纠缠，并导致了不同脚本尝试使用相同绑定名称等问题。
- en: 'Since ECMAScript 2015, JavaScript supports two different types of programs.
    *Scripts* behave in the old way: their bindings are defined in the global scope,
    and they have no way to directly reference other scripts. *Modules* get their
    own separate scope and support the import and export keywords, which aren’t available
    in scripts, to declare their dependencies and interface. This module system is
    usually called *ES modules* (where *ES* stands for ECMAScript).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自 ECMAScript 2015 以来，JavaScript 支持两种不同类型的程序。*脚本* 以旧的方式运行：它们的绑定在全局范围内定义，并且无法直接引用其他脚本。*模块*
    拥有自己的独立范围，并支持 `import` 和 `export` 关键字，这在脚本中不可用，以声明它们的依赖关系和接口。这个模块系统通常称为 *ES 模块*（*ES*
    代表 ECMAScript）。
- en: A modular program is composed of a number of such modules, wired together via
    their imports and exports.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模块化程序由多个这样的模块组成，通过它们的导入和导出连接在一起。
- en: The following example module converts between day names and numbers (as returned
    by Date’s getDay method). It defines a constant that is not part of its interface,
    and two functions that are. It has no dependencies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例模块在日期名称和数字之间转换（如 Date 的 `getDay` 方法返回的）。它定义了一个不属于其接口的常量，以及两个属于其接口的函数。它没有依赖关系。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The export keyword can be put in front of a function, class, or binding definition
    to indicate that that binding is part of the module’s interface. This makes it
    possible for other modules to use that binding by importing it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`export` 关键字可以放在函数、类或绑定定义前，表示该绑定是模块接口的一部分。这使得其他模块能够通过导入该绑定来使用它。'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The import keyword, followed by a list of binding names in braces, makes bindings
    from another module available in the current module. Modules are identified by
    quoted strings.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 关键字后跟花括号内的绑定名称列表，使来自另一个模块的绑定在当前模块中可用。模块由引号字符串标识。'
- en: How such a module name is resolved to an actual program differs by platform.
    The browser treats them as web addresses, whereas Node.js resolves them to files.
    When you run a module, all the other modules it depends on—and the modules *those*
    depend on—are loaded, and the exported bindings are made available to the modules
    that import them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的模块名称解析为实际程序的方式因平台而异。浏览器将它们视为网址，而 Node.js 将其解析为文件。当你运行一个模块时，它所依赖的所有其他模块——以及那些模块所依赖的模块——都会被加载，导出的绑定将对导入它们的模块可用。
- en: Import and export declarations cannot appear inside of functions, loops, or
    other blocks. They are immediately resolved when the module is loaded, regardless
    of how the code in the module executes. To reflect this, they must appear only
    in the outer module body.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 和 `export` 声明不能出现在函数、循环或其他块内。它们在模块加载时立即解析，无论模块中的代码如何执行。为了反映这一点，它们必须仅出现在外部模块体内。'
- en: A module’s interface thus consists of a collection of named bindings, which
    other modules that depend on the module can access. Imported bindings can be renamed
    to give them a new local name using as after their name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的接口因此由一组命名绑定组成，其他依赖于该模块的模块可以访问这些绑定。导入的绑定可以通过在名称后使用 `as` 来重命名，从而赋予它们一个新的本地名称。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A module may also have a special export named default, which is often used for
    modules that only export a single binding. To define a default export, write export
    default before an expression, a function declaration, or a class declaration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模块也可以有一个名为 `default` 的特殊导出，通常用于仅导出单个绑定的模块。要定义默认导出，请在表达式、函数声明或类声明前写 `export default`。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Such a binding is imported by omitting the braces around the name of the import.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的绑定通过省略名称周围的花括号来导入。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To import all bindings from a module at the same time, you can use import *.
    You provide a name, and that name will be bound to an object holding all the module’s
    exports. This can be useful when you are using a lot of different exports.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时导入模块中的所有绑定，可以使用 `import *`。你提供一个名称，这个名称将绑定到一个持有所有模块导出的对象上。当你使用很多不同的导出时，这非常有用。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Packages
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包
- en: One of the advantages of building a program out of separate pieces and being
    able to run some of those pieces on their own is that you might be able to use
    the same piece in different programs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序构建为多个独立部分，并能够单独运行其中一些部分的一个优点是，你可能能够在不同程序中使用相同的部分。
- en: But how do you set this up? Say I want to use the parseINI function from [Chapter
    9](ch09.xhtml#ch09) in another program. If it is clear what the function depends
    on (in this case, nothing), I can just copy that module into my new project and
    use it. But then, if I find a mistake in the code, I’ll probably fix it in whichever
    program I’m working with at the time and forget to also fix it in the other program.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何设置这个呢？假设我想在另一个程序中使用[第9章](ch09.xhtml#ch09)中的parseINI函数。如果很清楚这个函数的依赖（在这种情况下，没有），我可以直接把该模块复制到我的新项目中并使用。但是，如果我在代码中发现了错误，我可能会在我当时正在工作的程序中修复它，却忘了在其他程序中也修复。
- en: Once you start duplicating code, you’ll quickly find yourself wasting time and
    energy moving copies around and keeping them up to date. That’s where *packages*
    come in. A package is a chunk of code that can be distributed (copied and installed).
    It may contain one or more modules and has information about which other packages
    it depends on. A package also usually comes with documentation explaining what
    it does so that people who didn’t write it might still be able to use it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始复制代码，你会迅速发现自己在浪费时间和精力来移动副本并保持它们的更新。这就是*包*的用武之地。一个包是一块可以分发（复制和安装）的代码。它可能包含一个或多个模块，并包含有关其依赖于其他包的信息。包通常还会附带文档，解释它的功能，以便那些没有编写它的人也能够使用。
- en: When a problem is found in a package or a new feature is added, the package
    is updated. Now the programs that depend on it (which may also be packages) can
    copy the new version to get the improvements that were made to the code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当在一个包中发现问题或添加新特性时，该包会被更新。现在，依赖于它的程序（也可能是包）可以复制新版本，以获得对代码所做改进的访问。
- en: Working in this way requires infrastructure. We need a place to store and find
    packages and a convenient way to install and upgrade them. In the JavaScript world,
    this infrastructure is provided by NPM (*[https://www.npmjs.com](https://www.npmjs.com)*).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式工作需要基础设施。我们需要一个地方来存储和查找包，以及一个方便的方式来安装和升级它们。在JavaScript世界中，这一基础设施由NPM提供（*[https://www.npmjs.com](https://www.npmjs.com)*）。
- en: 'NPM is two things: an online service where you can download (and upload) packages,
    and a program (bundled with Node.js) that helps you install and manage them.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: NPM有两个功能：一个是你可以下载（和上传）包的在线服务，另一个是一个程序（与Node.js捆绑在一起），帮助你安装和管理这些包。
- en: At the time of writing, there are more than three million different packages
    available on NPM. A large portion of those are rubbish, to be fair. But almost
    every useful, publicly available JavaScript package can be found on NPM. For example,
    an INI file parser, similar to the one we built in [Chapter 9](ch09.xhtml#ch09),
    is available under the package name ini.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，NPM上有超过三百万个不同的包。公平地说，其中大部分是无用的。但是几乎所有有用的、公开可用的JavaScript包都可以在NPM上找到。例如，与我们在[第9章](ch09.xhtml#ch09)中构建的INI文件解析器类似的一个解析器可以在包名为ini下找到。
- en: '[Chapter 20](ch20.xhtml#ch20) will show how to install such packages locally
    using the npm command line program.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[第20章](ch20.xhtml#ch20)将展示如何使用npm命令行程序在本地安装这些包。'
- en: Having quality packages available for download is extremely valuable. It means
    that we can often avoid reinventing a program that 100 people have written before
    and get a solid, well-tested implementation at the press of a few keys.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有可供下载的高质量包是非常有价值的。这意味着我们通常可以避免重新发明一个已经被100人写过的程序，并且可以在按下几下键的情况下获得一个稳固、经过良好测试的实现。
- en: Software is cheap to copy, so once someone has written it, distributing it to
    other people is an efficient process. Writing it in the first place *is* work,
    though, and responding to people who have found problems in the code or who want
    to propose new features is even more work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 软件复制成本低，因此一旦有人编写了它，分发给其他人就是一个高效的过程。不过，最初编写它*确实*是一项工作，而回应那些发现代码问题或希望提出新特性的人则需要更多的工作。
- en: By default, you own the copyright to the code you write, and other people may
    use it only with your permission. But because some people are just nice and because
    publishing good software can help make you a little bit famous among programmers,
    many packages are published under a license that explicitly allows other people
    to use it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你拥有自己编写代码的版权，其他人只能在获得你的许可后使用它。但是，因为有些人很友善，且发布好的软件可以让你在程序员中小有名气，许多包都在允许其他人使用的许可证下发布。
- en: Most code on NPM is licensed this way. Some licenses require you to also publish
    code that you build on top of the package under the same license. Others are less
    demanding, requiring only that you keep the license with the code as you distribute
    it. The JavaScript community mostly uses the latter type of license. When using
    other people’s packages, make sure you are aware of their licenses.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: NPM上的大多数代码以这种方式获得许可。一些许可证要求你在基于该包构建的代码上也以相同许可证发布。其他许可证要求较少，仅要求在分发代码时保留许可证。JavaScript社区主要使用后者类型的许可证。在使用其他人的包时，请确保了解其许可证。
- en: Now, instead of writing our own INI file parser, we can use one from NPM.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用NPM上的一个解析INI文件的模块，而不是自己编写一个。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: CommonJS Modules
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonJS模块
- en: Before 2015, when the JavaScript language had no built-in module system, people
    were already building large systems in JavaScript. To make that workable, they
    *needed* modules.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年之前，当JavaScript语言没有内置模块系统时，人们已经在JavaScript中构建了大型系统。为了使其可行，他们*需要*模块。
- en: The community designed its own improvised module systems on top of the language.
    These use functions to create a local scope for the modules and regular objects
    to represent module interfaces.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 社区在语言之上设计了自己的即兴模块系统。这些使用函数为模块创建局部作用域，并使用常规对象来表示模块接口。
- en: Initially, people just manually wrapped their entire module in an “immediately
    invoked function expression” to create the module’s scope and assigned their interface
    objects to a single global variable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，人们只是手动将整个模块包裹在一个“立即调用函数表达式”中，以创建模块的作用域，并将接口对象分配给一个全局变量。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This style of modules provides isolation, to a certain degree, but it does not
    declare dependencies. Instead, it just puts its interface into the global scope
    and expects its dependencies, if any, to do the same. This is not ideal.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模块风格提供了一定程度的隔离，但并未声明依赖关系。相反，它只是将其接口放入全局作用域，并期望其依赖关系（如果有的话）也这样做。这并不是理想的。
- en: If we implement our own module loader, we can do better. The most widely used
    approach to bolted-on JavaScript modules is called *CommonJS modules*. Node.js
    used this module system from the start (though it now also knows how to load ES
    modules), and it is the module system used by many packages on NPM.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们实现自己的模块加载器，我们可以做得更好。最广泛使用的附加JavaScript模块方法称为*CommonJS模块*。Node.js从一开始就使用这个模块系统（虽然现在也知道如何加载ES模块），这是许多NPM包使用的模块系统。
- en: A CommonJS module looks like a regular script, but it has access to two bindings
    that it uses to interact with other modules. The first is a function called require.
    When you call this with the module name of your dependency, it makes sure the
    module is loaded and returns its interface. The second is an object named exports,
    which is the interface object for the module. It starts out empty and you add
    properties to it to define exported values.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS模块看起来像一个常规脚本，但它可以访问两个绑定，以便与其他模块进行交互。第一个是一个名为require的函数。当你使用依赖模块的名称调用它时，它会确保模块被加载并返回其接口。第二个是一个名为exports的对象，这是模块的接口对象。它最开始是空的，你向其添加属性以定义导出的值。
- en: This CommonJS example module provides a date-formatting function. It uses two
    packages from NPM—ordinal to convert numbers to strings like ”1st” and “2nd”,
    and date-names to get the English names for weekdays and months. It exports a
    single function, formatDate, which takes a Date object and a template string.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CommonJS示例模块提供了一个日期格式化函数。它使用了来自NPM的两个包——ordinal将数字转换为“1st”和“2nd”等字符串，而date-names则获取工作日和月份的英文名称。它导出一个单一的函数formatDate，接受一个Date对象和一个模板字符串。
- en: The template string may contain codes that direct the format, such as YYYY for
    the full year and Do for the ordinal day of the month. You could give it a string
    like “MMMM Do YYYY” to get output like November 22nd 2017.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串可以包含指导格式的代码，例如YYYY表示完整年份，Do表示月份的序数日。你可以给它一个像“MMMM Do YYYY”的字符串，以获得类似于“2017年11月22日”的输出。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The interface of ordinal is a single function, whereas date-names exports an
    object containing multiple things—days and months are arrays of names. Destructuring
    is very convenient when creating bindings for imported interfaces.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ordinal的接口是一个单一的函数，而date-names导出的是一个包含多个内容的对象——天和月是名称的数组。解构在创建导入接口的绑定时非常方便。
- en: 'The module adds its interface function to exports so that modules that depend
    on it get access to it. We could use the module like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 模块将其接口函数添加到exports中，以便依赖于它的模块可以访问它。我们可以这样使用该模块：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: CommonJS is implemented with a module loader that, when loading a module, wraps
    its code in a function (giving it its own local scope) and passes the require
    and exports bindings to that function as arguments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS 实现了一个模块加载器，当加载模块时，将其代码封装在一个函数中（为其提供自己的局部作用域），并将 `require` 和 `exports`
    绑定作为参数传递给该函数。
- en: 'If we assume we have access to a readFile function that reads a file by name
    and gives us its content, we can define a simplified form of require like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们假设有一个 `readFile` 函数，可以通过名称读取文件并返回其内容，我们可以像这样定义一个简化的 `require` 形式：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Function is a built-in JavaScript function that takes a list of arguments (as
    a comma-separated string) and a string containing the function body and returns
    a function value with those arguments and that body. This is an interesting concept—it
    allows a program to create new pieces of program from string data—but also a dangerous
    one, since if someone can trick your program into putting a string they provide
    into Function, they can make the program do anything they want.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Function` 是一个内置的 JavaScript 函数，它接受一个以逗号分隔的字符串形式的参数列表和一个包含函数体的字符串，并返回一个带有这些参数和该函数体的函数值。这是一个有趣的概念——它允许程序从字符串数据中创建新的程序片段——但也是一个危险的概念，因为如果有人能欺骗你的程序将他们提供的字符串放入
    `Function` 中，他们就能让程序执行任何他们想要的操作。'
- en: Standard JavaScript provides no such function as readFile, but different JavaScript
    environments, such as the browser and Node.js, provide their own ways of accessing
    files. The example just pretends that readFile exists.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 JavaScript 并没有提供像 `readFile` 这样的函数，但不同的 JavaScript 环境，如浏览器和 Node.js，提供了各自访问文件的方式。这个例子假装
    `readFile` 存在。
- en: To avoid loading the same module multiple times, require keeps a store (cache)
    of already loaded modules. When called, it first checks whether the requested
    module has been loaded and, if not, loads it. This involves reading the module’s
    code, wrapping it in a function, and calling it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免多次加载相同的模块，`require` 保持已加载模块的存储（缓存）。调用时，它首先检查请求的模块是否已加载，如果没有，则加载它。这涉及读取模块的代码，将其封装在一个函数中，并调用它。
- en: By defining require and exports as parameters for the generated wrapper function
    (and passing the appropriate values when calling it), the loader makes sure that
    these bindings are available in the module’s scope.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `require` 和 `exports` 定义为生成的包装函数的参数（并在调用时传递适当的值），加载器确保这些绑定在模块的作用域中可用。
- en: An important difference between this system and ES modules is that ES module
    imports happen before a module’s script starts running, whereas require is a normal
    function, invoked when the module is already running. Unlike import declarations,
    require calls *can* appear inside functions, and the name of the dependency can
    be any expression that evaluates to a string, whereas import allows only plain
    quoted strings.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统与 ES 模块之间的一个重要区别是，ES 模块的导入在模块的脚本开始运行之前发生，而 `require` 是一个普通函数，在模块已经运行时调用。与导入声明不同，`require`
    调用 *可以* 出现在函数内部，依赖项的名称可以是任何计算结果为字符串的表达式，而导入只允许普通的带引号字符串。
- en: The transition of the JavaScript community from CommonJS style to ES modules
    has been a slow and somewhat rough one. Fortunately we are now at a point where
    most of the popular packages on NPM provide their code as ES modules, and Node.js
    allows ES modules to import from CommonJS modules. While CommonJS code is still
    something you will run across, there is no real reason to write new programs in
    this style anymore.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 社区从 CommonJS 风格过渡到 ES 模块的过程比较缓慢且略显粗糙。幸运的是，现在大多数流行的 NPM 包都以 ES 模块的形式提供其代码，Node.js
    也允许 ES 模块从 CommonJS 模块中导入。虽然 CommonJS 代码仍然会出现，但已经没有真正的理由再以这种风格编写新程序。
- en: Building and Bundling
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建与打包
- en: Many JavaScript packages aren’t technically written in JavaScript. Language
    extensions such as TypeScript, the type-checking dialect mentioned in [Chapter
    8](ch08.xhtml#ch08), are widely used. People also often start using planned new
    language features long before they have been added to the platforms that actually
    run JavaScript. To make this possible, they *compile* their code, translating
    it from their chosen JavaScript dialect to plain old JavaScript—or even to a past
    version of JavaScript—so that browsers can run it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 JavaScript 包在技术上并不是用 JavaScript 编写的。诸如 TypeScript 之类的语言扩展，在 [第 8 章](ch08.xhtml#ch08)
    中提到的类型检查方言，被广泛使用。人们通常会在新语言特性被实际添加到运行 JavaScript 的平台之前，就开始使用计划中的新特性。为了实现这一点，他们会
    *编译* 他们的代码，将其从所选的 JavaScript 方言转换为普通的 JavaScript，甚至是早期版本的 JavaScript，以便浏览器能够运行它。
- en: Including a modular program that consists of 200 different files in a web page
    produces its own problems. If fetching a single file over the network takes 50
    milliseconds, loading the whole program takes 10 seconds, or maybe half that if
    you can load several files simultaneously. That’s a lot of wasted time. Because
    fetching a single big file tends to be faster than fetching a lot of tiny ones,
    web programmers have started using tools that combine their programs (which they
    painstakingly split into modules) into a single big file before they publish it
    to the web. Such tools are called *bundlers*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页中包含由200个不同文件组成的模块化程序会产生自身的问题。如果从网络上获取一个文件需要50毫秒，那么加载整个程序需要10秒钟，或者如果你能够同时加载几个文件，可能会少一些。这是很多浪费的时间。因为获取一个大文件往往比获取许多小文件要快，网页程序员开始使用工具将他们精心拆分成模块的程序合并成一个大文件，然后再发布到网络上。这类工具被称为*打包工具*。
- en: And we can go further. Apart from the number of files, the *size* of the files
    also determines how fast they can be transferred over the network. Thus, the JavaScript
    community has invented *minifiers*. These are tools that take a JavaScript program
    and make it smaller by automatically removing comments and whitespace, renaming
    bindings, and replacing pieces of code with equivalent code that take up less
    space.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更进一步。除了文件数量，文件的*大小*也决定了它们在网络上传输的速度。因此，JavaScript社区发明了*压缩工具*。这些工具通过自动删除注释和空格、重命名绑定以及用占用更少空间的等效代码替换代码片段，使JavaScript程序变得更小。
- en: It is not uncommon for the code that you find in an NPM package or that runs
    on a web page to have gone through *multiple* stages of transformation— converting
    from modern JavaScript to historic JavaScript, combining the modules into a single
    file, and minifying the code. We won’t go into the details of these tools in this
    book, since there are many of them, and which one is popular changes regularly.
    Just be aware that such things exist, and look them up when you need them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在NPM包中或在网页上运行的代码经历过*多次*转换阶段是并不少见——从现代JavaScript转换为历史JavaScript，将模块合并为一个文件，以及压缩代码。在本书中我们不会详细介绍这些工具，因为它们种类繁多，流行的工具也会定期变化。只需知道这些工具的存在，并在需要时查找它们。
- en: Module Design
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块设计
- en: Structuring programs is one of the subtler aspects of programming. Any nontrivial
    piece of functionality can be organized in various ways.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化程序是编程中更微妙的方面之一。任何非平凡的功能都可以以多种方式组织。
- en: Good program design is subjective—there are trade-offs involved, and matters
    of taste. The best way to learn the value of well-structured design is to read
    or work on a lot of programs and notice what works and what doesn’t. Don’t assume
    that a painful mess is “just the way it is.” You can improve the structure of
    almost everything by putting more thought into it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的程序设计是主观的——涉及权衡和品味的问题。学习结构良好的设计价值的最好方法是阅读或参与大量程序，并注意什么有效，什么无效。不要假设一个痛苦的混乱是“就是这样的”。通过更多思考，你可以改善几乎所有事物的结构。
- en: One aspect of module design is ease of use. If you are designing something that
    is intended to be used by multiple people—or even by yourself, in three months
    when you no longer remember the specifics of what you did— it is helpful if your
    interface is simple and predictable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模块设计的一个方面是易用性。如果你设计的东西是为了让多个人使用——或者即使是你自己，在三个月后当你不再记得你所做的具体事情时——那么如果你的接口简单且可预测，那将会很有帮助。
- en: That may mean following existing conventions. A good example is the ini package.
    This module imitates the standard JSON object by providing parse and stringify
    (to write an INI file) functions, and, like JSON, converts between strings and
    plain objects. The interface is small and familiar, and after you’ve worked with
    it once, you’re likely to remember how to use it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能意味着遵循现有的约定。一个好的例子是ini包。这个模块通过提供解析和字符串化（以写入INI文件）函数，模仿标准JSON对象，并且像JSON一样，在字符串和普通对象之间进行转换。接口小而熟悉，使用一次后，你可能会记住如何使用它。
- en: Even if there’s no standard function or widely used package to imitate, you
    can keep your modules predictable by using simple data structures and doing a
    single, focused thing. Many of the INI-file parsing modules on NPM provide a function
    that directly reads such a file from the hard disk and parses it, for example.
    This makes it impossible to use such modules in the browser, where we don’t have
    direct filesystem access, and adds complexity that would have been better addressed
    by *composing* the module with some file-reading function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有标准函数或广泛使用的包可以模仿，你也可以通过使用简单的数据结构并专注于单一功能来保持模块的可预测性。比如，NPM上许多INI文件解析模块提供一个直接从硬盘读取并解析文件的函数。这使得在浏览器中使用这些模块变得不可能，因为我们没有直接的文件系统访问权限，并增加了复杂性，而这本可以通过*组合*文件读取功能来更好地解决。
- en: This points to another helpful aspect of module design—the ease with which something
    can be composed with other code. Focused modules that compute values are applicable
    in a wider range of programs than bigger modules that perform complicated actions
    with side effects. An INI file reader that insists on reading the file from disk
    is useless in a scenario where the file’s content comes from some other source.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这指出了模块设计的另一个有用方面——与其他代码组合的简便性。专注于计算值的模块适用于比执行复杂操作和副作用的大模块更广泛的程序场景。一个坚持从磁盘读取文件的INI文件读取器在文件内容来自其他来源的情况下毫无用处。
- en: Relatedly, stateful objects are sometimes useful or even necessary, but if something
    can be done with a function, use a function. Several of the INI file readers on
    NPM provide an interface style that requires you to first create an object, then
    load the file into your object, and finally use specialized methods to get at
    the results. This type of thing is common in the object-oriented tradition, and
    it’s terrible. Instead of making a single function call and moving on, you have
    to perform the ritual of moving your object through its various states. And because
    the data is now wrapped in a specialized object type, all code that interacts
    with it has to know about that type, creating unnecessary interdependencies.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相关地，有状态对象有时是有用甚至必要的，但如果可以用函数完成的事情，就应该使用函数。NPM上几个INI文件读取器提供了一种接口风格，要求你首先创建一个对象，然后将文件加载到对象中，最后使用专门的方法获取结果。这种情况在面向对象传统中很常见，而且非常糟糕。你不得不进行将对象通过不同状态移动的仪式，而不是简单地调用一个函数并继续。而且，由于数据现在被封装在专门的对象类型中，所有与之交互的代码都必须了解该类型，造成不必要的相互依赖。
- en: Often, defining new data structures can’t be avoided—only a few basic ones are
    provided by the language standard, and many types of data have to be more complex
    than an array or a map. But when an array suffices, use an array.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，定义新的数据结构是不可避免的——语言标准只提供少数基本结构，许多数据类型必须比数组或映射更复杂。但当数组足够时，就用数组。
- en: An example of a slightly more complex data structure is the graph from [Chapter
    7](ch07.xhtml#ch07). There is no single obvious way to represent a graph in JavaScript.
    In that chapter, we used an object whose properties hold arrays of strings— the
    other nodes reachable from that node.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微复杂的数据结构的例子是来自[第七章](ch07.xhtml#ch07)的图。在JavaScript中，没有单一明显的方法来表示图。在那一章中，我们使用了一个对象，其属性持有字符串数组——可从该节点到达的其他节点。
- en: There are several different pathfinding packages on NPM, but none of them uses
    this graph format. They usually allow the graph’s edges to have a weight, which
    is the cost or distance associated with it. That isn’t possible in our representation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: NPM上有几个不同的路径查找包，但没有一个使用这种图格式。它们通常允许图的边具有权重，即与之相关的成本或距离。这在我们的表示中是不可行的。
- en: For example, there’s the dijkstrajs package. A well-known approach to pathfinding,
    quite similar to our findRoute function, is called *Dijkstra’s algorithm*, after
    Edsger Dijkstra, who first wrote it down. The js suffix is often added to package
    names to indicate the fact that they are written in JavaScript. This dijkstrajs
    package uses a graph format similar to ours, but instead of arrays, it uses objects
    whose property values are numbers—the weights of the edges.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有dijkstrajs包。一种著名的路径查找方法，与我们的findRoute函数非常相似，称为*迪杰斯特拉算法*，以最早将其写下的Edsger Dijkstra命名。js后缀通常被添加到包名中，以表明它们是用JavaScript编写的。这个dijkstrajs包使用类似于我们的图格式，但它使用的是属性值为数字的对象——边的权重。
- en: If we wanted to use that package, we’d have to make sure that our graph was
    stored in the format it expects. All edges get the same weight, since our simplified
    model treats each road as having the same cost (one turn).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用那个包，就必须确保我们的图以它所期望的格式存储。所有边的权重相同，因为我们的简化模型将每条道路视为具有相同成本（一个转弯）。
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This can be a barrier to composition—when various packages are using different
    data structures to describe similar things, combining them is difficult. Therefore,
    if you want to design for composability, find out what data structures other people
    are using and, when possible, follow their example.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能成为组合的障碍——当各种包使用不同的数据结构描述相似事物时，组合它们会很困难。因此，如果你想设计可组合性，了解其他人使用的数据结构，并在可能的情况下遵循他们的示例。
- en: Designing a fitting module structure for a program can be difficult. In the
    phase where you are still exploring the problem, trying different things to see
    what works, you might want to not worry about it too much, since keeping everything
    organized can be a big distraction. Once you have something that feels solid,
    that’s a good time to take a step back and organize it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为程序设计合适的模块结构可能很困难。在你仍在探索问题的阶段，尝试不同的方案以查看什么有效时，你可能不想太过担心这个，因为保持一切有序可能会带来很大的干扰。一旦你有了感觉稳固的东西，那就是退后一步进行整理的好时机。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: Modules provide structure to bigger programs by separating the code into pieces
    with clear interfaces and dependencies. The interface is the part of the module
    that’s visible to other modules, and the dependencies are the other modules it
    makes use of.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 模块通过将代码分离为具有清晰接口和依赖关系的片段，为更大的程序提供结构。接口是模块对其他模块可见的部分，依赖关系是它所使用的其他模块。
- en: Because JavaScript historically did not provide a module system, the CommonJS
    system was built on top of it. Then at some point it *did* get a built-in system,
    which now coexists uneasily with the CommonJS system.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 JavaScript 历史上没有提供模块系统，所以在其之上构建了 CommonJS 系统。然后在某个时刻它 *确实* 得到了内置系统，现在与 CommonJS
    系统并存，但关系并不融洽。
- en: A package is a chunk of code that can be distributed on its own. NPM is a repository
    of JavaScript packages. You can download all kinds of useful (and useless) packages
    from it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 包是可以独立分发的代码块。NPM 是一个 JavaScript 包的库。你可以从中下载各种有用（和无用）的包。
- en: Exercises
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '*A Modular Robot*'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*一个模块化机器人*'
- en: 'These are the bindings that the project from [Chapter 7](ch07.xhtml#ch07) creates:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是项目从 [第七章](ch07.xhtml#ch07) 创建的绑定：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you were to write that project as a modular program, what modules would you
    create? Which module would depend on which other module, and what would their
    interfaces look like?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要把那个项目写成一个模块化程序，你会创建哪些模块？哪个模块依赖于哪个其他模块，它们的接口会是什么样子？
- en: Which pieces are likely to be available prewritten on NPM? Would you prefer
    to use an NPM package or write them yourself?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些部分可能在 NPM 上已有预写？你更愿意使用 NPM 包还是自己编写？
- en: '*Roads Module*'
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*道路模块*'
- en: Write an ES module based on the example from [Chapter 7](ch07.xhtml#ch07) that
    contains the array of roads and exports the graph data structure representing
    them as roadGraph. It depends on a module *./graph.js* that exports a function
    buildGraph, used to build the graph. This function expects an array of two-element
    arrays (the start and end points of the roads).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 [第七章](ch07.xhtml#ch07) 的示例编写一个 ES 模块，该模块包含道路数组并将表示它们的图数据结构导出为 roadGraph。它依赖于一个导出函数
    buildGraph 的模块 *./graph.js*，该函数用于构建图。此函数期望一个由两个元素数组（道路的起点和终点）组成的数组。
- en: '*Circular Dependencies*'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*循环依赖*'
- en: A circular dependency is a situation where module A depends on B, and B also,
    directly or indirectly, depends on A. Many module systems simply forbid this because
    whichever order you choose for loading such modules, you cannot make sure that
    each module’s dependencies have been loaded before it runs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 循环依赖是一种情况，其中模块 A 依赖于 B，而 B 也直接或间接依赖于 A。许多模块系统简单地禁止这种情况，因为无论你选择哪种加载顺序，都无法确保在运行之前每个模块的依赖关系都已加载。
- en: CommonJS modules allow a limited form of cyclic dependencies. As long as the
    modules don’t access each other’s interface until after they finish loading, cyclic
    dependencies are OK.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CommonJS 模块允许有限形式的循环依赖。只要模块在加载完成之前不相互访问对方的接口，循环依赖是可以的。
- en: The require function given earlier in this chapter supports this type of dependency
    cycle. Can you see how it handles cycles?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面给出的 require 函数支持这种类型的依赖循环。你能看出它是如何处理循环的吗？
- en: '*Who can wait quietly while the mud settles? Who can remain still until the
    moment of action?*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*谁能静静等待泥沙沉淀？谁能保持静止直到行动的时刻？*'
- en: —Laozi, *Tao Te Ching*
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: —老子，《道德经》
- en: '![Image](../images/f0174-01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0174-01.jpg)'
