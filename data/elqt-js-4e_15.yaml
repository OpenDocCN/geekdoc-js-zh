- en: '13'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '13'
- en: JAVASCRIPT AND THE BROWSER
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAVASCRIPT 与浏览器
- en: The next chapters of this book will discuss web browsers. Without browsers,
    there would be no JavaScript— or if there were, no one would ever have paid any
    attention to it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的下一章节将讨论网页浏览器。没有浏览器，就没有JavaScript——或者即使有，也不会有人关注它。
- en: Web technology has been decentralized from the start, not just technically but
    also in terms of the way it evolved. Various browser vendors have added new functionality
    in ad hoc and sometimes poorly thought-out ways, which were then—sometimes—adopted
    by others, and finally set down in standards.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网络技术从一开始就是去中心化的，不仅在技术上如此，在其发展方式上也是如此。各种浏览器供应商以临时和有时考虑不周的方式添加了新功能，这些功能有时被其他人采纳，最终形成标准。
- en: This is both a blessing and a curse. On the one hand, it is empowering to not
    have a central party control a system but have it be improved by various parties
    working in loose collaboration (or occasionally, open hostility). On the other
    hand, the haphazard way in which the web was developed means that the resulting
    system is not exactly a shining example of internal consistency. Some parts of
    it are downright confusing and badly designed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这既是祝福也是诅咒。一方面，系统不被中央机构控制，而是通过不同方松散合作（或偶尔公开敌对）来改进，这是令人振奋的。另一方面，网络的发展方式杂乱无章，导致最终的系统并不完全是一个内部一致性的典范。其中一些部分令人困惑且设计糟糕。
- en: Networks and the Internet
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络与互联网
- en: Computer networks have been around since the 1950s. If you put cables between
    two or more computers and allow them to send data back and forth through these
    cables, you can do all kinds of wonderful things.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机网络自1950年代以来就存在。如果你在两台或多台计算机之间连接电缆，并允许它们通过这些电缆来回发送数据，你就可以做各种精彩的事情。
- en: If connecting two machines in the same building allows us to do wonderful things,
    connecting machines all over the planet should be even better. The technology
    to start implementing this vision was developed in the 1980s, and the resulting
    network is called the *internet*. It has lived up to its promise.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在同一栋大楼中连接两台机器可以让我们做出精彩的事情，那么连接遍布全球的机器应该会更好。实现这一愿景的技术是在1980年代开发的，结果形成的网络被称为*互联网*。它实现了自己的承诺。
- en: A computer can use this network to shoot bits at another computer. For any effective
    communication to arise out of this bit-shooting, the computers on both ends must
    know what the bits are supposed to represent. The meaning of any given sequence
    of bits depends entirely on the kind of thing that it is trying to express and
    on the encoding mechanism used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机可以使用这个网络向另一台计算机发送比特。要想从这种比特发送中产生有效的通信，双方的计算机必须知道这些比特所表示的内容。任何给定比特序列的含义完全取决于它试图表达的事物类型以及所使用的编码机制。
- en: A *network protocol* describes a style of communication over a network. There
    are protocols for sending email, for fetching email, for sharing files, and even
    for controlling computers that happen to be infected by malicious software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*网络协议*描述了网络上的一种通信方式。存在用于发送电子邮件、获取电子邮件、共享文件，甚至控制那些被恶意软件感染的计算机的协议。'
- en: 'The *HyperText Transfer Protocol (HTTP)* is a protocol for retrieving named
    resources (chunks of information, such as web pages or pictures). It specifies
    that the side making the request should start with a line like this, naming the
    resource and the version of the protocol that it is trying to use:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*超文本传输协议（HTTP）*是用于检索命名资源（信息块，如网页或图片）的协议。它规定发出请求的一方应以类似这样的行开始，命名所请求的资源及其试图使用的协议版本：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are many more rules about the way the requester can include more information
    in the request and the way the other side, which returns the resource, packages
    up its content. We’ll look at HTTP in a little more detail in [Chapter 18](ch18.xhtml#ch18).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于请求者如何在请求中包含更多信息，以及返回资源的另一方如何打包其内容，还有许多更多规则。我们将在[第18章](ch18.xhtml#ch18)中详细讨论HTTP。
- en: Most protocols are built on top of other protocols. HTTP treats the network
    as a streamlike device into which you can put bits and have them arrive at the
    correct destination in the correct order. Providing those guarantees on top of
    the primitive data-sending that the network gives you is already a rather tricky
    problem.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数协议都是建立在其他协议之上的。HTTP将网络视为一个流式设备，你可以将比特放入其中，并确保它们以正确的顺序到达正确的目的地。在网络提供的原始数据发送之上提供这些保证已经是一个相当棘手的问题。
- en: The *Transmission Control Protocol (TCP)* is a protocol that addresses this
    problem. All internet-connected devices “speak” it, and most communication on
    the internet is built on top of it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*传输控制协议（TCP）*是解决此问题的协议。所有连接到互联网的设备都“使用”它，大多数互联网通信都是基于此构建的。'
- en: 'A TCP connection works as follows: one computer must be waiting, or *listening*,
    for other computers to start talking to it. To be able to listen for different
    kinds of communication at the same time on a single machine, each listener has
    a number (called a *port*) associated with it. Most protocols specify which port
    should be used by default. For example, when we want to send an email using the
    SMTP protocol, the machine through which we send it is expected to be listening
    on port 25.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TCP连接的工作方式如下：一台计算机必须处于等待状态，或*监听*，以便其他计算机开始与之通信。为了能够在同一台机器上同时监听不同类型的通信，每个监听器都有一个与之关联的数字（称为*端口*）。大多数协议指定了默认应使用的端口。例如，当我们希望使用SMTP协议发送电子邮件时，发送电子邮件的机器应该在端口25上进行监听。
- en: Another computer can then establish a connection by connecting to the target
    machine using the correct port number. If the target machine can be reached and
    is listening on that port, the connection is successfully created. The listening
    computer is called the *server*, and the connecting computer is called the *client*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一台计算机可以通过使用正确的端口号连接到目标机器来建立连接。如果目标机器可以访问并在该端口上监听，则连接成功建立。监听的计算机称为*服务器*，而连接的计算机称为*客户端*。
- en: Such a connection acts as a two-way pipe through which bits can flow— the machines
    on both ends can put data into it. Once the bits are successfully transmitted,
    they can be read out again by the machine on the other side. This is a convenient
    model. You could say that TCP provides an abstraction of the network.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的连接充当了一个双向管道，数据位可以在其中流动——两端的机器都可以向其中输入数据。一旦数据位成功传输，另一侧的机器就可以再次读取。这是一个方便的模型。可以说，TCP提供了网络的抽象。
- en: The Web
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络
- en: The *World Wide Web* (not to be confused with the internet as a whole) is a
    set of protocols and formats that allow us to visit web pages in a browser. The
    word *Web* refers to the fact that such pages can easily link to each other, thus
    connecting into a huge mesh that users can move through.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*万维网*（不要与整体互联网混淆）是一组允许我们在浏览器中访问网页的协议和格式。*Web*一词指的是这些页面可以轻松相互链接，从而连接成一个庞大的网络，用户可以在其中移动。'
- en: To become part of the web, all you need to do is connect a machine to the internet
    and have it listen on port 80 with the HTTP protocol so that other computers can
    ask it for documents.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为网络的一部分，你只需将一台机器连接到互联网，并让它在端口80上使用HTTP协议进行监听，以便其他计算机可以请求文档。
- en: 'Each document on the web is named by a *uniform resource locator (URL)*, which
    looks something like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上的每个文档都有一个*统一资源定位符（URL）*，看起来像这样：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first part tells us that this URL uses the HTTP protocol (as opposed to,
    for example, encrypted HTTP, which would be *https://*). Then comes the part that
    identifies which server we are requesting the document from. Last is a path string
    that identifies the document (or *resource*) we are interested in.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: URL的第一部分告诉我们该URL使用HTTP协议（与加密的HTTP，例如*https://*相对）。接下来是标识我们请求文档的服务器的部分。最后是一个路径字符串，标识我们感兴趣的文档（或*资源*）。
- en: Machines connected to the internet get an *IP address*, a number that can be
    used to send messages to that machine, and looks something like 149.210.142.219
    or 2001:4860:4860::8888. Since lists of more or less random numbers are hard to
    remember and awkward to type, you can instead register a *domain name* for an
    address or set of addresses. I registered *eloquent [javascript.net](http://javascript.net)*
    to point at the IP address of a machine I control and can thus use that domain
    name to serve web pages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到互联网的机器会获得一个*IP地址*，这是一个可用于向该机器发送消息的数字，看起来像149.210.142.219或2001:4860:4860::8888。由于随意的数字组合很难记住且输入不便，你可以注册一个*域名*来指向一个地址或一组地址。我注册了*eloquent
    [javascript.net](http://javascript.net)*，以指向我控制的机器的IP地址，从而可以使用该域名来提供网页。
- en: If you type this URL into your browser’s address bar, the browser will try to
    retrieve and display the document at that URL. First, your browser has to find
    out what address *[eloquentjavascript.net](http://eloquentjavascript.net)* refers
    to. Then, using the HTTP protocol, it will make a connection to the server at
    that address and ask for the resource */13_browser.xhtml*. If all goes well, the
    server sends back a document, which your browser then displays on your screen.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器的地址栏中输入这个 URL，浏览器将尝试检索并显示该 URL 处的文档。首先，你的浏览器必须找出 *[eloquentjavascript.net](http://eloquentjavascript.net)*
    指的是什么地址。然后，使用 HTTP 协议，它将与该地址的服务器建立连接，并请求资源 */13_browser.xhtml*。如果一切顺利，服务器会返回一个文档，浏览器随后在你的屏幕上显示该文档。
- en: HTML
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: '*HTML*, which stands for HyperText Markup Language, is the document format
    used for web pages. An HTML document contains text, as well as *tags* that give
    structure to the text, describing things such as links, paragraphs, and headings.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTML*，即超文本标记语言，是用于网页的文档格式。一个 HTML 文档包含文本以及 *标签*，这些标签为文本提供结构，描述诸如链接、段落和标题等内容。'
- en: 'A short HTML document might look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简短的 HTML 文档可能如下所示：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is what such a document would look like in the browser:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，这样的文档可能看起来像这样：
- en: '![Image](../images/f0212-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0212-01.jpg)'
- en: The tags, wrapped in angle brackets (< and >, the symbols for “less than” and
    “greater than”), provide information about the structure of the document. The
    other text is just plaintext.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 标签用尖括号（< 和 >，分别表示“小于”和“大于”）包裹，提供有关文档结构的信息。其他文本则只是纯文本。
- en: The document starts with <!doctype html>, which tells the browser to interpret
    the page as *modern* HTML, as opposed to obsolete styles used in the past.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文档以 <!doctype html> 开始，这告诉浏览器将页面解释为 *现代* HTML，而不是过去使用的过时样式。
- en: HTML documents have a head and a body. The head contains information *about*
    the document, and the body contains the document itself. In this case, the head
    declares that the title of this document is “My home page” and that it uses the
    UTF-8 encoding, which is a way to encode Unicode text as binary data. The document’s
    body contains a heading (<h1>, meaning “heading 1”—<h2> to <h6> produce subheadings)
    and two paragraphs (<p>).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档有一个头部和一个主体。头部包含有关文档的信息 *about*，而主体包含文档本身。在这个例子中，头部声明该文档的标题是“My home page”，并且使用
    UTF-8 编码，这是一种将 Unicode 文本编码为二进制数据的方法。文档的主体包含一个标题（<h1>，意为“标题 1”——<h2> 到 <h6> 产生子标题）和两个段落（<p>）。
- en: Tags come in several forms. An element, such as the body, a paragraph, or a
    link, is started by an *opening tag* like <p> and ended by a *closing tag* like
    </p>. Some opening tags, such as the one for the link (<a>), contain extra information
    in the form of name=“value” pairs. These are called *attributes*. In this case,
    the destination of the link is indicated with href=“http://eloquent javascript.net”,
    where href stands for “hypertext reference.”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 标签有多种形式。一个元素，例如主体、段落或链接，是由一个 *开标签* 开始的，例如 <p>，并由一个 *闭标签* 结束，例如 </p>。一些开标签，例如链接的标签（<a>），包含以
    name=“value” 形式表示的额外信息。这些称为 *属性*。在这种情况下，链接的目标通过 href=“http://eloquentjavascript.net”
    指示，其中 href 代表“超文本引用”。
- en: Some kinds of tags do not enclose anything and thus do not need to be closed.
    The metadata tag <meta charset=“utf-8”> is an example of this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的标签不包含任何内容，因此不需要闭合。元数据标签 <meta charset=“utf-8”> 就是一个例子。
- en: To be able to include angle brackets in the text of a document even though they
    have a special meaning in HTML, yet another form of special notation has to be
    introduced. A plain opening angle bracket is written as &lt; (“less than”), and
    a closing bracket is written as &gt; (“greater than”). In HTML, an ampersand (&)
    character followed by a name or character code and a semicolon (;) is called an
    *entity* and will be replaced by the character it encodes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在文档的文本中包含尖括号，尽管它们在 HTML 中有特殊含义，还需要引入另一种特殊表示法。一个普通的开尖括号写作 &lt;（“小于”），而闭括号写作
    &gt;（“大于”）。在 HTML 中，一个与名称或字符代码和分号（;）相连的和字符（&）称为 *实体*，它将被替换为它所编码的字符。
- en: This is analogous to the way backslashes are used in JavaScript strings. Since
    this mechanism gives ampersand characters a special meaning too, they need to
    be escaped as &amp;. Inside attribute values, which are wrapped in double quotes,
    &quot; can be used to insert a literal quote character.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于反斜杠在 JavaScript 字符串中的用法。由于此机制也使得和字符具有特殊含义，因此它们需要被转义为 &amp;。在用双引号包裹的属性值中，可以使用
    &quot; 来插入字面上的引号字符。
- en: HTML is parsed in a remarkably error-tolerant way. When tags that should be
    there are missing, the browser automatically adds them. The way this is done has
    been standardized, and you can rely on all modern browsers to do it in the same
    way.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: HTML以一种非常容错的方式进行解析。当应该存在的标签缺失时，浏览器会自动添加它们。这个过程已经标准化，你可以依赖所有现代浏览器以相同的方式来执行。
- en: 'The following document will be treated just like the one shown previously:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文档将像之前显示的文档一样处理：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The <html>, <head>, and <body> tags are completely gone. The browser knows that
    <meta> and <title> belong in the head and that <h1> means the body has started.
    Furthermore, I am no longer explicitly closing the paragraphs, since opening a
    new paragraph or ending the document will close them implicitly. The quotes around
    the attribute values are also gone.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <html>、<head>和<body>标签完全消失。浏览器知道<meta>和<title>属于头部，而<h1>表示正文已经开始。此外，我不再明确关闭段落，因为打开新段落或结束文档会隐式关闭它们。属性值周围的引号也消失了。
- en: This book will usually omit the <html>, <head>, and <body> tags from examples
    to keep them short and free of clutter. I *will* close tags and include quotes
    around attributes, though.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本书通常会在示例中省略<html>、<head>和<body>标签，以保持简洁并避免杂乱。不过，我*会*关闭标签并在属性周围包含引号。
- en: I will also usually omit the doctype and charset declaration. Don’t take this
    as encouragement to drop these from HTML documents. Browsers will often do ridiculous
    things when you forget them. Consider the doctype and the charset metadata to
    be implicitly present in examples, even when they are not actually shown in the
    text.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常还会省略doctype和charset声明。不要把这当作鼓励在HTML文档中去掉这些的理由。当你忘记这些时，浏览器往往会做出荒谬的事情。即使在示例中没有实际显示，doctype和charset元数据也应被视为隐式存在。
- en: HTML and JavaScript
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML和JavaScript
- en: In the context of this book, the most important HTML tag is <script>, which
    allows us to include a piece of JavaScript in a document.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的上下文中，最重要的HTML标签是<script>，它允许我们在文档中包含一段JavaScript。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Such a script will run as soon as its <script> tag is encountered while the
    browser reads the HTML. This page will pop up a dialog when opened—the alert function
    resembles prompt, in that it pops up a little window, but only shows a message
    without asking for input.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的脚本将在浏览器读取HTML时遇到<script>标签时立即运行。打开此页面时将弹出一个对话框——alert函数类似于prompt，它会弹出一个小窗口，但只显示消息而不要求输入。
- en: Including large programs directly in HTML documents is often impractical. The
    <script> tag can be given an src attribute to fetch a script file (a text file
    containing a JavaScript program) from a URL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在HTML文档中包含大型程序通常不切实际。<script>标签可以设置一个src属性，从URL中获取一个脚本文件（包含JavaScript程序的文本文件）。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The *code/hello.js* file included here contains the same program—alert (“hello!”).
    When an HTML page references other URLs as part of itself, such as an image file
    or a script, web browsers will retrieve them immediately and include them in the
    page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包含的*code/hello.js*文件包含相同的程序——alert（“hello！”）。当HTML页面引用其他URL作为其一部分时，例如图像文件或脚本，网络浏览器会立即检索它们并将其包含在页面中。
- en: A script tag must always be closed with </script>, even if it refers to a script
    file and doesn’t contain any code. If you forget this, the rest of the page will
    be interpreted as part of the script.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本标签必须始终以</script>关闭，即使它引用的是脚本文件并且不包含任何代码。如果你忘记这一点，页面的其余部分将被解释为脚本的一部分。
- en: You can load ES modules (see [Chapter 10](ch10.xhtml#ch10)) in the browser by
    giving your script tag a type=“module” attribute. Such modules can depend on other
    modules by using URLs relative to themselves as module names in import declarations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过给脚本标签添加type=“module”属性在浏览器中加载ES模块（见[第10章](ch10.xhtml#ch10)）。这样的模块可以通过在导入声明中使用相对于自身的URL作为模块名称来依赖其他模块。
- en: Some attributes can also contain a JavaScript program. The <button> tag (which
    shows up as a button) supports an onclick attribute. The attribute’s value will
    be run whenever the button is clicked.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些属性也可以包含JavaScript程序。<button>标签（显示为按钮）支持onclick属性。每当按钮被点击时，属性的值将被执行。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that I had to use single quotes for the string in the onclick attribute
    because double quotes are already used to quote the whole attribute. I could also
    have used &quot; to escape the inner quotes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我必须在onclick属性的字符串中使用单引号，因为双引号已经用来引用整个属性。我也可以使用 &quot; 来转义内部引号。
- en: In the Sandbox
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在沙盒中
- en: Running programs downloaded from the internet is potentially dangerous. You
    don’t know much about the people behind most sites you visit, and they do not
    necessarily mean well. Running programs by malicious actors is how you get your
    computer infected by viruses, your data stolen, and your accounts hacked.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从互联网上下载的程序潜在地危险。你对大多数你访问的网站背后的人知之甚少，他们并不一定有好的意图。运行恶意行为者的程序就是让你的计算机感染病毒、数据被盗和账户被黑的方式。
- en: 'Yet the attraction of the web is that you can browse it without necessarily
    trusting all the pages you visit. This is why browsers severely limit the things
    a JavaScript program may do: it can’t look at the files on your computer or modify
    anything not related to the web page it was embedded in.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，网络的吸引力在于你可以浏览它，而不必信任你访问的所有页面。这就是为什么浏览器对JavaScript程序能做的事情限制得非常严格：它不能查看你电脑上的文件，也不能修改与其嵌入的网页无关的任何内容。
- en: Isolating a programming environment in this way is called *sandboxing*, the
    idea being that the program is harmlessly playing in a sandbox. But you should
    imagine this particular kind of sandbox as having a cage of thick steel bars over
    it so that the programs playing in it can’t actually get out.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式隔离编程环境称为*沙箱*，其理念是程序在沙箱中无害地进行操作。但你应该想象这种沙箱是有厚钢栏杆围住的，以便在其中玩耍的程序无法真正逃脱。
- en: The hard part of sandboxing is allowing programs enough room to be useful while
    restricting them from doing anything dangerous. Lots of useful functionality,
    such as communicating with other servers or reading the content of the copy-paste
    clipboard, can also be used for problematic, privacy-invading purposes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 沙箱技术的难点在于为程序提供足够的空间以保持其有用性，同时限制其进行任何危险操作。许多有用的功能，比如与其他服务器通信或读取剪贴板的内容，也可能被用于问题性和侵犯隐私的目的。
- en: Every now and then, someone comes up with a new way to circumvent the limitations
    of a browser and do something harmful, ranging from leaking minor private information
    to taking over the whole machine on which the browser is running. The browser
    developers respond by fixing the hole, and all is well again—until the next problem
    is discovered, and hopefully publicized rather than secretly exploited by some
    government agency or criminal organization.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 时不时会有人提出新的方法，绕过浏览器的限制并做一些有害的事情，从泄露小的私人信息到接管运行浏览器的整个机器。浏览器开发者们会通过修补漏洞来回应，事情又恢复正常——直到下一个问题被发现，并希望这次是公开的，而不是被某个政府机构或犯罪组织秘密利用。
- en: Compatibility and the Browser Wars
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 兼容性和浏览器战争
- en: In the early stages of the web, a browser called Mosaic dominated the market.
    After a few years, the balance shifted to Netscape, which was, in turn, largely
    supplanted by Microsoft’s Internet Explorer. At any point where a single browser
    was dominant, that browser’s vendor would feel entitled to unilaterally invent
    new features for the web. Since most users used the most popular browser, websites
    would simply start using those features—never mind the other browsers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络的早期阶段，一款名为Mosaic的浏览器主导了市场。几年后，市场的平衡转向了Netscape，随后又被微软的Internet Explorer大部分取代。在单一浏览器占据主导地位的时期，该浏览器的供应商往往觉得有权单方面为网络发明新功能。由于大多数用户使用最受欢迎的浏览器，网站便开始简单地使用这些功能——而不考虑其他浏览器。
- en: This was the dark age of compatibility, often called the *browser wars*. Web
    developers were left with not one unified web but two or three incompatible platforms.
    To make things worse, the browsers in use around 2003 were all full of bugs, and
    of course the bugs were different for each browser. Life was hard for people writing
    web pages.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一段兼容性黑暗时代，通常被称为*浏览器战争*。网页开发者们面临的不是一个统一的网络，而是两个或三个不兼容的平台。更糟糕的是，2003年左右使用的浏览器都有很多漏洞，当然每个浏览器的漏洞也各不相同。为网页编写代码的人们的生活非常艰难。
- en: Mozilla Firefox, a not-for-profit offshoot of Netscape, challenged Internet
    Explorer’s position in the late 2000s. Because Microsoft was not particularly
    interested in staying competitive at the time, Firefox took a lot of market share
    away from it. Around the same time, Google introduced its Chrome browser and Apple’s
    Safari browser gained popularity, leading to a situation where there were four
    major players rather than one.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Firefox是Netscape的一个非营利分支，在2000年代末挑战了Internet Explorer的市场地位。因为微软当时并不特别关注保持竞争力，Firefox从其手中夺走了大量市场份额。与此同时，谷歌推出了Chrome浏览器，苹果的Safari浏览器也开始受到欢迎，导致市场上出现了四大主要玩家，而非只有一个。
- en: The new players had a more serious attitude toward standards and better engineering
    practices, giving us less incompatibility and fewer bugs. Microsoft, seeing its
    market share crumble, came around and adopted these attitudes in its Edge browser,
    which replaced Internet Explorer. If you are starting to learn web development
    today, consider yourself lucky. The latest versions of the major browsers behave
    quite uniformly and have relatively few bugs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 新的参与者对标准和工程实践持有更加严肃的态度，从而减少了不兼容性和漏洞。微软看到其市场份额急剧下降，开始采纳这些态度，在其取代Internet Explorer的Edge浏览器中实施。如果你今天开始学习网络开发，可以认为自己很幸运。主要浏览器的最新版本表现得相当一致，且相对较少出现漏洞。
- en: Unfortunately, with Firefox’s market share getting ever smaller, and Edge becoming
    just a wrapper around Chrome’s core in 2018, this uniformity might once again
    take the form of a single vendor—Google, this time— having enough control over
    the browser market to push its idea of what the web should look like onto the
    rest of the world.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，随着Firefox的市场份额越来越小，而Edge在2018年仅仅成为Chrome内核的外壳，这种统一性可能再次变成单一供应商——这次是谷歌——在浏览器市场上拥有足够的控制权，将其对网络的看法强加于世界其他地方。
- en: This long chain of historical events and accidents produced the web platform
    that we have today. In the next chapters, we are going to write programs for it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列历史事件和偶然事故造就了我们今天所拥有的网络平台。在接下来的章节中，我们将为其编写程序。
- en: '*Too bad! Same old story! Once you’ve finished building your house you notice
    you’ve accidentally learned something that you really should have known—before
    you started.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*真可惜！老调重弹！一旦你建好了房子，你会发现自己意外学到了一些你本该在开始之前就知道的东西。*'
- en: —Friedrich Nietzsche, *Beyond Good and Evil*
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: —弗里德里希·尼采，*超越善恶*
- en: '![Image](../images/f0216-01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0216-01.jpg)'
