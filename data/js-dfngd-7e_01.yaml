- en: Chapter 1\. Introduction to JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 介绍JavaScript
- en: JavaScript is the programming language of the web. The overwhelming majority
    of websites use JavaScript, and all modern web browsers—on desktops, tablets,
    and phones—include JavaScript interpreters, making JavaScript the most-deployed
    programming language in history. Over the last decade, Node.js has enabled JavaScript
    programming outside of web browsers, and the dramatic success of Node means that
    JavaScript is now also the most-used programming language among software developers.
    Whether you’re starting from scratch or are already using JavaScript professionally,
    this book will help you master the language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是Web的编程语言。绝大多数网站使用JavaScript，并且所有现代Web浏览器——无论是桌面、平板还是手机——都包含JavaScript解释器，使JavaScript成为历史上部署最广泛的编程语言。在过去的十年中，Node.js使JavaScript编程超越了Web浏览器，Node的巨大成功意味着JavaScript现在也是软件开发人员中使用最广泛的编程语言。无论您是从零开始还是已经专业使用JavaScript，本书都将帮助您掌握这门语言。
- en: If you are already familiar with other programming languages, it may help you
    to know that JavaScript is a high-level, dynamic, interpreted programming language
    that is well-suited to object-oriented and functional programming styles. JavaScript’s
    variables are untyped. Its syntax is loosely based on Java, but the languages
    are otherwise unrelated. JavaScript derives its first-class functions from Scheme
    and its prototype-based inheritance from the little-known language Self. But you
    do not need to know any of those languages, or be familiar with those terms, to
    use this book and learn JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经熟悉其他编程语言，了解JavaScript是一种高级、动态、解释性编程语言，非常适合面向对象和函数式编程风格，可能会对您有所帮助。JavaScript的变量是无类型的。其语法在很大程度上基于Java，但这两种语言在其他方面没有关联。JavaScript从Scheme语言中继承了头等函数，从鲜为人知的Self语言中继承了基于原型的继承。但您不需要了解这些语言，或熟悉这些术语，就可以使用本书学习JavaScript。
- en: The name “JavaScript” is quite misleading. Except for a superficial syntactic
    resemblance, JavaScript is completely different from the Java programming language.
    And JavaScript has long since outgrown its scripting-language roots to become
    a robust and efficient general-purpose language suitable for serious software
    engineering and projects with huge codebases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 名称“JavaScript”非常具有误导性。除了表面上的语法相似性外，JavaScript与Java编程语言完全不同。JavaScript早已超越了其脚本语言的起源，成为一种强大而高效的通用语言，适用于严肃的软件工程和具有庞大代码库的项目。
- en: To be useful, every language must have a platform, or standard library, for
    performing things like basic input and output. The core JavaScript language defines
    a minimal API for working with numbers, text, arrays, sets, maps, and so on, but
    does not include any input or output functionality. Input and output (as well
    as more sophisticated features, such as networking, storage, and graphics) are
    the responsibility of the “host environment” within which JavaScript is embedded.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要有用，每种语言都必须有一个平台或标准库，用于执行诸如基本输入和输出之类的操作。核心JavaScript语言定义了一个最小的API，用于处理数字、文本、数组、集合、映射等，但不包括任何输入或输出功能。输入和输出（以及更复杂的功能，如网络、存储和图形）是嵌入JavaScript的“主机环境”的责任。
- en: The original host environment for JavaScript was a web browser, and this is
    still the most common execution environment for JavaScript code. The web browser
    environment allows JavaScript code to obtain input from the user’s mouse and keyboard
    and by making HTTP requests. And it allows JavaScript code to display output to
    the user with HTML and CSS.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的原始主机环境是Web浏览器，这仍然是JavaScript代码最常见的执行环境。Web浏览器环境允许JavaScript代码通过用户的鼠标和键盘输入以及通过进行HTTP请求来获取输入。它还允许JavaScript代码使用HTML和CSS向用户显示输出。
- en: Since 2010, another host environment has been available for JavaScript code.
    Instead of constraining JavaScript to work with the APIs provided by a web browser,
    Node gives JavaScript access to the entire operating system, allowing JavaScript
    programs to read and write files, send and receive data over the network, and
    make and serve HTTP requests. Node is a popular choice for implementing web servers
    and also a convenient tool for writing simple utility scripts as an alternative
    to shell scripts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自2010年以来，JavaScript代码还有另一个主机环境可供选择。与将JavaScript限制在与Web浏览器提供的API一起使用不同，Node使JavaScript可以访问整个操作系统，允许JavaScript程序读写文件，通过网络发送和接收数据，并进行和提供HTTP请求。Node是实现Web服务器的热门选择，也是编写简单实用程序脚本的便捷工具，可作为shell脚本的替代品。
- en: Most of this book is focused on the JavaScript language itself. [Chapter 11](ch11.xhtml#builtintypes)
    documents the JavaScript standard library, [Chapter 15](ch15.xhtml#clientside)
    introduces the web browser host environment, and [Chapter 16](ch16.xhtml#serverside)
    introduces the Node host environment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书大部分内容都集中在JavaScript语言本身上。[第11章](ch11.xhtml#builtintypes)记录了JavaScript标准库，[第15章](ch15.xhtml#clientside)介绍了Web浏览器主机环境，[第16章](ch16.xhtml#serverside)介绍了Node主机环境。
- en: 'This book covers low-level fundamentals first, and then builds on those to
    more advanced and higher-level abstractions. The chapters are intended to be read
    more or less in order. But learning a new programming language is never a linear
    process, and describing a language is not linear either: each language feature
    is related to other features, and this book is full of cross-references—sometimes
    backward and sometimes forward—to related material. This introductory chapter
    makes a quick first pass through the language, introducing key features that will
    make it easier to understand the in-depth treatment in the chapters that follow.
    If you are already a practicing JavaScript programmer, you can probably skip this
    chapter. (Although you might enjoy reading [Example 1-1](#charfreq.js) at the
    end of the chapter before you move on.)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书首先涵盖低级基础知识，然后构建在此基础上，向更高级和更高级的抽象发展。这些章节应该按照更多或更少的顺序阅读。但是学习新的编程语言从来不是一个线性过程，描述一种语言也不是线性的：每个语言特性都与其他特性相关联，本书充满了交叉引用——有时是向后，有时是向前——到相关材料。本介绍性章节快速地介绍了语言的关键特性，这将使您更容易理解后续章节中的深入讨论。如果您已经是一名实践的JavaScript程序员，您可能可以跳过本章节。（尽管在继续之前，您可能会喜欢阅读[示例 1-1](#charfreq.js)）
- en: 1.1 Exploring JavaScript
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 探索JavaScript
- en: When learning a new programming language, it’s important to try the examples
    in the book, then modify them and try them again to test your understanding of
    the language. To do that, you need a JavaScript interpreter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学习新的编程语言时，重要的是尝试书中的示例，然后修改它们并再次尝试以测试您对语言的理解。为此，您需要一个JavaScript解释器。
- en: The easiest way to try out a few lines of JavaScript is to open up the web developer
    tools in your web browser (with F12, Ctrl-Shift-I, or Command-Option-I) and select
    the Console tab. You can then type code at the prompt and see the results as you
    type. Browser developer tools often appear as panes at the bottom or right of
    the browser window, but you can usually detach them as separate windows (as pictured
    in [Figure 1-1](Images/#console.png)), which is often quite convenient.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试几行JavaScript代码的最简单方法是在您的网络浏览器中打开Web开发者工具（使用F12、Ctrl-Shift-I或Command-Option-I），然后选择控制台选项卡。然后，您可以在提示符处输入代码并在输入时查看结果。浏览器开发者工具通常显示为浏览器窗口底部或右侧的窗格，但通常可以将它们分离为单独的窗口（如[图1-1](Images/#console.png)所示），这通常非常方便。
- en: '![js7e 0101](Images/js7e_0101.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![js7e 0101](Images/js7e_0101.png)'
- en: Figure 1-1\. The JavaScript console in Firefox’s Developer Tools
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. Firefox开发者工具中的JavaScript控制台
- en: 'Another way to try out JavaScript code is to download and install Node from
    [*https://nodejs.org*](https://nodejs.org). Once Node is installed on your system,
    you can simply open a Terminal window and type **`node`** to begin an interactive
    JavaScript session like this one:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试JavaScript代码的另一种方法是从[*https://nodejs.org*](https://nodejs.org)下载并安装Node。安装Node后，您只需打开一个终端窗口并输入**`node`**即可开始像这样进行交互式JavaScript会话：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1.2 Hello World
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 你好，世界
- en: 'When you are ready to start experimenting with longer chunks of code, these
    line-by-line interactive environments may no longer be suitable, and you will
    probably prefer to write your code in a text editor. From there, you can copy
    and paste to the JavaScript console or into a Node session. Or you can save your
    code to a file (the traditional filename extension for JavaScript code is *.js*)
    and then run that file of JavaScript code with Node:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备开始尝试更长的代码块时，这些逐行交互式环境可能不再适用，您可能更喜欢在文本编辑器中编写代码。从那里，您可以将代码复制粘贴到JavaScript控制台或Node会话中。或者您可以将代码保存到文件中（JavaScript代码的传统文件扩展名为*.js*），然后使用Node运行该JavaScript代码文件：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you use Node in a noninteractive manner like this, it won’t automatically
    print out the value of all the code you run, so you’ll have to do that yourself.
    You can use the function `console.log()` to display text and other JavaScript
    values in your terminal window or in a browser’s developer tools console. So,
    for example, if you create a *hello.js* file containing this line of code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您像这样以非交互方式使用Node，它不会自动打印出您运行的所有代码的值，因此您需要自己执行。您可以使用函数`console.log()`在终端窗口或浏览器的开发者工具控制台中显示文本和其他JavaScript值。例如，如果您创建一个包含以下代码行的*hello.js*文件：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: and execute the file with `node hello.js`, you’ll see the message “Hello World!”
    printed out.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用`node hello.js`执行文件，您将看到打印出“Hello World!”的消息。
- en: 'If you want to see that same message printed out in the JavaScript console
    of a web browser, create a new file named *hello.html*, and put this text in it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在网络浏览器的JavaScript控制台中看到相同的消息打印出来，请创建一个名为*hello.html*的新文件，并将以下文本放入其中：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then load *hello.html* into your web browser using a `file://` URL like this
    one:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`file://` URL将*hello.html*加载到您的网络浏览器中，就像这样：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open the developer tools window to see the greeting in the console.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开开发者工具窗口以在控制台中查看问候语。
- en: 1.3 A Tour of JavaScript
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 JavaScript之旅
- en: 'This section presents a quick introduction, through code examples, to the JavaScript
    language. After this introductory chapter, we dive into JavaScript at the lowest
    level: [Chapter 2](ch02.xhtml#lexical) explains things like JavaScript comments,
    semicolons, and the Unicode character set. [Chapter 3](ch03.xhtml#datatypes) starts
    to get more interesting: it explains JavaScript variables and the values you can
    assign to those variables.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过代码示例快速介绍了JavaScript语言。在这个介绍性章节之后，我们将从最低级别深入JavaScript：[第2章](ch02.xhtml#lexical)解释了JavaScript注释、分号和Unicode字符集等内容。[第3章](ch03.xhtml#datatypes)开始变得更有趣：它解释了JavaScript变量以及您可以分配给这些变量的值。
- en: 'Here’s some sample code to illustrate the highlights of those two chapters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些示例代��来说明这两章的亮点：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Two other very important *types* that JavaScript programs can manipulate are
    objects and arrays. These are the subjects of Chapters [6](ch06.xhtml#objects)
    and [7](ch07.xhtml#arrays), but they are so important that you’ll see them many
    times before you reach those chapters:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript程序可以操作的另外两个非常重要的*类型* 是对象和数组。这是[第6章](ch06.xhtml#objects)和[第7章](ch07.xhtml#arrays)的主题，但它们非常重要，以至于在到达这些章节之前你会看到它们很多次：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The syntax illustrated here for listing array elements within square braces
    or mapping object property names to property values inside curly braces is known
    as an *initializer expression*, and it is just one of the topics of [Chapter 4](ch04.xhtml#expressions).
    An *expression* is a phrase of JavaScript that can be *evaluated* to produce a
    value. For example, the use of `.` and `[]` to refer to the value of an object
    property or array element is an expression.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示的用方括号列出数组元素或在花括号内将对象属性名映射到属性值的语法被称为*初始化表达式*，这只是[第4章](ch04.xhtml#expressions)的一个主题。*表达式*
    是JavaScript的短语，可以*评估*以产生一个值。例如，使用`.`和`[]`来引用对象属性或数组元素的值就是一个表达式。
- en: 'One of the most common ways to form expressions in JavaScript is to use *operators*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中形成表达式的最常见方式之一是使用*运算符*：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If JavaScript expressions are like phrases, then JavaScript *statements* are
    like full sentences. Statements are the topic of [Chapter 5](ch05.xhtml#statements).
    Roughly, an expression is something that computes a value but doesn’t *do* anything:
    it doesn’t alter the program state in any way. Statements, on the other hand,
    don’t have a value, but they do alter the state. You’ve seen variable declarations
    and assignment statements above. The other broad category of statement is *control
    structures*, such as conditionals and loops. You’ll see examples below, after
    we cover functions.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript表达式就像短语，那么JavaScript *语句* 就像完整的句子。语句是[第5章](ch05.xhtml#statements)的主题。粗略地说，表达式是计算值但不执行任何操作的东西：它不以任何方式改变程序状态。另一方面，语句没有值，但它们会改变状态。你已经在上面看到了变量声明和赋值语句。另一个广泛的语句类别是*控制结构*，如条件语句和循环。在我们讨论完函数之后，你将在下面看到示例。
- en: 'A *function* is a named and parameterized block of JavaScript code that you
    define once, and can then invoke over and over again. Functions aren’t covered
    formally until [Chapter 8](ch08.xhtml#functions), but like objects and arrays,
    you’ll see them many times before you get to that chapter. Here are some simple
    examples:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数* 是一段命名和带参数的JavaScript代码块，你定义一次，然后可以反复调用。函数直到[第8章](ch08.xhtml#functions)才会正式介绍，但与对象和数组一样，你在到达该章之前会看到它们很多次。这里有一些简单的示例：'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In ES6 and later, there is a shorthand syntax for defining functions. This
    concise syntax uses `=>` to separate the argument list from the function body,
    so functions defined this way are known as *arrow functions*. Arrow functions
    are most commonly used when you want to pass an unnamed function as an argument
    to another function. The preceding code looks like this when rewritten to use
    arrow functions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6及更高版本中，有一种用于定义函数的简洁语法。这种简洁语法使用`=>`将参数列表与函数体分开，因此用这种方式定义的函数被称为*箭头函数*。箭头函数在想要将匿名函数作为另一个函数的参数传递时最常用。前面的代码重写为使用箭头函数时如下所示：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we use functions with objects, we get *methods*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将函数与对象一起使用时，我们得到*方法*：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, as promised, here are some functions whose bodies demonstrate common JavaScript
    control structure statements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如承诺的那样，这里有一些函数，它们的主体演示了常见的JavaScript控制结构语句：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'JavaScript supports an object-oriented programming style, but it is significantly
    different than “classical” object-oriented programming languages. [Chapter 9](ch09.xhtml#classes)
    covers object-oriented programming in JavaScript in detail, with lots of examples.
    Here is a very simple example that demonstrates how to define a JavaScript class
    to represent 2D geometric points. Objects that are instances of this class have
    a single method, named `distance()`, that computes the distance of the point from
    the origin:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持面向对象的编程风格，但与“经典”面向对象编程语言有很大不同。[第9章](ch09.xhtml#classes)详细介绍了JavaScript中的面向对象编程，提供了大量示例。下面是一个非常简单的示例，演示了如何定义一个JavaScript类来表示2D几何点。这个类的实例对象具有一个名为`distance()`的方法，用于计算点到原点的距离：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This introductory tour of JavaScript’s fundamental syntax and capabilities
    ends here, but the book continues with self-contained chapters that cover additional
    features of the language:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍了JavaScript基本语法和功能的入门之旅到此结束，但本书将继续涵盖语言的其他特性的独立章节：
- en: '[Chapter 10, *Modules*](ch10.xhtml#modules)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章，*模块*](ch10.xhtml#modules)'
- en: Shows how JavaScript code in one file or script can use JavaScript functions
    and classes defined in other files or scripts.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 展示了一个文件或脚本中的JavaScript代码如何使用其他文件或脚本中定义的JavaScript函数和类。
- en: '[Chapter 11, *The JavaScript Standard Library*](ch11.xhtml#builtintypes)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章，*JavaScript标准库*](ch11.xhtml#builtintypes)'
- en: Covers the built-in functions and classes that are available to all JavaScript
    programs. This includes important data stuctures like maps and sets, a regular
    expression class for textual pattern matching, functions for serializing JavaScript
    data structures, and much more.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖了所有JavaScript程序都可以使用的内置函数和类。这包括重要的数据结构如映射和集合，用于文本模式匹配的正则表达式���，用于序列化JavaScript数据结构的函数等等。
- en: '[Chapter 12, *Iterators and Generators*](ch12.xhtml#itergene)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章，*迭代器和生成器*](ch12.xhtml#itergene)'
- en: Explains how the `for/of` loop works and how you can make your own classes iterable
    with `for/of`. It also covers generator functions and the `yield` statement.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解释了`for/of`循环的工作原理以及如何使自己的类可迭代使用`for/of`。还涵盖了生成器函数和`yield`语句。
- en: '[Chapter 13, *Asynchronous JavaScript*](ch13.xhtml#async)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[第13章，*异步JavaScript*](ch13.xhtml#async)'
- en: This chapter is an in-depth exploration of asynchronous programming in JavaScript,
    covering callbacks and events, Promise-based APIs, and the `async` and `await`
    keywords. Although the core JavaScript language is not asynchronous, asynchronous
    APIs are the default in both web browsers and Node, and this chapter explains
    the techniques for working with those APIs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了 JavaScript 中的异步编程，涵盖了回调和事件、基于 Promise 的 API，以及`async`和`await`关键字。尽管核心
    JavaScript 语言不是异步的，但异步 API 在 Web 浏览器和 Node 中是默认的，本章解释了处理这些 API 的技术。
- en: '[Chapter 14, *Metaprogramming*](ch14.xhtml#metaprogramming)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章，*元编程*](ch14.xhtml#metaprogramming)'
- en: Introduces a number of advanced features of JavaScript that may be of interest
    to programmers writing libraries of code for other JavaScript programmers to use.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了一些对编写供其他 JavaScript 程序员使用的代码库感兴趣的 JavaScript 的高级特性。
- en: '[Chapter 15, *JavaScript in Web Browsers*](ch15.xhtml#clientside)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[第15章，*Web 浏览器中的 JavaScript*](ch15.xhtml#clientside)'
- en: Introduces the web browser host environment, explains how web browsers execute
    JavaScript code, and covers the most important of the many APIs defined by web
    browsers. This is by far the longest chapter in the book.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了 Web 浏览器主机环境，解释了 Web 浏览器如何执行 JavaScript 代码，并涵盖了 Web 浏览器定义的许多重要 API 中最重要的部分。这是本书中迄今为止最长的一章。
- en: '[Chapter 16, *Server-Side JavaScript with Node*](ch16.xhtml#serverside)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[第16章，*使用 Node 进行服务器端 JavaScript*](ch16.xhtml#serverside)'
- en: Introduces the Node host environment, covering the fundamental programming model
    and the data structures and APIs that are most important to understand.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了 Node 主机环境，涵盖了最重要的编程模型、数据结构和 API，这些内容是最重要的理解。
- en: '[Chapter 17, *JavaScript Tools and Extensions*](ch17.xhtml#extensions)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[第17章，*JavaScript 工具和扩展*](ch17.xhtml#extensions)'
- en: Covers tools and language extensions that are worth knowing about because they
    are widely used and may make you a more productive programmer.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖了一些值得了解的工具和语言扩展，因为它们被广泛使用，可能会使您成为更高效的程序员。
- en: '1.4 Example: Character Frequency Histograms'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.4 示例：字符频率直方图
- en: 'This chapter concludes with a short but nontrivial JavaScript program. [Example 1-1](#charfreq.js)
    is a Node program that reads text from standard input, computes a character frequency
    histogram from that text, and then prints out the histogram. You could invoke
    the program like this to analyze the character frequency of its own source code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章以一个简短但非平凡的 JavaScript 程序结尾。[示例 1-1](#charfreq.js) 是一个 Node 程序，从标准输入读取文本，计算该文本的字符频率直方图，然后打印出直方图。您可以像这样调用程序来分析其自身源代码的字符频率：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This example uses a number of advanced JavaScript features and is intended to
    demonstrate what real-world JavaScript programs can look like. You should not
    expect to understand all of the code yet, but be assured that all of it will be
    explained in the chapters that follow.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用了许多高级 JavaScript 特性，旨在演示真实世界的 JavaScript 程序可能是什么样子。您不应该期望立即理解所有代码，但请放心，所有内容将在接下来的章节中解释。
- en: Example 1-1\. Computing character frequency histograms with JavaScript
  id: totrans-68
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. 使用 JavaScript 计算字符频率直方图
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 1.5 Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5 总结
- en: This book explains JavaScript from the bottom up. This means that we start with
    low-level details like comments, identifiers, variables, and types; then build
    to expressions, statements, objects, and functions; and then cover high-level
    language abstractions like classes and modules. I take the word *definitive* in
    the title of this book seriously, and the coming chapters explain the language
    at a level of detail that may feel off-putting at first. True mastery of JavaScript
    requires an understanding of the details, however, and I hope that you will make
    time to read this book cover to cover. But please don’t feel that you need to
    do that on your first reading. If you find yourself feeling bogged down in a section,
    simply skip to the next. You can come back and master the details once you have
    a working knowledge of the language as a whole.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从底层向上解释 JavaScript。这意味着我们从注释、标识符、变量和类型等低级细节开始；然后构建表达式、语句、对象和函数；然后涵盖类和模块等高级语言抽象。我认真对待本书标题中的“权威”一词，接下来的章节将以可能一开始感觉令人望而却步的细节水平解释语言。然而，真正掌握
    JavaScript 需要理解这些细节，我希望您能抽出时间从头到尾阅读本书。但请不要觉得您需要在第一次阅读时就这样做。如果发现自己在某一部分感到困惑，请直接跳到下一部分。一旦对整个语言有了工作知识，您可以回来掌握细节。
