- en: '5'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '5'
- en: HIGHER-ORDER FUNCTIONS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高阶函数
- en: A large program is a costly program, and not just because of the time it takes
    to build. Size almost always involves complexity, and complexity confuses programmers.
    Confused programmers, in turn, introduce mistakes (*bugs*) into programs. A large
    program then provides a lot of space for these bugs to hide, making them hard
    to find.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个大型程序是一个高成本的程序，这不仅仅是因为构建它所需的时间。大小几乎总是意味着复杂性，而复杂性会使程序员感到困惑。困惑的程序员又会在程序中引入错误（*bug*）。因此，大型程序提供了大量隐藏这些错误的空间，使它们难以被发现。
- en: Let’s briefly go back to the final two example programs in the introduction.
    The first is self-contained and six lines long.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下引言中的最后两个示例程序。第一个是自包含的，长六行。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second relies on two external functions and is one line long.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个依赖于两个外部函数，且只有一行长。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Which one is more likely to contain a bug?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 哪一个更可能包含错误？
- en: If we count the size of the definitions of sum and range, the second program
    is also big—even bigger than the first. But still, I’d argue that it is more likely
    to be correct.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计算求和和范围的定义的大小，第二个程序也很大——甚至比第一个还要大。但我仍然认为，它更可能是正确的。
- en: This is because the solution is expressed in a vocabulary that corresponds to
    the problem being solved. Summing a range of numbers isn’t about loops and counters.
    It is about ranges and sums.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为解决方案使用了与待解决问题相对应的词汇。对一系列数字求和并不是关于循环和计数器，而是关于范围和总和。
- en: The definitions of this vocabulary (the functions sum and range) will still
    involve loops, counters, and other incidental details. But because they are expressing
    simpler concepts than the program as a whole, they are easier to get right.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个词汇的定义（函数sum和range）仍然会涉及循环、计数器和其他附带的细节。但因为它们表达的概念比整个程序更简单，所以更容易正确实现。
- en: Abstraction
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象
- en: In the context of programming, these kinds of vocabularies are usually called
    *abstractions*. Abstractions give us the ability to talk about problems at a higher
    (or more abstract) level, without getting sidetracked by uninteresting details.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程的上下文中，这类词汇通常被称为*抽象*。抽象使我们能够在更高（或更抽象）的层次上讨论问题，而不被无趣的细节分散注意力。
- en: 'As an analogy, compare these two recipes for pea soup. The first goes like
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为类比，比较这两种豌豆汤的食谱。第一个是这样的：
- en: Put 1 cup of dried peas per person into a container. Add water until the peas
    are well covered. Leave the peas in water for at least 12 hours. Take the peas
    out of the water and put them in a cooking pan. Add 4 cups of water per person.
    Cover the pan and keep the peas simmering for two hours. Take half an onion per
    person. Cut it into pieces with a knife. Add it to the peas. Take a stalk of celery
    per person. Cut it into pieces with a knife. Add it to the peas. Take a carrot
    per person. Cut it into pieces. With a knife! Add it to the peas. Cook for 10
    more minutes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每人放1杯干豌豆到容器中。加水直到豌豆完全浸没。将豌豆在水中浸泡至少12小时。将豌豆从水中取出，放入烹饪锅中。每人加4杯水。盖上锅盖，让豌豆慢炖2小时。每人取半个洋葱。用刀切成小块，加入豌豆。每人取一根芹菜。用刀切成小块，加入豌豆。每人取一根胡萝卜。切成小块。用刀！加入豌豆。再煮10分钟。
- en: 'And this is the second recipe:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 而这就是第二个食谱：
- en: 'Per person: 1 cup dried split peas, 4 cups of water, half a chopped onion,
    a stalk of celery, and a carrot.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每人：1杯干豌豆、4杯水、半个切碎的洋葱、一根芹菜和一根胡萝卜。
- en: Soak peas for 12 hours. Simmer for 2 hours. Chop and add vegetables. Cook for
    10 more minutes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将豌豆浸泡12小时。慢炖2小时。切碎并添加蔬菜。再煮10分钟。
- en: The second is shorter and easier to interpret. But you do need to understand
    a few more cooking-related words such as *soak*, *simmer*, *chop*, and, I guess,
    *vegetable*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个更简短，更容易理解。但你确实需要理解一些与烹饪相关的词汇，比如*浸泡*、*慢炖*、*切碎*，还有，我想，*蔬菜*。
- en: When programming, we can’t rely on all the words we need to be waiting for us
    in the dictionary. Thus, we might fall into the pattern of the first recipe—work
    out the precise steps the computer has to perform, one by one, blind to the higher-level
    concepts they express.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时，我们不能依赖于所有需要的词汇都在字典中等待我们。因此，我们可能会陷入第一个食谱的模式——逐步确定计算机必须执行的精确步骤，而忽视了它们所表达的更高层次的概念。
- en: It is a useful skill, in programming, to notice when you are working at too
    low a level of abstraction.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，注意到自己在过低的抽象层次工作是一项有用的技能。
- en: Abstracting Repetition
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽象重复
- en: Plain functions, as we’ve seen them so far, are a good way to build abstractions.
    But sometimes they fall short.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的普通函数是构建抽象的好方法。但有时它们并不够。
- en: 'It is common for a program to do something a given number of times. You can
    write a for loop for that, like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 程序执行某个操作若干次是很常见的。你可以为此编写一个 for 循环，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Can we abstract “doing something *N* times” as a function? Well, it’s easy to
    write a function that calls console.log *N* times.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否将“做某事 *N* 次”抽象为一个函数？实际上，编写一个调用 console.log *N* 次的函数是很简单的。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: But what if we want to do something other than logging the numbers? Since “doing
    something” can be represented as a function and functions are just values, we
    can pass our action as a function value.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们想做些其他事情，而不是记录数字呢？由于“做某事”可以表示为一个函数，而函数只是值，我们可以将我们的操作作为函数值传递。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We don’t have to pass a predefined function to repeat. Often, it is easier to
    create a function value on the spot instead.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必传递一个预定义的函数来重复。通常，现场创建一个函数值更为简单。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is structured a little like a for loop—it first describes the kind of loop
    and then provides a body. However, the body is now written as a function value,
    which is wrapped in the parentheses of the call to repeat. This is why it has
    to be closed with the closing brace *and* closing parenthesis. In cases like this
    example, where the body is a single small expression, you could also omit the
    braces and write the loop on a single line.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这在结构上有点像 for 循环——它首先描述循环的类型，然后提供一个主体。然而，主体现在写成了一个函数值，它被包裹在调用 repeat 的括号中。这就是为什么它必须用结束大括号
    *和* 结束括号来关闭。在这种情况下，主体是一个单独的小表达式，你也可以省略大括号，将循环写在一行上。
- en: Higher-Order Functions
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高阶函数
- en: Functions that operate on other functions, either by taking them as arguments
    or by returning them, are called *higher-order functions*. Since we have already
    seen that functions are regular values, there is nothing particularly remarkable
    about the fact that such functions exist. The term comes from mathematics, where
    the distinction between functions and other values is taken more seriously.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 操作其他函数的函数，或者通过将它们作为参数传递，或通过返回它们，被称为 *高阶函数*。既然我们已经看到函数是常规值，那么这样的函数存在并没有什么特别之处。这个术语源于数学，在数学中，函数与其他值之间的区别更为重要。
- en: Higher-order functions allow us to abstract over *actions*, not just values.
    They come in several forms. For example, we can have functions that create new
    functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数使我们能够对 *动作* 进行抽象，而不仅仅是值。它们有几种形式。例如，我们可以有创建新函数的函数。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can also have functions that change other functions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以有改变其他函数的函数。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can even write functions that provide new types of control flow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以编写提供新类型控制流的函数。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There is a built-in array method, forEach, that provides something like a for/of
    loop as a higher-order function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个内置的数组方法 forEach，它提供类似于 for/of 循环的高阶函数。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Script Dataset
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚本数据集
- en: One area where higher-order functions shine is data processing. To process data,
    we’ll need some actual example data. This chapter will use a dataset about scripts—writing
    systems such as Latin, Cyrillic, or Arabic.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数在数据处理方面表现出色。要处理数据，我们需要一些实际的示例数据。本章将使用一个关于脚本的数据集——如拉丁字母、西里尔字母或阿拉伯字母等书写系统。
- en: Remember Unicode, the system that assigns a number to each character in written
    language, from [Chapter 1](ch01.xhtml#ch01)? Most of these characters are associated
    with a specific script. The standard contains 140 different scripts, of which
    81 are still in use today and 59 are historic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记得 Unicode 吗？它是将数字分配给书写语言中每个字符的系统，来自 [第 1 章](ch01.xhtml#ch01)？这些字符大多与特定的脚本相关。标准包含
    140 种不同的脚本，其中 81 种仍在使用中，59 种是历史脚本。
- en: 'Though I can fluently read only Latin characters, I appreciate the fact that
    people are writing texts in at least 80 other writing systems, many of which I
    wouldn’t even recognize. For example, here’s a sample of Tamil handwriting:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我只能流利地阅读拉丁字符，但我很欣赏人们用至少 80 种其他书写系统书写文本的事实，其中许多我甚至无法识别。例如，这里有一段泰米尔文的手写样本：
- en: '![Image](../images/f0085-01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0085-01.jpg)'
- en: The example dataset contains some pieces of information about the 140 scripts
    defined in Unicode. It is available in the coding sandbox for this chapter (*[https://eloquentjavascript.net/code#5](https://eloquentjavascript.net/code#5)*)
    as the SCRIPTS binding. The binding contains an array of objects, each of which
    describes a script.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据集包含有关 Unicode 中定义的 140 种脚本的一些信息。它在本章节的编码沙箱中可用（*[https://eloquentjavascript.net/code#5](https://eloquentjavascript.net/code#5)*)，作为
    SCRIPTS 绑定。该绑定包含一个对象数组，每个对象描述一种脚本。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Such an object tells us the name of the script, the Unicode ranges assigned
    to it, the direction in which it is written, the (approximate) origin time, whether
    it is still in use, and a link to more information. The direction may be “ltr”
    for left to right, “rtl” for right to left (the way Arabic and Hebrew text are
    written), or “ttb” for top to bottom (as with Mongolian writing).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的对象告诉我们脚本的名称、分配给它的 Unicode 范围、书写方向、（大致的）起源时间、是否仍在使用以及更多信息的链接。书写方向可以是“ltr”表示从左到右，“rtl”表示从右到左（阿拉伯语和希伯来语文本的书写方式），或者“ttb”表示从上到下（如蒙古文书写）。
- en: The ranges property contains an array of Unicode character ranges, each of which
    is a two-element array containing a lower bound and an upper bound. Any character
    codes within these ranges are assigned to the script. The lower bound is inclusive
    (code 994 is a Coptic character) and the upper bound is noninclusive (code 1008
    isn’t).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ranges 属性包含一个 Unicode 字符范围的数组，每个范围都是一个包含下限和上限的两个元素数组。这些范围内的任何字符代码都被分配给该脚本。下限是包含的（代码
    994 是一个科普特字符），而上限是不包含的（代码 1008 不是）。
- en: Filtering Arrays
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤数组
- en: If we want to find the scripts in the dataset that are still in use, the following
    function might be helpful. It filters out elements in an array that don’t pass
    a test.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想找到数据集中仍在使用的脚本，下面的函数可能会有所帮助。它过滤掉数组中未通过测试的元素。
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The function uses the argument named test, a function value, to fill a “gap”
    in the computation—the process of deciding which elements to collect.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用名为 test 的参数，一个函数值，以填补计算中的“空缺”——决定收集哪些元素的过程。
- en: Note how the filter function, rather than deleting elements from the existing
    array, builds up a new array with only the elements that pass the test. This function
    is *pure*. It does not modify the array it is given.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 filter 函数如何不是从现有数组中删除元素，而是构建一个新数组，仅包含通过测试的元素。这个函数是 *纯粹* 的。它不会修改传入的数组。
- en: 'Like forEach, filter is a standard array method. The example defined the function
    only to show what it does internally. From now on, we’ll use it like this instead:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 像 forEach 一样，filter 是一个标准数组方法。这个例子仅定义了该函数，以展示它在内部的工作原理。从现在开始，我们将这样使用它：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Transforming with map
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 map 进行转换
- en: Say we have an array of objects representing scripts, produced by filtering
    the SCRIPTS array somehow. We want an array of names instead, which is easier
    to inspect.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个表示脚本的对象数组，这些对象是通过某种方式过滤 SCRIPTS 数组而生成的。我们希望得到一个名称的数组，这样更容易检查。
- en: The map method transforms an array by applying a function to all of its elements
    and building a new array from the returned values. The new array will have the
    same length as the input array, but its content will have been *mapped* to a new
    form by the function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: map 方法通过对数组的所有元素应用函数并从返回值构建一个新数组来转换数组。新数组将具有与输入数组相同的长度，但其内容将通过函数 *映射* 到新形式。
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Like forEach and filter, map is a standard array method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 像 forEach 和 filter 一样，map 也是一个标准数组方法。
- en: Summarizing with reduce
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 reduce 进行汇总
- en: Another common thing to do with arrays is to compute a single value from them.
    Our recurring example, summing a collection of numbers, is an instance of this.
    Another example is finding the script with the most characters.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组进行的另一个常见操作是从中计算出单个值。我们反复提到的例子，求和一组数字，就是这个操作的一个实例。另一个例子是找出字符最多的脚本。
- en: The higher-order operation that represents this pattern is called *reduce* (sometimes
    also called *fold*). It builds a value by repeatedly taking a single element from
    the array and combining it with the current value. When summing numbers, you’d
    start with the number zero and, for each element, add that to the sum.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此模式的高阶操作称为 *reduce*（有时也称为 *fold*）。它通过重复从数组中提取单个元素并将其与当前值结合来构建一个值。在求和时，你将从零开始，并对每个元素将其加到总和中。
- en: 'The parameters to reduce are, apart from the array, a combining function and
    a start value. This function is a little less straightforward than filter and
    map, so take a close look at it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: reduce 的参数除了数组外，还有一个组合函数和一个起始值。这个函数比过滤和映射稍微复杂一些，所以请仔细看看：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The standard array method reduce, which of course corresponds to this function,
    has an added convenience. If your array contains at least one element, you are
    allowed to leave off the start argument. The method will take the first element
    of the array as its start value and start reducing at the second element.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 标准数组方法 reduce，自然对应这个函数，具有额外的便利性。如果你的数组至少包含一个元素，你可以省略起始参数。该方法会将数组的第一个元素作为起始值，并从第二个元素开始减少。
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To use reduce (twice) to find the script with the most characters, we can write
    something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 reduce（两次）来找到字符最多的脚本，我们可以写如下内容：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The characterCount function reduces the ranges assigned to a script by summing
    their sizes. Note the use of destructuring in the parameter list of the reducer
    function. The second call to reduce then uses this to find the largest script
    by repeatedly comparing two scripts and returning the larger one.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: characterCount 函数通过对分配给脚本的范围进行求和来减少其大小。注意在 reducer 函数的参数列表中使用了解构。第二次调用 reduce
    则利用这个功能通过不断比较两个脚本并返回较大的一个来找到最大的脚本。
- en: The Han script has more than 89,000 characters assigned to it in the Unicode
    standard, making it by far the biggest writing system in the dataset. Han is a
    script sometimes used for Chinese, Japanese, and Korean text. Those languages
    share a lot of characters, though they tend to write them differently. The (US-based)
    Unicode Consortium decided to treat them as a single writing system to save character
    codes. This is called *Han unification* and still makes some people very angry.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 汉字在 Unicode 标准中分配了超过 89,000 个字符，使其成为数据集中最大的书写系统。汉字有时用于中文、日文和韩文。这些语言共享许多字符，尽管它们通常以不同的方式书写。美国的
    Unicode 联盟决定将它们视为一个书写系统，以节省字符编码。这被称为*汉字统一*，并且仍然让一些人感到非常愤怒。
- en: Composability
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可组合性
- en: Consider how we would have written the previous example (finding the biggest
    script) without higher-order functions. The code is not that much worse.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 想想如果没有高阶函数，我们将如何编写之前的示例（寻找最大的脚本）。代码并没有变得差很多。
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There are a few more bindings, and the program is four lines longer, but it
    is still very readable.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个绑定，程序多了四行，但仍然非常可读。
- en: The abstractions these functions provide really shine when you need to *compose*
    operations. As an example, let’s write code that finds the average year of origin
    for living and dead scripts in the dataset.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数提供的抽象在你需要*组合*操作时表现得尤为出色。例如，让我们编写代码来找到数据集中存活和已亡脚本的平均来源年份。
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, the dead scripts in Unicode are, on average, older than the
    living ones. This is not a terribly meaningful or surprising statistic. But I
    hope you’ll agree that the code used to compute it isn’t hard to read. You can
    see it as a pipeline: we start with all scripts, filter out the living (or dead)
    ones, take the years from those, average them, and round the result.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Unicode 中的已亡脚本平均来说比存活的脚本要古老。这并不是一个特别有意义或令人惊讶的统计数据。但我希望你会同意，用来计算它的代码并不难以阅读。你可以把它看作一个管道：我们从所有脚本开始，过滤出存活（或已亡）的脚本，从中取出年份，取平均值，然后四舍五入结果。
- en: You could definitely also write this computation as one big loop.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你当然也可以将这段计算写成一个大循环。
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, it is harder to see what was being computed and how. And because intermediate
    results aren’t represented as coherent values, it’d be a lot more work to extract
    something like average into a separate function.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，很难看出计算的内容及其方式。而且，由于中间结果并未作为一致的值表示，要将像平均数这样的内容提取到单独的函数中将会更加复杂。
- en: In terms of what the computer is actually doing, these two approaches are also
    quite different. The first will build up new arrays when running filter and map,
    whereas the second computes only some numbers, doing less work. You can usually
    afford the readable approach, but if you’re processing huge arrays and doing so
    many times, the less abstract style might be worth the extra speed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机实际执行的方面，这两种方法也相当不同。第一种方法在运行过滤和映射时会建立新的数组，而第二种只计算一些数字，工作量更少。通常你可以选择可读性更高的方法，但如果你在处理巨大的数组并且多次执行，那么较少抽象的风格可能值得额外的速度。
- en: Strings and Character Codes
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串和字符编码
- en: One interesting use of this dataset would be figuring out what script a piece
    of text is using. Let’s go through a program that does this.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集的一个有趣用法是确定一段文本使用了什么脚本。让我们看看一个实现这一点的程序。
- en: 'Remember that each script has an array of character code ranges associated
    with it. Given a character code, we could use a function like this to find the
    corresponding script (if any):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，每种脚本都有一个与之相关的字符代码范围数组。给定一个字符代码，我们可以使用这样的函数来查找对应的脚本（如果有的话）：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The some method is another higher-order function. It takes a test function and
    tells you whether that function returns true for any of the elements in the array.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: some方法是另一个高阶函数。它接受一个测试函数，并告诉你该函数是否对数组中的任何元素返回true。
- en: But how do we get the character codes in a string?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何获取字符串中的字符代码呢？
- en: In [Chapter 1](ch01.xhtml#ch01), I mentioned that JavaScript strings are encoded
    as a sequence of 16-bit numbers. These are called *code units*. A Unicode character
    code was initially supposed to fit within such a unit (which gives you a little
    over 65,000 characters). When it became clear that wasn’t going to be enough,
    many people balked at the need to use more memory per character. To address these
    concerns, UTF-16, the format also used by JavaScript strings, was invented. It
    describes most common characters using a single 16-bit code unit but uses a pair
    of two such units for others.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.xhtml#ch01)中，我提到JavaScript字符串被编码为一系列16位数字。这些被称为*代码单元*。最初，Unicode字符代码应该适合这样的单元（这给你提供了稍微超过65,000个字符）。当变得清楚这不够时，许多人对每个字符需要使用更多内存感到抵触。为了应对这些担忧，UTF-16这种格式（JavaScript字符串也使用该格式）被发明。它使用单个16位代码单元描述大多数常见字符，但对于其他字符则使用一对这样的单元。
- en: UTF-16 is generally considered a bad idea today. It seems almost intentionally
    designed to invite mistakes. It’s easy to write programs that pretend code units
    and characters are the same thing. And if your language doesn’t use two-unit characters,
    that will appear to work just fine. But as soon as someone tries to use such a
    program with some less common Chinese characters, it breaks. Fortunately, with
    the advent of emoji, everybody has started using two-unit characters, and the
    burden of dealing with such problems is more fairly distributed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，UTF-16通常被认为是一个糟糕的主意。它似乎几乎是故意设计来引发错误的。编写假装代码单元和字符是同一事物的程序非常简单。如果你的语言不使用两个单元的字符，这看起来似乎工作得很好。但一旦有人尝试用这样一个程序处理一些不太常见的汉字，就会出现问题。幸运的是，随着表情符号的出现，大家都开始使用两个单元的字符，这样处理这些问题的负担更公平地分配了。
- en: Unfortunately, obvious operations on JavaScript strings, such as getting their
    length through the length property and accessing their content using square brackets,
    deal only with code units.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对JavaScript字符串的明显操作，如通过length属性获取它们的长度和使用方括号访问它们的内容，只处理代码单元。
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: JavaScript’s charCodeAt method gives you a code unit, not a full character code.
    The codePointAt method, added later, does give a full Unicode character, so we
    could use that to get characters from a string. But the argument passed to codePointAt
    is still an index into the sequence of code units. To run over all characters
    in a string, we’d still need to deal with the question of whether a character
    takes up one or two code units.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的charCodeAt方法返回一个代码单元，而不是完整的字符代码。稍后添加的codePointAt方法确实给出了完整的Unicode字符，因此我们可以用它从字符串中获取字符。但传递给codePointAt的参数仍然是代码单元序列中的一个索引。要遍历字符串中的所有字符，我们仍然需要处理一个字符占用一个或两个代码单元的问题。
- en: In [Chapter 4](ch04.xhtml#ch04), I mentioned that a for/of loop can also be
    used on strings. Like codePointAt, this type of loop was introduced at a time
    when people were acutely aware of the problems with UTF-16\. When you use it to
    loop over a string, it gives you real characters, not code units.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.xhtml#ch04)中，我提到可以在字符串上使用for/of循环。与codePointAt类似，这种循环在人们对UTF-16存在的问题有深刻认识时被引入。当你用它遍历字符串时，它会给你真实的字符，而不是代码单元。
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you have a character (which will be a string of one or two code units), you
    can use codePointAt(0) to get its code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个字符（它将是一个由一个或两个代码单元组成的字符串），你可以使用codePointAt(0)来获取它的代码。
- en: Recognizing Text
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别文本
- en: 'We have a characterScript function and a way to correctly loop over characters.
    The next step is to count the characters that belong to each script. The following
    counting abstraction will be useful there:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个characterScript函数和一种正确遍历字符的方法。下一步是计算每种脚本所包含的字符数量。以下计数抽象将在这里很有用：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The countBy function expects a collection (anything that we can loop over with
    for/of) and a function that computes a group name for a given element. It returns
    an array of objects, each of which names a group and tells you the number of elements
    that were found in that group.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: countBy 函数期望一个集合（任何可以用 for/of 循环遍历的内容）和一个为给定元素计算组名的函数。它返回一个对象数组，每个对象命名一个组，并告诉你在该组中找到的元素数量。
- en: It uses another array method, find, which goes over the elements in the array
    and returns the first one for which a function returns true. It returns undefined
    when it finds no such element.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用另一个数组方法 find，该方法遍历数组中的元素并返回第一个函数返回 true 的元素。如果没有找到这样的元素，它将返回 undefined。
- en: Using countBy, we can write the function that tells us which scripts are used
    in a piece of text.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 countBy，我们可以编写一个函数来告诉我们在一段文本中使用了哪些脚本。
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The function first counts the characters by name, using characterScript to assign
    them a name and falling back to the string “none” for characters that aren’t part
    of any script. The filter call drops the entry for “none” from the resulting array,
    since we aren’t interested in those characters.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先通过名称计数字符，使用 characterScript 为它们分配名称，并在字符不属于任何脚本时回退到字符串“none”。filter 调用从结果数组中删除“none”的条目，因为我们对这些字符不感兴趣。
- en: To be able to compute percentages, we first need the total number of characters
    that belong to a script, which we can compute with reduce. If we find no such
    characters, the function returns a specific string. Otherwise, it transforms the
    counting entries into readable strings with map and then combines them with join.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够计算百分比，我们首先需要计算属于某个脚本的字符总数，可以通过 reduce 来计算。如果没有找到这样的字符，函数将返回一个特定字符串。否则，它会通过
    map 将计数条目转换为可读字符串，然后用 join 将它们组合起来。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: Being able to pass function values to other functions is a deeply useful aspect
    of JavaScript. It allows us to write functions that model computations with “gaps”
    in them. The code that calls these functions can fill in the gaps by providing
    function values.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将函数值传递给其他函数是 JavaScript 一个非常有用的特性。它允许我们编写带有“缺口”的计算模型函数。调用这些函数的代码可以通过提供函数值来填补这些缺口。
- en: Arrays provide a number of useful higher-order methods. You can use forEach
    to loop over the elements in an array. The filter method returns a new array containing
    only the elements that pass the predicate function. You can transform an array
    by putting each element through a function using map. You can use reduce to combine
    all the elements in an array into a single value. The some method tests whether
    any element matches a given predicate function, while find finds the first element
    that matches a predicate.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 数组提供了许多有用的高阶方法。你可以使用 forEach 遍历数组中的元素。filter 方法返回一个新数组，只包含通过谓词函数的元素。你可以通过使用
    map 将每个元素放入一个函数来转换数组。你可以使用 reduce 将数组中的所有元素组合成一个单一值。some 方法测试是否有任何元素与给定的谓词函数匹配，而
    find 则找到第一个匹配谓词的元素。
- en: Exercises
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '*Flattening*'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*扁平化*'
- en: Use the reduce method in combination with the concat method to “flatten” an
    array of arrays into a single array that has all the elements of the original
    arrays.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 reduce 方法与 concat 方法结合，将一个数组的数组“扁平化”为一个包含所有原始数组元素的单一数组。
- en: '*Your Own Loop*'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*你自己的循环*'
- en: Write a higher-order function loop that provides something like a for loop statement.
    It should take a value, a test function, an update function, and a body function.
    Each iteration, it should first run the test function on the current loop value
    and stop if that returns false. It should then call the body function, giving
    it the current value, and finally call the update function to create a new value
    and start over from the beginning.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个高阶函数 loop，提供类似于 for 循环语句的功能。它应该接受一个值、一个测试函数、一个更新函数和一个主体函数。每次迭代时，它应该首先在当前循环值上运行测试函数，如果返回
    false，则停止。然后调用主体函数，传递当前值，最后调用更新函数以生成新值并重新开始。
- en: When defining the function, you can use a regular loop to do the actual looping.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义函数时，你可以使用常规循环来实际执行循环。
- en: '*Everything*'
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*一切*'
- en: Arrays have an every method analogous to the some method. This method returns
    true when the given function returns true for *every* element in the array. In
    a way, some is a version of the || operator that acts on arrays, and every is
    like the && operator.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 数组有一个 every 方法，与 some 方法类似。当给定的函数对数组中的*每个*元素返回 true 时，该方法返回 true。从某种意义上说，some
    是作用于数组的 || 运算符的一个版本，而 every 则像是 && 运算符。
- en: Implement every as a function that takes an array and a predicate function as
    parameters. Write two versions, one using a loop and one using the some method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个实现作为一个函数，该函数接受一个数组和一个谓词函数作为参数。写两个版本，一个使用循环，另一个使用 some 方法。
- en: '*Dominant Writing Direction*'
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*主导书写方向*'
- en: Write a function that computes the dominant writing direction in a string of
    text. Remember that each script object has a direction property that can be ”ltr”
    (left to right), “rtl” (right to left), or “ttb” (top to bottom).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，用于计算文本字符串中的主导书写方向。记住，每个脚本对象都有一个 direction 属性，可能是“ltr”（从左到右）、“rtl”（从右到左）或“ttb”（从上到下）。
- en: The dominant direction is the direction of a majority of the characters that
    have a script associated with them. The characterScript and countBy functions
    defined earlier in the chapter are probably useful here.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 主导方向是指大多数具有相关脚本的字符的方向。前面章节中定义的 characterScript 和 countBy 函数在这里可能会很有用。
- en: '*An abstract data type is realized by writing a special kind of program [.
    . .] which defines the type in terms of the operations which can be performed
    on it.*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*抽象数据类型通过编写一种特殊类型的程序来实现，该程序定义了可以在其上执行的操作类型。*'
- en: —Barbara Liskov, *Programming Settings with Abstract Data Types*
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: —芭芭拉·利斯科夫，*使用抽象数据类型编程*
- en: '![Image](../images/f0094-01.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../images/f0094-01.jpg)'
