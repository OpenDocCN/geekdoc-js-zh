["```js\nfunction speak(line) {\n  console.log(`The ${this.type} rabbit says '${line}'`);\n}\nlet whiteRabbit = {type: \"white\", speak};\nlet hungryRabbit = {type: \"hungry\", speak};\n\nwhiteRabbit.speak(\"Oh my fur and whiskers\");\n// → The white rabbit says 'Oh my fur and whiskers'\nhungryRabbit.speak(\"Got any carrots?\");\n// → The hungry rabbit says 'Got any carrots?'\n```", "```js\nspeak.call(whiteRabbit, \"Hurry\");\n// → The white rabbit says 'Hurry'\n```", "```js\nlet finder = {\n  find(array) {\n    return array.some(v => v == this.value);\n  },\n  value: 5\n};\nconsole.log(finder.find([4, 5]));\n// → true\n```", "```js\nlet empty = {};\nconsole.log(empty.toString);\n// → function toString(){...}\nconsole.log(empty.toString());\n// → [object Object]\n```", "```js\nconsole.log(Object.getPrototypeOf({}) == Object.prototype);\n// → true\nconsole.log(Object.getPrototypeOf(Object.prototype));\n// → null\n```", "```js\nconsole.log(Object.getPrototypeOf(Math.max) ==\n            Function.prototype);\n// → true\nconsole.log(Object.getPrototypeOf([]) == Array.prototype);\n// → true\n```", "```js\nlet protoRabbit = {\n  speak(line) {\n    console.log(`The ${this.type} rabbit says '${line}'`);\n  }\n};\nlet blackRabbit = Object.create(protoRabbit);\nblackRabbit.type = \"black\";\nblackRabbit.speak(\"I am fear and darkness\");\n// → The black rabbit says 'I am fear and darkness'\n```", "```js\nfunction makeRabbit(type) {\n  let rabbit = Object.create(protoRabbit);\n  rabbit.type = type;\n  return rabbit;\n}\n```", "```js\nclass Rabbit {\n  constructor(type) {\n    this.type = type;\n  }\n  speak(line) {\n    console.log(`The ${this.type} rabbit says '${line}'`);\n  }\n}\n```", "```js\nlet killerRabbit = new Rabbit(\"killer\");\n```", "```js\nfunction ArchaicRabbit(type) {\n  this.type = type;\n}\nArchaicRabbit.prototype.speak = function(line) {\n console.log(`The ${this.type} rabbit says '${line}'`);\n};\nlet oldSchoolRabbit = new ArchaicRabbit(\"old school\");\n```", "```js\nconsole.log(Object.getPrototypeOf(Rabbit) ==\n            Function.prototype);\n// → true\nconsole.log(Object.getPrototypeOf(killerRabbit) ==\n            Rabbit.prototype);\n// → true\n```", "```js\nclass Particle {\n  speed = 0;\n  constructor(position) {\n    this.position = position;\n  }\n}\n```", "```js\nlet object = new class { getWord() { return \"hello\"; } };\nconsole.log(object.getWord());\n// → hello\n```", "```js\nclass SecretiveObject {\n  #getSecret() {\n    return \"I ate all the plums\";\n  }\n  interrogate() {\n    let shallISayIt = this.#getSecret();\n    return \"never\";\n  }\n}\n```", "```js\nclass RandomSource {\n  #max;\n  constructor(max) {\n    this.#max = max;\n  }\n  getNumber() {\n    return Math.floor(Math.random() * this.#max);\n  }\n}\n```", "```js\nRabbit.prototype.teeth = \"small\";\nconsole.log(killerRabbit.teeth);\n// → small\nkillerRabbit.teeth = \"long, sharp, and bloody\";\nconsole.log(killerRabbit.teeth);\n// → long, sharp, and bloody\nconsole.log((new Rabbit(\"basic\")).teeth);\n// → small\nconsole.log(Rabbit.prototype.teeth);\n// → small\n```", "```js\nconsole.log(Array.prototype.toString ==\n            Object.prototype.toString);\n// → false\nconsole.log([1, 2].toString());\n// → 1,2\n```", "```js\nconsole.log(Object.prototype.toString.call([1, 2]));\n// → [object Array]\n```", "```js\nlet ages = {\n  Boris: 39,\n  Liang: 22,\n  Júlia: 62\n};\n\nconsole.log(`Júlia is ${ages[\"Júlia\"]}`);\n// → Júlia is 62\nconsole.log(\"Is Jack's age known?\", \"Jack\" in ages);\n// → Is Jack's age known? false\nconsole.log(\"Is toString's age known?\", \"toString\" in ages);\n// → Is toString's age known? true\n```", "```js\nconsole.log(\"toString\" in Object.create(null));\n// → false\n```", "```js\nlet ages = new Map();\nages.set(\"Boris\", 39);\nages.set(\"Liang\", 22);\nages.set(\"Júlia\", 62);\n\nconsole.log(`Júlia is ${ages.get(\"Júlia\")}`);\n// → Júlia is 62\nconsole.log(\"Is Jack's age known?\", ages.has(\"Jack\"));\n// → Is Jack's age known? false\nconsole.log(ages.has(\"toString\"));\n// → false\n```", "```js\nconsole.log(Object.hasOwn({x: 1}, \"x\"));\n// → true\nconsole.log(Object.hasOwn({x: 1}, \"toString\"));\n// → false\n```", "```js\nRabbit.prototype.toString = function() {\n  return `a ${this.type} rabbit`;\n};\n\nconsole.log(String(killerRabbit));\n// → a killer rabbit\n```", "```js\nArray.prototype.forEach.call({\n  length: 2,\n  0: \"A\",\n  1: \"B\"\n}, elt => console.log(elt));\n// → A\n// → B\n```", "```js\nlet varyingSize = {\n  get size() {\n    return Math.floor(Math.random() * 100);\n  }\n};\n\nconsole.log(varyingSize.size);\n// → 73\nconsole.log(varyingSize.size);\n// → 49\n```", "```js\nclass Temperature {\n  constructor(celsius) {\n    this.celsius = celsius;\n  }\n  get fahrenheit() {\n    return this.celsius * 1.8 + 32;\n  }\n  set fahrenheit(value) {\n    this.celsius = (value - 32) / 1.8;\n  }\n\n  static fromFahrenheit(value) {\n    return new Temperature((value - 32) / 1.8);\n  }\n}\n\nlet temp = new Temperature(22);\nconsole.log(temp.fahrenheit);\n// → 71.6\ntemp.fahrenheit = 86;\nconsole.log(temp.celsius);\n// → 30\n```", "```js\nlet boil = Temperature.fromFahrenheit(212);\nconsole.log(boil.celsius);\n// → 100\n```", "```js\nlet sym = Symbol(\"name\");\nconsole.log(sym == Symbol(\"name\"));\n// → false\nRabbit.prototype[sym] = 55;\nconsole.log(killerRabbit[sym]);\n// → 55\n```", "```js\nconst length = Symbol(\"length\");\nArray.prototype[length] = 0;\n\nconsole.log([1, 2].length);\n// → 2\nconsole.log([1, 2][length]);\n// → 0\n```", "```js\nlet myTrip = {\n  length: 2,\n  0: \"Lankwitz\",\n  1: \"Babelsberg\",\n  [length]: 21500\n};\nconsole.log(myTrip[length], myTrip.length);\n// → 21500 2\n```", "```js\nlet okIterator = \"OK\"[Symbol.iterator]();\nconsole.log(okIterator.next());\n// → {value: \"O\", done: false}\nconsole.log(okIterator.next());\n// → {value: \"K\", done: false}\nconsole.log(okIterator.next());\n// → {value: undefined, done: true}\n```", "```js\nclass List {\n  constructor(value, rest) {\n    this.value = value;\n    this.rest = rest;\n  }\n\n  get length() {\n    return 1 + (this.rest ? this.rest.length : 0);\n  }\n\n  static fromArray(array) {\n    let result = null;\n    for (let i = array.length - 1; i >= 0; i--) {\n      result = new this(array[i], result);\n    }\n    return result;\n  }\n}\n```", "```js\nclass ListIterator {\n  constructor(list) {\n    this.list = list;\n  }\n\n  next() {\n    if (this.list == null) {\n      return {done: true};\n    }\n    let value = this.list.value;\n    this.list = this.list.rest;\n    return {value, done: false};\n  }\n}\n```", "```js\nList.prototype[Symbol.iterator] = function() {\n  return new ListIterator(this);\n};\n```", "```js\nlet list = List.fromArray([1, 2, 3]);\nfor (let element of list) {\n  console.log(element);\n}\n// → 1\n// → 2\n// → 3\n```", "```js\nconsole.log([...\"PCI\"]);\n// → [\"P\", \"C\", \"I\"]\n```", "```js\nclass LengthList extends List {\n  #length;\n\n  constructor(value, rest) {\n    super(value, rest);\n    this.#length = super.length;\n  }\n\n get length() {\n    return this.#length;\n  }\n}\n\nconsole.log(LengthList.fromArray([1, 2, 3]).length);\n// → 3\n```", "```js\nconsole.log(new LengthList(1, null) instanceof LengthList);\n// → true\nconsole.log(new LengthList(2, null) instanceof List);\n// → true\nconsole.log(new List(3, null) instanceof LengthList);\n// → false\nconsole.log([1] instanceof Array);\n// → true\n```"]