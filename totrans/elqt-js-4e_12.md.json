["```js\nsetTimeout(() => console.log(\"Tick\"), 500);\n```", "```js\nreadTextFile(\"shopping_list.txt\", content => {\n  console.log(`Shopping List:\\n${content}`);\n});\n// → Shopping List:\n// → Peanut butter\n// → Bananas\n```", "```js\nfunction compareFiles(fileA, fileB, callback) {\n  readTextFile(fileA, contentA => {\n    readTextFile(fileB, contentB => {\n callback(contentA == contentB);\n    });\n  });\n}\n```", "```js\nlet fifteen = Promise.resolve(15);\nfifteen.then(value => console.log(`Got ${value}`));\n// → Got 15\n```", "```js\nfunction textFile(filename) {\n  return new Promise(resolve => {\n    readTextFile(filename, text => resolve(text));\n  });\n}\n\ntextFile(\"plans.txt\").then(console.log);\n```", "```js\nfunction randomFile(listFile) {\n  return textFile(listFile)\n    .then(content => content.trim().split(\"\\n\"))\n    .then(ls => ls[Math.floor(Math.random() * ls.length)])\n    .then(filename => textFile(filename));\n}\n```", "```js\nfunction jsonFile(filename) {\n  return textFile(filename).then(JSON.parse);\n}\n\njsonFile(\"package.json\").then(console.log);\n```", "```js\nsomeAsyncFunction((error, value) => {\n  if (error) handleError(error);\n  else processValue(value);\n});\n```", "```js\nfunction textFile(filename) {\n  return new Promise((resolve, reject) => {\n    readTextFile(filename, (text, error) => {\n      if (error) reject(error);\n      else resolve(text);\n    });\n  });\n}\n```", "```js\nnew Promise((_, reject) => reject(new Error(\"Fail\")))\n  .then(value => console.log(\"Handler 1:\", value))\n  .catch(reason => {\n    console.log(\"Caught failure \" + reason);\n    return \"nothing\";\n  })\n  .then(value => console.log(\"Handler 2:\", value));\n// → Caught failure Error: Fail\n// → Handler 2: nothing\n```", "```js\nfunction withTimeout(promise, time) {\n  return new Promise((resolve, reject) => {\n    promise.then(resolve, reject);\n    setTimeout(() => reject(\"Timed out\"), time);\n  });\n}\n```", "```js\nfunction crackPasscode(networkID) {\n  function nextDigit(code, digit) {\n    let newCode = code + digit;\n    return withTimeout(joinWifi(networkID, newCode), 50)\n      .then(() => newCode)\n      .catch(failure => {\n        if (failure == \"Timed out\") {\n          return nextDigit(newCode, 0);\n        } else if (digit < 9) {\n          return nextDigit(code, digit + 1);\n        } else {\n          throw failure;\n        }\n      });\n  }\n  return nextDigit(\"\", 0);\n}\n```", "```js\ncrackPasscode(\"HANGAR 2\").then(console.log);\n// → 555555\n```", "```js\nasync function crackPasscode(networkID) {\n  for (let code = \"\";;) {\n    for (let digit = 0;; digit++) {\n      let newCode = code + digit;\n      try {\n        await withTimeout(joinWifi(networkID, newCode), 50);\n        return newCode;\n      } catch (failure) {\n        if (failure == \"Timed out\") {\n          code = newCode;\n          break;\n        } else if (digit == 9) {\n          throw failure;\n        }\n      }\n    }\n  }\n}\n```", "```js\nfunction* powers(n) {\n  for (let current = n;; current *= n) {\n    yield current;\n  }\n}\n\nfor (let power of powers(3)) {\n  if (power > 50) break;\n  console.log(power);\n}\n// → 3\n// → 9\n// → 27\n```", "```js\nGroup.prototype[Symbol.iterator] = function*() {\n  for (let i = 0; i < this.members.length; i++) {\n yield this.members[i];\n  }\n};\n```", "```js\nfor (let addr = 1; addr < 256; addr++) {\n  let data = [];\n  for (let n = 0; n < 1500; n++) {\n    data.push(n < addr ? 3 : 0);\n  }\n  let ip = `10.0.0.${addr}`;\n  request(ip, {command: \"display\", data})\n    .then(() => console.log(`Request to ${ip} accepted`))\n    .catch(() => {});\n}\n```", "```js\nconst screenAddresses = [\n  \"10.0.0.44\", \"10.0.0.45\", \"10.0.0.41\",\n  \"10.0.0.31\", \"10.0.0.40\", \"10.0.0.42\",\n  \"10.0.0.48\", \"10.0.0.47\", \"10.0.0.46\"\n];\n```", "```js\nfunction displayFrame(frame) {\n  return Promise.all(frame.map((data, i) => {\n    return request(screenAddresses[i], {\n      command: \"display\",\n      data\n    });\n  }));\n}\n```", "```js\nfunction wait(time) {\n  return new Promise(accept => setTimeout(accept, time));\n}\n\nclass VideoPlayer {\n  constructor(frames, frameTime) {\n    this.frames = frames;\n    this.frameTime = frameTime;\n    this.stopped = true;\n  }\n\n  async play() {\n    this.stopped = false;\n    for (let i = 0; !this.stopped; i++) {\n      let nextFrame = wait(this.frameTime);\n      await displayFrame(this.frames[i % this.frames.length]);\n      await nextFrame;\n    }\n  }\n\n  stop() {\n    this.stopped = true;\n }\n}\n```", "```js\nlet video = new VideoPlayer(clipImages, 100);\nvideo.play().catch(e => {\n  console.log(\"Playback failed: \" + e);\n});\nsetTimeout(() => video.stop(), 15000);\n```", "```js\ntry {\n  setTimeout(() => {\n    throw new Error(\"Woosh\");\n  }, 20);\n} catch (e) {\n  // This will not run\n  console.log(\"Caught\", e);\n}\n```", "```js\nlet start = Date.now();\nsetTimeout(() => {\n  console.log(\"Timeout ran at\", Date.now() - start);\n}, 20);\nwhile (Date.now() < start + 50) {}\nconsole.log(\"Wasted time until\", Date.now() - start);\n// → Wasted time until 50\n// → Timeout ran at 55\n```", "```js\nPromise.resolve(\"Done\").then(console.log);\nconsole.log(\"Me first!\");\n// → Me first!\n// → Done\n```", "```js\nasync function fileSizes(files) {\n  let list = \"\";\n  await Promise.all(files.map(async fileName => {\n    list += fileName + \": \" +\n      (await textFile(fileName)).length + \"\\n\";\n  }));\n  return list;\n}\n```", "```js\nasync function fileSizes(files) {\n  let lines = files.map(async fileName => {\n    return fileName + \": \" +\n      (await textFile(fileName)).length;\n  });\n  return (await Promise.all(lines)).join(\"\\n\");\n}\n```", "```js\n1695709940692\n1695701068331\n1695701189163\n```"]