["```js\nconst square = function(x) {\n  return x * x;\n};\nconsole.log(square(12));\n// → 144\n```", "```js\nconst makeNoise = function() {\n  console.log(\"Pling!\");\n};\n\nmakeNoise();\n// → Pling!\n\nconst roundTo = function(n, step) {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\n\nconsole.log(roundTo(23, 10));\n// → 20\n```", "```js\nlet x = 10;   // Global\nif (true) {\n  let y = 20; // Local to block\n  var z = 30; // Also global\n}\n```", "```js\nconst halve = function(n) {\n  return n / 2;\n};\n\nlet n = 10;\nconsole.log(halve(100));\n// → 50\nconsole.log(n);\n// → 10\n```", "```js\nconst hummus = function(factor) {\n  const ingredient = function(amount, unit, name) {\n    let ingredientAmount = amount * factor;\n    if (ingredientAmount > 1) {\n      unit += \"s\";\n }\n    console.log(`${ingredientAmount} ${unit} ${name}`);\n  };\n  ingredient(1, \"can\", \"chickpeas\");\n  ingredient(0.25, \"cup\", \"tahini\");\n  ingredient(0.25, \"cup\", \"lemon juice\");\n  ingredient(1, \"clove\", \"garlic\");\n  ingredient(2, \"tablespoon\", \"olive oil\");\n  ingredient(0.5, \"teaspoon\", \"cumin\");\n};\n```", "```js\nlet launchMissiles = function() {\n  missileSystem.launch(\"now\");\n};\nif (safeMode) {\n  launchMissiles = function() {/* do nothing */};\n}\n```", "```js\nfunction square(x) {\n  return x * x;\n}\n```", "```js\nconsole.log(\"The future says:\", future());\n\nfunction future() {\n  return \"You'll never have flying cars\";\n}\n```", "```js\nconst roundTo = (n, step) => {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\n```", "```js\nconst square1 = (x) => { return x * x; };\nconst square2 = x => x * x;\n```", "```js\nconst horn = () => {\n  console.log(\"Toot\");\n};\n```", "```js\nfunction greet(who) {\n  console.log(\"Hello \" + who);\n}\ngreet(\"Harry\");\nconsole.log(\"Bye\");\n```", "```js\nnot in function\n  in greet\n    in console.log\n  in greet\nnot in function\n  in console.log\nnot in function\n```", "```js\nfunction chicken() {\n  return egg();\n}\nfunction egg() {\n  return chicken();\n}\nconsole.log(chicken() + \" came first.\");\n// → ??\n```", "```js\nfunction square(x) { return x * x; }\nconsole.log(square(4, true, \"hedgehog\"));\n// → 16\n```", "```js\nfunction minus(a, b) {\n  if (b === undefined) return -a;\n  else return a - b;\n}\n\nconsole.log(minus(10));\n// → -10\nconsole.log(minus(10, 5));\n// → 5\n```", "```js\nfunction roundTo(n, step = 1) {\n  let remainder = n % step;\n  return n - remainder + (remainder < step / 2 ? 0 : step);\n};\nconsole.log(roundTo(4.5));\n// → 5\nconsole.log(roundTo(4.5, 2));\n// → 4\n```", "```js\nconsole.log(\"C\", \"O\", 2);\n// → C O 2\n```", "```js\nfunction wrapValue(n) {\n  let local = n;\n  return () => local;\n}\n\nlet wrap1 = wrapValue(1);\nlet wrap2 = wrapValue(2);\nconsole.log(wrap1());\n// → 1\nconsole.log(wrap2());\n// → 2\n```", "```js\nfunction multiplier(factor) {\n  return number => number * factor;\n}\n\nlet twice = multiplier(2);\nconsole.log(twice(5));\n// → 10\n```", "```js\nfunction power(base, exponent) {\n  if (exponent == 0) {\n    return 1;\n  } else {\n    return base * power(base, exponent - 1);\n  }\n}\n\nconsole.log(power(2, 3));\n// → 8\n```", "```js\nfunction findSolution(target) {\n  function find(current, history) {\n    if (current == target) {\n      return history;\n    } else if (current > target) {\n      return null;\n    } else {\n      return find(current + 5, `(${history} + 5)`) ??\n             find(current * 3, `(${history} * 3)`);\n    }\n  }\n  return find(1, \"1\");\n}\n\nconsole.log(findSolution(24));\n// → (((1 * 3) + 5) * 3)\n```", "```js\nfind(1, \"1\")\n  find(6, \"(1 + 5)\")\n    find(11, \"((1 + 5) + 5)\")\n      find(16, \"(((1 + 5) + 5) + 5)\")\n        too big\n      find(33, \"(((1 + 5) + 5) * 3)\")\n        too big\n    find(18, \"((1 + 5) * 3)\")\n      too big\n  find(3, \"(1 * 3)\")\n    find(8, \"((1 * 3) + 5)\")\n      find(13, \"(((1 * 3) + 5) + 5)\")\n        found!\n```", "```js\n007 Cows\n011 Chickens\n```", "```js\nfunction printFarmInventory(cows, chickens) {\n  let cowString = String(cows);\n  while (cowString.length < 3) {\n    cowString = \"0\" + cowString;\n  }\n  console.log(`${cowString} Cows`);\n  let chickenString = String(chickens);\n  while (chickenString.length < 3) {\n    chickenString = \"0\" + chickenString;\n  }\n  console.log(`${chickenString} Chickens`);\n}\nprintFarmInventory(7, 11);\n```", "```js\nfunction printZeroPaddedWithLabel(number, label) {\n  let numberString = String(number);\n  while (numberString.length < 3) {\n    numberString = \"0\" + numberString;\n  }\n  console.log(`${numberString} ${label}`);\n}\n\nfunction printFarmInventory(cows, chickens, pigs) {\n  printZeroPaddedWithLabel(cows, \"Cows\");\n  printZeroPaddedWithLabel(chickens, \"Chickens\");\n  printZeroPaddedWithLabel(pigs, \"Pigs\");\n}\n\nprintFarmInventory(7, 11, 3);\n```", "```js\nfunction zeroPad(number, width) {\n  let string = String(number);\n  while (string.length < width) {\n    string = \"0\" + string;\n  }\n  return string;\n}\n\nfunction printFarmInventory(cows, chickens, pigs) {\n  console.log(`${zeroPad(cows, 3)} Cows`);\n  console.log(`${zeroPad(chickens, 3)} Chickens`);\n  console.log(`${zeroPad(pigs, 3)} Pigs`);\n}\n\nprintFarmInventory(7, 16, 3);\n```", "```js\n// Define f to hold a function value\nconst f = function(a) {\n  console.log(a + 2);\n};\n// Declare g to be a function\nfunction g(a, b) {\n  return a * b * 3.5;\n}\n\n// A less verbose function value\nlet h = a => a % 3;\n```"]