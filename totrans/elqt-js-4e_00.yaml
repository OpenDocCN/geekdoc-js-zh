- en: '**INTRODUCTION**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a book about instructing computers. Computers are about as common as
    screwdrivers today, but they are quite a bit more complex, and making them do
    what you want them to do isn’t always easy.
  prefs: []
  type: TYPE_NORMAL
- en: If the task you have for your computer is a common, well-understood one, such
    as showing you your email or acting like a calculator, you can open the appropriate
    application and get to work. But for unique or open-ended tasks, there often is
    no appropriate application.
  prefs: []
  type: TYPE_NORMAL
- en: That is where programming may come in. *Programming* is the act of constructing
    a *program*—a set of precise instructions telling a computer what to do. Because
    computers are dumb, pedantic beasts, programming is fundamentally tedious and
    frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, if you can get over that fact—and maybe even enjoy the rigor of
    thinking in terms that dumb machines can deal with—programming can be rewarding.
    It allows you to do things in seconds that would take *forever* by hand. It is
    a way to make your computer tool do things that it couldn’t do before. On top
    of that, it makes for a wonderful game of puzzle solving and abstract thinking.
  prefs: []
  type: TYPE_NORMAL
- en: Most programming is done with programming languages. A *programming language*
    is an artificially constructed language used to instruct computers. It is interesting
    that the most effective way we’ve found to communicate with a computer borrows
    so heavily from the way we communicate with each other. Like human languages,
    computer languages allow words and phrases to be combined in new ways, making
    it possible to express ever new concepts.
  prefs: []
  type: TYPE_NORMAL
- en: At one point, language-based interfaces, such as the BASIC and DOS prompts of
    the 1980s and 1990s, were the main method of interacting with computers. For routine
    computer use, these have largely been replaced with visual interfaces, which are
    easier to learn but offer less freedom. But if you know where to look, the languages
    are still there. One of them, *JavaScript*, is built into every modern web browser—and
    is thus available on almost every device.
  prefs: []
  type: TYPE_NORMAL
- en: This book will try to make you familiar enough with this language to do useful
    and amusing things with it.
  prefs: []
  type: TYPE_NORMAL
- en: On Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides explaining JavaScript, I will introduce the basic principles of programming.
    Programming, it turns out, is hard. The fundamental rules are simple and clear,
    but programs built on top of these rules tend to become complex enough to introduce
    their own rules and complexity. You’re building your own maze, in a way, and you
    can easily get lost in it.
  prefs: []
  type: TYPE_NORMAL
- en: There will be times when reading this book feels terribly frustrating. If you
    are new to programming, there will be a lot of new material to digest. Much of
    this material will then be *combined* in ways that require you to make additional
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: It is up to you to make the necessary effort. When you are struggling to follow
    the book, do not jump to any conclusions about your own capabilities. You are
    fine—you just need to keep at it. Take a break, reread some material, and make
    sure you read and understand the example programs and exercises. Learning is hard
    work, but everything you learn is yours and will make further learning easier.
  prefs: []
  type: TYPE_NORMAL
- en: '*When action grows unprofitable, gather information; when information grows
    unprofitable, sleep.*'
  prefs: []
  type: TYPE_NORMAL
- en: —Ursula K. Le Guin, *The Left Hand of Darkness*
  prefs: []
  type: TYPE_NORMAL
- en: A program is many things. It is a piece of text typed by a programmer, it is
    the directing force that makes the computer do what it does, it is data in the
    computer’s memory, and, at the same time, it controls the actions performed on
    this memory. Analogies that try to compare programs to familiar objects tend to
    fall short. A superficially fitting one is to compare a program to a machine—lots
    of separate parts tend to be involved, and to make the whole thing tick, we have
    to consider the ways in which these parts interconnect and contribute to the operation
    of the whole.
  prefs: []
  type: TYPE_NORMAL
- en: A computer is a physical machine that acts as a host for these immaterial machines.
    Computers themselves can do only stupidly straightforward things. The reason they
    are so useful is that they do these things at an incredibly high speed. A program
    can ingeniously combine an enormous number of these simple actions to do very
    complicated things.
  prefs: []
  type: TYPE_NORMAL
- en: A program is a building of thought. It is costless to build, it is weightless,
    and it grows easily under our typing hands. But as a program grows, so does its
    complexity. The skill of programming is the skill of building programs that don’t
    confuse the programmer. The best programs are those that manage to do something
    interesting while still being easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Some programmers believe that this complexity is best managed by using only
    a small set of well-understood techniques in their programs. They have composed
    strict rules (“best practices”) prescribing the form that programs should have,
    and they carefully stay within their safe little zone.
  prefs: []
  type: TYPE_NORMAL
- en: This is not only boring—it is ineffective. New problems often require new solutions.
    The field of programming is young and still developing rapidly, and it is varied
    enough to have room for wildly different approaches. There are many terrible mistakes
    to make in program design, and you should go ahead and make them at least once
    so that you understand them. A sense of what a good program looks like is developed
    with practice, not learned from a list of rules.
  prefs: []
  type: TYPE_NORMAL
- en: Why Language Matters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the beginning, at the birth of computing, there were no programming languages.
    Programs looked something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a program to add the numbers from 1 to 10 together and print the result:
    1 + 2 + ... + 10 = 55. It could run on a simple hypothetical machine. To program
    early computers, it was necessary to set large arrays of switches in the right
    position or punch holes in strips of cardboard and feed them to the computer.
    You can imagine how tedious and error prone this procedure was. Even writing simple
    programs required much cleverness and discipline. Complex ones were nearly inconceivable.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, manually entering these arcane patterns of bits (the ones and zeros)
    did give the programmer a profound sense of being a mighty wizard. And that has
    to be worth something in terms of job satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each line of the previous program contains a single instruction. It could be
    written in English like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Store the number 0 in memory location 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the number 1 in memory location 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store the value of memory location 1 in memory location 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subtract the number 11 from the value in memory location 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the value in memory location 2 is the number 0, continue with instruction
    9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the value of memory location 1 to memory location 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the number 1 to the value of memory location 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue with instruction 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the value of memory location 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Although that is already more readable than the soup of bits, it is still rather
    obscure. Using names instead of numbers for the instructions and memory locations
    helps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Can you see how the program works at this point? The first two lines give two
    memory locations their starting values: total will be used to build up the result
    of the computation, and count will keep track of the number that we are currently
    looking at. The lines using compare are probably the most confusing ones. The
    program wants to see whether count is equal to 11 to decide whether it can stop
    running. Because our hypothetical machine is rather primitive, it can test only
    whether a number is zero and make a decision based on that. It therefore uses
    the memory location labeled compare to compute the value of count - 11 and makes
    a decision based on that value. The next two lines add the value of count to the
    result and increment count by 1 every time the program decides that count is not
    11 yet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the same program in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This version gives us a few more improvements. Most importantly, there is no
    need to specify the way we want the program to jump back and forth anymore—the
    while construct takes care of that. It continues executing the block (wrapped
    in braces) below it as long as the condition it was given holds. That condition
    is count <= 10, which means “the count is less than or equal to 10.” We no longer
    have to create a temporary value and compare that to zero, which was just an uninteresting
    detail. Part of the power of programming languages is that they can take care
    of uninteresting details for us.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the program, after the while construct has finished, the console.log
    operation is used to write out the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, here is what the program could look like if we happened to have the
    convenient operations range and sum available, which respectively create a collection
    of numbers within a range and compute the sum of a collection of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The moral of this story is that the same program can be expressed in both long
    and short, unreadable and readable ways. The first version of the program was
    extremely obscure, whereas this last one is almost English: log the sum of the
    range of numbers from 1 to 10\. (We will see in later chapters how to define operations
    like sum and range.)'
  prefs: []
  type: TYPE_NORMAL
- en: A good programming language helps the programmer by allowing them to talk about
    the actions that the computer has to perform on a higher level. It helps omit
    details, provides convenient building blocks (such as while and console.log),
    allows you to define your own building blocks (such as sum and range), and makes
    those blocks easy to compose.
  prefs: []
  type: TYPE_NORMAL
- en: What Is JavaScript?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript was introduced in 1995 as a way to add programs to web pages in the
    Netscape Navigator browser. The language has since been adopted by all other major
    graphical web browsers. It has made modern web applications possible—that is,
    applications with which you can interact directly without doing a page reload
    for every action. JavaScript is also used in more traditional websites to provide
    various forms of interactivity and cleverness.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that JavaScript has almost nothing to do with the programming
    language named Java. The similar name was inspired by marketing considerations
    rather than good judgment. When JavaScript was being introduced, the Java language
    was being heavily marketed and was gaining popularity. Someone thought it was
    a good idea to try to ride along on this success. Now we are stuck with the name.
  prefs: []
  type: TYPE_NORMAL
- en: After its adoption outside of Netscape, a standard document was written to describe
    the way the JavaScript language should work so that the various pieces of software
    that claimed to support JavaScript could make sure they actually provided the
    same language. This is called the ECMAScript standard, after the Ecma International
    organization that conducted the standardization. In practice, the terms ECMAScript
    and JavaScript can be used interchangeably—they are two names for the same language.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are those who will say *terrible* things about JavaScript. Many of these
    things are true. When I was required to write something in JavaScript for the
    first time, I quickly came to despise it. It would accept almost anything I typed
    but interpret it in a way that was completely different from what I meant. This
    had a lot to do with the fact that I did not have a clue what I was doing, of
    course, but there is a real issue here: JavaScript is ridiculously liberal in
    what it allows. The idea behind this design was that it would make programming
    in JavaScript easier for beginners. In actuality, it mostly makes finding problems
    in your programs harder because the system will not point them out to you.'
  prefs: []
  type: TYPE_NORMAL
- en: This flexibility also has its advantages, though. It leaves room for techniques
    that are impossible in more rigid languages and makes for a pleasant, informal
    style of programming. After learning the language properly and working with it
    for a while, I have come to actually *like* JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: There have been several versions of JavaScript. ECMAScript version 3 was the
    widely supported version during JavaScript’s ascent to dominance, roughly between
    2000 and 2010\. During this time, work was underway on an ambitious version 4,
    which planned a number of radical improvements and extensions to the language.
    Changing a living, widely used language in such a radical way turned out to be
    politically difficult, and work on version 4 was abandoned in 2008\. A much less
    ambitious version 5, which made only some uncontroversial improvements, came out
    in 2009\. In 2015, version 6 came out, a major update that included some of the
    ideas planned for version 4\. Since then we’ve had new, small updates every year.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that JavaScript is evolving means that browsers have to constantly
    keep up. If you’re using an older browser, it may not support every feature. The
    language designers are careful to not make any changes that could break existing
    programs, so new browsers can still run old programs. In this book, I’m using
    the 2024 version of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers are not the only platforms on which JavaScript is used. Some databases,
    such as MongoDB and CouchDB, use JavaScript as their scripting and query language.
    Several platforms for desktop and server programming, most notably the Node.js
    project (the subject of [Chapter 20](ch20.xhtml#ch20)), provide an environment
    for programming JavaScript outside of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Code, and What to Do with It
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Code* is the text that makes up programs. Most chapters in this book contain
    quite a lot of code. I believe reading code and writing code are indispensable
    parts of learning to program. Try to not just glance over the examples— read them
    attentively and understand them. This may be slow and confusing at first, but
    I promise that you’ll quickly get the hang of it. The same goes for the exercises.
    Don’t assume you understand them until you’ve actually written a working solution.'
  prefs: []
  type: TYPE_NORMAL
- en: I recommend you try your solutions to exercises in an actual JavaScript interpreter.
    That way, you’ll get immediate feedback on whether what you are doing is working,
    and, I hope, you’ll be tempted to experiment and go beyond the exercises.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to run the example code in the book—and to experiment with it—is
    to look it up in the online version of the book at *[https://eloquentjavascript.net](https://eloquentjavascript.net)*.
    There, you can click any code example to edit and run it and to see the output
    it produces. To work on the exercises, go to *[https://eloquentjavascript.net/code](https://eloquentjavascript.net/code)*,
    which provides starting code for each coding exercise and allows you to look at
    the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Running the programs defined in this book outside of the book’s web-site requires
    some care. Many examples stand on their own and should work in any JavaScript
    environment. But code in later chapters is often written for a specific environment
    (the browser or Node.js) and can run only there. In addition, many chapters define
    bigger programs, and the pieces of code that appear in them depend on each other
    or on external files. The sandbox on the website provides links to ZIP files containing
    all the scripts and data files necessary to run the code for a given chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book contains roughly three parts. The first 12 chapters discuss the JavaScript
    language. The next seven chapters are about web browsers and the way JavaScript
    is used to program them. Finally, two chapters are devoted to Node.js, another
    environment to program JavaScript in. There are five *project chapters* in the
    book that describe larger example programs to give you a taste of actual programming.
  prefs: []
  type: TYPE_NORMAL
- en: The language part of the book starts with four chapters that introduce the basic
    structure of the JavaScript language. They discuss control structures (such as
    the while word you saw in this introduction), functions (writing your own building
    blocks), and data structures. After these, you will be able to write basic programs.
    Next, [Chapters 5](ch05.xhtml#ch05) and [6](ch06.xhtml#ch06) introduce techniques
    to use functions and objects to write more *abstract* code and keep complexity
    under control.
  prefs: []
  type: TYPE_NORMAL
- en: After a first project chapter that builds a crude delivery robot, the language
    part of the book continues with chapters on error handling and bug fixing, regular
    expressions (an important tool for working with text), modularity (another defense
    against complexity), and asynchronous programming (dealing with events that take
    time). The second project chapter, where we implement a programming language,
    concludes the first part of the book.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the book, [Chapters 13](ch13.xhtml#ch13) to [19](ch19.xhtml#ch19),
    describes the tools that browser JavaScript has access to. You’ll learn to display
    things on the screen ([Chapters 14](ch14.xhtml#ch14) and [17](ch17.xhtml#ch17)),
    respond to user input ([Chapter 15](ch15.xhtml#ch15)), and communicate over the
    network ([Chapter 18](ch18.xhtml#ch18)). There are again two project chapters
    in this part, building a platform game and a pixel paint program.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 20](ch20.xhtml#ch20) describes Node.js and [Chapter 21](ch21.xhtml#ch21)
    builds a small website using that tool. Finally, [Chapter 22](ch22.xhtml#ch22)
    describes some of the considerations that come up when optimizing JavaScript programs
    for speed.'
  prefs: []
  type: TYPE_NORMAL
- en: Typographic Conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this book, text written in a monospaced font will represent elements of
    programs. Sometimes these are self-sufficient fragments, and sometimes they just
    refer to part of a nearby program. Programs (of which you have already seen a
    few) are written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, to show the output that a program produces, the expected output is
    written after it, with two slashes and an arrow in front.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Good luck!
  prefs: []
  type: TYPE_NORMAL
