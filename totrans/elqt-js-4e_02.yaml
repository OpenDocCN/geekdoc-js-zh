- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: VALUES, TYPES, AND OPERATORS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值、类型和运算符
- en: In the computer’s world, there is only data. You can read data, modify data,
    create new data—but that which isn’t data cannot be mentioned. All this data is
    stored as long sequences of bits and is thus fundamentally alike.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机的世界中，只有数据。你可以读取数据、修改数据、创建新数据——但不能提及非数据的东西。所有这些数据都以长序列的位存储，因此从根本上说是相似的。
- en: '*Bits* are any kind of two-valued things, usually described as zeros and ones.
    Inside the computer, they take forms such as a high or low electrical charge,
    a strong or weak signal, or a shiny or dull spot on the surface of a CD. Any piece
    of discrete information can be reduced to a sequence of zeros and ones and thus
    represented in bits.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*比特*是任何一种二值事物，通常被描述为零和一。在计算机内部，它们的形式可以是高电压或低电压、电信号强或弱，或者在CD表面上光亮或暗淡的点。任何离散信息都可以简化为零和一的序列，因此可以用比特表示。'
- en: 'For example, we can express the number 13 in bits. This works the same way
    as a decimal number, but instead of 10 different digits, we have only 2, and the
    weight of each increases by a factor of 2 from right to left. Here are the bits
    that make up the number 13, with the weights of the digits shown below them:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以用比特表示数字13。这与十进制数字的工作方式相同，但我们只有2个不同的数字，而每个数字的权重从右到左增加一个2的倍数。以下是构成数字13的比特，以及它们下面显示的数字权重：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s the binary number 00001101\. Its nonzero digits stand for 8, 4, and 1,
    and add up to 13.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那是二进制数00001101。它的非零数字代表8、4和1，总和为13。
- en: Values
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 值
- en: Imagine a sea of bits—an ocean of them. A typical modern computer has more than
    100 billion bits in its volatile data storage (working memory). Nonvolatile storage
    (the hard disk or equivalent) tends to have yet a few orders of magnitude more.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下位的海洋——一个庞大的位的海洋。典型的现代计算机在其易失性数据存储（工作内存）中有超过1000亿个比特。非易失性存储（硬盘或同类设备）往往要多几个数量级。
- en: To be able to work with such quantities of bits without getting lost, we separate
    them into chunks that represent pieces of information. In a Java-Script environment,
    those chunks are called *values*. Though all values are made of bits, they play
    different roles. Every value has a type that determines its role. Some values
    are numbers, some values are pieces of text, some values are functions, and so
    on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够处理如此数量的比特而不迷失，我们将它们分成表示信息块的块。在Java-Script环境中，这些块被称为*值*。虽然所有值都是由比特构成的，但它们扮演不同的角色。每个值都有一个确定其角色的类型。有些值是数字，有些值是文本片段，有些值是函数，等等。
- en: To create a value, you must merely invoke its name. This is convenient. You
    don’t have to gather building material for your values or pay for them. You just
    call for one, and *whoosh*, you have it. Of course, values are not really created
    from thin air. Each one has to be stored somewhere, and if you want to use a gigantic
    number of them at the same time, you might run out of computer memory. Fortunately,
    this is a problem only if you need them all simultaneously. As soon as you no
    longer use a value, it will dissipate, leaving behind its bits to be recycled
    as building material for the next generation of values.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个值，你只需调用它的名称。这非常方便。你不必为你的值收集建筑材料或为它们付费。你只需呼叫一个，*嗖*，你就得到了。当然，值并不是凭空产生的。每个值必须存储在某个地方，如果你希望同时使用大量的值，可能会耗尽计算机内存。幸运的是，只有在你需要它们全部时，这才是个问题。只要你不再使用某个值，它就会消散，留下它的比特以便作为下一代值的建筑材料被回收。
- en: The remainder of this chapter introduces the atomic elements of Java-Script
    programs—that is, the simple value types and the operators that can act on such
    values.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的剩余部分介绍Java-Script程序的原子元素——也就是简单值类型和可以作用于这些值的运算符。
- en: Numbers
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: 'Values of the *number* type are, unsurprisingly, numeric values. In a Java-Script
    program, they are written as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*number*类型的值，毫无疑问，是数字值。在Java-Script程序中，它们的书写方式如下：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using that in a program will cause the bit pattern for the number 13 to come
    into existence inside the computer’s memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中使用这个会导致数字13的比特模式在计算机的内存中产生。
- en: JavaScript uses a fixed number of bits, 64 of them, to store a single number
    value. There are only so many patterns you can make with 64 bits, which limits
    the number of different numbers that can be represented. With *N* decimal digits,
    you can represent 10^(*N*) numbers. Similarly, given 64 binary digits, you can
    represent 2^(64) different numbers, which is about 18 quintillion (an 18 with
    18 zeros after it). That’s a lot.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 使用固定数量的位数，64 位，来存储单个数字值。用 64 位可以组合的模式有限，这限制了可以表示的不同数字的数量。用 *N* 个十进制数字，你可以表示
    10^(*N*) 个数字。类似地，给定 64 个二进制位，你可以表示 2^(64) 个不同的数字，大约是 18 个 quintillion（后面有 18 个零的
    18）。这非常庞大。
- en: Computer memory used to be much smaller, and people tended to use groups of
    8 or 16 bits to represent their numbers. It was easy to accidentally *overflow*
    such small numbers—to end up with a number that did not fit into the given number
    of bits. Today, even computers that fit in your pocket have plenty of memory,
    so you are free to use 64-bit chunks, and you need to worry about overflow only
    when dealing with truly astronomical numbers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机内存曾经小得多，人们通常使用 8 位或 16 位的组合来表示数字。意外的 *溢出* 小数字很容易发生——即得到一个无法适应给定位数的数字。如今，即便是口袋里的计算机内存也非常充裕，所以你可以自由使用
    64 位，而只有在处理真正庞大的数字时才需担心溢出。
- en: Not all whole numbers less than 18 quintillion fit in a JavaScript number, though.
    Those bits also store negative numbers, so one bit indicates the sign of the number.
    A bigger issue is representing nonwhole numbers. To do this, some of the bits
    are used to store the position of the decimal point. The actual maximum whole
    number that can be stored is more in the range of 9 quadrillion (15 zeros)—which
    is still pleasantly huge.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有小于 18 quintillion 的整数都能适应 JavaScript 数字。这些位还存储负数，所以有一位用于指示数字的符号。更大的问题是表示非整数。为此，一些位被用于存储小数点的位置。实际上，能存储的最大整数更接近
    9 万亿（15 个零）——这仍然是相当巨大的。
- en: Fractional numbers are written using a dot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 分数用小数点表示。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For very big or very small numbers, you may also use scientific notation by
    adding an *e* (for *exponent*), followed by the exponent of the number.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常大或非常小的数字，你还可以通过添加 *e*（代表 *指数*）及数字的指数来使用科学记数法。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That’s 2.998 *×* 10⁸ = 299,800,000.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 2.998 *×* 10⁸ = 299,800,000。
- en: Calculations with whole numbers (also called *integers*) that are smaller than
    the aforementioned 9 quadrillion are guaranteed to always be precise. Unfortunately,
    calculations with fractional numbers are generally not. Just as *π* (pi) cannot
    be precisely expressed by a finite number of decimal digits, many numbers lose
    some precision when only 64 bits are available to store them. This is a shame,
    but it causes practical problems only in specific situations. The important thing
    is to be aware of it and treat fractional digital numbers as approximations, not
    as precise values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小于前述 9 万亿的整数（也称为 *整数*）进行的计算，确保始终是精确的。遗憾的是，分数计算通常并非如此。正如 *π*（圆周率）无法用有限的十进制数字精确表示，许多数字在仅有
    64 位可用存储时会失去一些精度。这虽然令人遗憾，但在特定情况下才会引发实际问题。重要的是要意识到这一点，并将分数字符视为近似值，而非精确值。
- en: '*Arithmetic*'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*算术*'
- en: 'The main thing to do with numbers is arithmetic. Arithmetic operations such
    as addition or multiplication take two number values and produce a new number
    from them. Here is what they look like in JavaScript:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 数字的主要操作是算术。算术运算如加法或乘法需要两个数字值，并生成一个新数字。以下是在 JavaScript 中的表示方式：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The + and * symbols are called *operators*. The first stands for addition and
    the second stands for multiplication. Putting an operator between two values will
    apply it to those values and produce a new value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: + 和 * 符号称为 *运算符*。第一个表示加法，第二个表示乘法。在两个值之间放置一个运算符将对这些值应用它，并生成一个新值。
- en: Does this example mean “Add 4 and 100, and multiply the result by 11,” or is
    the multiplication done before the adding? As you might have guessed, the multiplication
    happens first. As in mathematics, you can change this by wrapping the addition
    in parentheses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是指“将 4 和 100 相加，然后将结果乘以 11”，还是乘法在加法之前进行？正如你可能猜到的，乘法优先进行。与数学一样，你可以通过将加法用括号括起来来改变这一点。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For subtraction, there is the - operator. Division can be done with the / operator.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于减法，有 - 运算符。除法可以使用 / 运算符。
- en: 'When operators appear together without parentheses, the order in which they
    are applied is determined by the *precedence* of the operators. The example shows
    that multiplication comes before addition. The / operator has the same precedence
    as *. Likewise, + and - have the same precedence. When multiple operators with
    the same precedence appear next to each other, as in 1 - 2 + 1, they are applied
    left to right: (1 - 2) + 1.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当操作符没有括号一起出现时，它们的应用顺序由操作符的*优先级*决定。示例显示乘法优先于加法。/ 操作符与 * 操作符具有相同的优先级。同样，+ 和 -
    也具有相同的优先级。当多个具有相同优先级的操作符并排出现时，如 1 - 2 + 1，它们是从左到右应用的： (1 - 2) + 1。
- en: Don’t worry too much about these precedence rules. When in doubt, just add parentheses.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不必过于担心这些优先级规则。如果有疑问，只需添加括号。
- en: There is one more arithmetic operator, which you might not immediately recognize.
    The % symbol is used to represent the *remainder* operation. X % Y is the remainder
    of dividing X by Y. For example, 314 % 100 produces 14, and 144 % 12 gives 0.
    The remainder operator’s precedence is the same as that of multiplication and
    division. You’ll also often see this operator referred to as *modulo*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个算术操作符，你可能不会立即认出来。% 符号用于表示 *余数* 操作。X % Y 是将 X 除以 Y 的余数。例如，314 % 100 产生 14，144
    % 12 结果为 0。余数操作符的优先级与乘法和除法相同。你也会经常看到这个操作符被称为 *模*。
- en: '*Special Numbers*'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*特殊数字*'
- en: 'There are three special values in JavaScript that are considered numbers but
    don’t behave like normal numbers. The first two are Infinity and -Infinity, which
    represent the positive and negative infinities. Infinity - 1 is still Infinity,
    and so on. Don’t put too much trust in infinity-based computation, though. It
    isn’t mathematically sound, and it will quickly lead to the next special number:
    NaN.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，有三个特殊值被视为数字，但它们的行为不同于正常数字。前两个是 Infinity 和 -Infinity，表示正无穷和负无穷。Infinity
    - 1 仍然是 Infinity，依此类推。不过，不要过于相信基于无穷的计算。它在数学上并不严谨，并且很快会导致下一个特殊数字：NaN。
- en: NaN stands for “not a number,” even though it *is* a value of the number type.
    You’ll get this result when you, for example, try to calculate 0 / 0 (zero divided
    by zero), Infinity - Infinity, or any number of other numeric operations that
    don’t yield a meaningful result.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: NaN 代表“不是一个数字”，尽管它 *是* 数字类型的一个值。当你尝试计算 0 / 0（零除以零）、Infinity - Infinity 或其他一些没有意义的数字运算时，你会得到这个结果。
- en: Strings
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: The next basic data type is the *string*. Strings are used to represent text.
    They are written by enclosing their content in quotes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个基本数据类型是 *字符串*。字符串用于表示文本。它们通过用引号括起内容来书写。
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can use backticks, double quotes, or single quotes to mark strings, as long
    as the quotes at the start and the end of the string match.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用反引号、双引号或单引号来标记字符串，只要字符串开头和结尾的引号匹配。
- en: You can put almost anything between quotes to have JavaScript make a string
    value out of it. But a few characters are more difficult. You can imagine how
    putting quotes between quotes might be hard, since they will look like the end
    of the string. *Newlines* (the characters you get when you press ENTER) can be
    included only when the string is quoted with backticks (`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以在引号之间放入任何内容，让 JavaScript 将其转换为字符串值。但有些字符比较困难。你可以想象在引号之间放置引号可能会很麻烦，因为它们看起来像是字符串的结束。*换行*（当你按下
    ENTER 时得到的字符）只能在用反引号（`）引起来的字符串中包含。
- en: 'To make it possible to include such characters in a string, the following notation
    is used: a backslash (\) inside quoted text indicates that the character after
    it has a special meaning. This is called *escaping* the character. A quote that
    is preceded by a backslash will not end the string but be part of it. When an
    n character occurs after a backslash, it is interpreted as a new-line. Similarly,
    a t after a backslash means a tab character. Take the following string:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在字符串中包含这些字符，使用以下表示法：在引号文本中，反斜杠（\）表示后面的字符具有特殊含义。这称为*转义*字符。前面有反斜杠的引号不会结束字符串，而是成为字符串的一部分。当
    n 字符出现在反斜杠后面时，它被解释为换行。同样，反斜杠后面的 t 表示制表符。考虑以下字符串：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is the actual text in that string:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该字符串中的实际文本：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are, of course, situations where you want a backslash in a string to
    be just a backslash, not a special code. If two backslashes follow each other,
    they will collapse together, and only one will be left in the resulting string
    value. This is how the string “*A newline character is written like* “*\n*”*.*”
    can be expressed:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有时你希望字符串中的反斜杠仅仅是反斜杠，而不是特殊代码。如果两个反斜杠相连，它们将合并在一起，结果字符串值中只会剩下一个。这就是字符串 “*换行字符的写法是*
    “*\n*”*。” 的表达方式：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Strings, too, have to be modeled as a series of bits to be able to exist inside
    the computer. The way JavaScript does this is based on the *Unicode* standard.
    This standard assigns a number to virtually every character you would ever need,
    including characters from Greek, Arabic, Japanese, Armenian, and so on. If we
    have a number for every character, a string can be described by a sequence of
    numbers. And that’s what JavaScript does.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串同样需要被建模为一系列位，以便能够存在于计算机中。JavaScript 这样做的方式是基于 *Unicode* 标准。该标准为几乎每个你可能需要的字符分配一个数字，包括希腊文、阿拉伯文、日文、亚美尼亚文等等。如果我们为每个字符都有一个数字，那么字符串可以用一串数字来描述。这就是
    JavaScript 所做的。
- en: 'There’s a complication, though: JavaScript’s representation uses 16 bits per
    string element, which can describe up to 2^(16) different characters. However,
    Unicode defines more characters than that—about twice as many, at this point.
    So some characters, such as many emoji, take up two “character positions” in JavaScript
    strings. We’ll come back to this in [Chapter 5](ch05.xhtml#ch05).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不过有一个复杂性：JavaScript 的表示法使用每个字符串元素16位，这可以描述多达 2^(16) 个不同的字符。然而，Unicode 定义的字符数量超过这个限制——目前大约是其两倍。因此，一些字符，比如许多表情符号，在
    JavaScript 字符串中占用两个“字符位置”。我们将在[第5章](ch05.xhtml#ch05)中回到这个问题。
- en: 'Strings cannot be divided, multiplied, or subtracted. The + operator *can*
    be used on them, not to add, but to *concatenate*—to glue two strings together.
    The following line will produce the string “concatenate”:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串不能被除、乘或减。+ 操作符 *可以* 用于它们，不是用于相加，而是用于 *连接*——将两个字符串粘合在一起。以下行将产生字符串“concatenate”：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: String values have a number of associated functions (*methods*) that can be
    used to perform other operations on them. I’ll say more about these in [Chapter
    4](ch04.xhtml#ch04).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串值有多个相关的函数（*方法*），可以用来对它们执行其他操作。我将在[第4章](ch04.xhtml#ch04)中详细说明这些。
- en: Strings written with single or double quotes behave very much the same; the
    only difference lies in which type of quote you need to escape inside of them.
    Backtick-quoted strings, usually called *template literals*, can do a few more
    tricks. Apart from being able to span lines, they can also embed other values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用单引号或双引号写的字符串行为非常相似；唯一的区别在于你需要转义的引号类型。反引号引起来的字符串，通常称为 *模板字面量*，可以做一些更多的技巧。除了能够跨越多行外，它们还可以嵌入其他值。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you write something inside ${} in a template literal, its result will be
    computed, converted to a string, and included at that position. This example produces
    the string “half of 100 is 50”.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模板字面量中写入 ${} 内的内容时，其结果将被计算、转换为字符串，并包含在该位置。这个例子产生的字符串是“100的一半是50”。
- en: Unary Operators
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一元操作符
- en: Not all operators are symbols. Some are written as words. One example is the
    typeof operator, which produces a string value naming the type of the value you
    give it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有操作符都是符号。有些是用单词书写的。一个例子是 typeof 操作符，它会生成一个字符串值，指明你提供的值的类型。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will use console.log in example code to indicate that we want to see the
    result of evaluating something. (More about that in the next chapter.)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在示例代码中使用 `console.log` 来指示我们想要查看某个表达式的计算结果。（更多内容将在下一章讨论。）
- en: The other operators shown so far in this chapter all operated on two values,
    but typeof takes only one. Operators that use two values are called *binary* operators,
    while those that take one are called *unary* operators. The minus operator (-)
    can be used both as a binary operator and as a unary operator.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本章迄今为止显示的其他操作符都作用于两个值，但 typeof 只接受一个。使用两个值的操作符称为 *二元* 操作符，而只接受一个的称为 *一元* 操作符。减号操作符（-）可以同时作为二元操作符和一元操作符使用。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Boolean Values
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔值
- en: It is often useful to have a value that distinguishes between only two possibilities,
    like “yes” and “no” or “on” and “off.” For this purpose, JavaScript has a *Boolean*
    type, which has just two values, true and false, written as those words.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，有一个值用来区分只有两个可能性是很有用的，比如“是”和“否”或“开”和“关”。为此，JavaScript 有一个 *布尔* 类型，它只有两个值：true
    和 false，以这两个词书写。
- en: '*Comparison*'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*比较*'
- en: 'Here is one way to produce Boolean values:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成布尔值的一种方式：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The > and < signs are the traditional symbols for “is greater than” and “is
    less than,” respectively. They are binary operators. Applying them results in
    a Boolean value that indicates whether they hold true in this case.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '> 和 < 符号分别是“更大于”和“更小于”的传统符号。它们是二元运算符。应用它们的结果是一个布尔值，指示它们在此情况下是否成立。'
- en: Strings can be compared in the same way.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以以相同的方式进行比较。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The way strings are ordered is roughly alphabetic but not really what you’d
    expect to see in a dictionary: uppercase letters are always “less” than lowercase
    ones, so “Z” < “a”, and nonalphabetic characters (!, -, and so on) are also included
    in the ordering. When comparing strings, JavaScript goes over the characters from
    left to right, comparing the Unicode codes one by one.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的排序方式大致上是字母顺序，但并不是你在字典中预期看到的那样：大写字母总是“少于”小写字母，因此“Z” < “a”，而且非字母字符（！、- 等）也包含在排序中。在比较字符串时，JavaScript
    从左到右逐个比较字符的 Unicode 代码。
- en: Other similar operators are >= (greater than or equal to), <= (less than or
    equal to), == (equal to), and != (not equal to).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类似的运算符有 >=（大于或等于）、<=（小于或等于）、==（等于）和 !=（不等于）。
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is only one value in JavaScript that is not equal to itself, and that
    is NaN (“not a number”).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，唯一一个不等于自身的值是 NaN（“不是一个数字”）。
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: NaN is supposed to denote the result of a nonsensical computation, so it isn’t
    equal to the result of any *other* nonsensical computations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: NaN 用于表示无意义计算的结果，因此它不等于任何*其他*无意义计算的结果。
- en: '*Logical Operators*'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*逻辑运算符*'
- en: 'There are also some operations that can be applied to Boolean values themselves.
    JavaScript supports three logical operators: *and*, *or*, and *not*. These can
    be used to “reason” about Booleans.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些操作可以直接应用于布尔值本身。JavaScript 支持三种逻辑运算符：*与*、*或*和*非*。这些可以用来对布尔值进行“推理”。
- en: The && operator represents logical *and*. It is a binary operator, and its result
    is true only if both the values given to it are true.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '&& 运算符表示逻辑*与*。它是一个二元运算符，仅当给它的两个值都为真时，其结果才为真。'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The || operator denotes logical *or*. It produces true if either of the values
    given to it is true.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '|| 运算符表示逻辑*或*。如果给它的任何值为真，它的结果就是 true。'
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Not* is written as an exclamation mark (!). It is a unary operator that flips
    the value given to it—!true produces false and !false gives true.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*非*（Not）写作感叹号（！）。它是一个一元运算符，反转给它的值——!true 产生 false，而 !false 产生 true。'
- en: 'When mixing these Boolean operators with arithmetic and other operators, it
    is not always obvious when parentheses are needed. In practice, you can usually
    get by with knowing that of the operators we have seen so far, || has the lowest
    precedence, then comes &&, then the comparison operators (>, ==, and so on), and
    then the rest. This order has been chosen such that, in typical expressions like
    the following one, as few parentheses as possible are necessary:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在将这些布尔运算符与算术和其他运算符混合时，并不总是明显需要括号。在实践中，你通常可以知道到目前为止我们看到的运算符中，|| 的优先级最低，然后是 &&，接下来是比较运算符（>、==
    等），最后是其他。这种顺序的选择旨在使以下典型表达式中尽可能少地需要括号：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The last logical operator we will look at is not unary, not binary, but *ternary*,
    operating on three values. It is written with a question mark and a colon, like
    this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的最后一个逻辑运算符是非一元、非二元，而是*三元*，操作三个值。它的写法是用一个问号和一个冒号，如下所示：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This one is called the *conditional* operator (or sometimes just *the ternary
    operator* since it is the only such operator in the language). The operator uses
    the value to the left of the question mark to decide which of the two other values
    to “pick.” If you write a ? b : c, the result will be b when a is true and c otherwise.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '这个被称为*条件*运算符（有时简称为*三元运算符*，因为它是该语言中唯一的此类运算符）。该运算符使用问号左侧的值来决定“选择”哪两个值中的一个。如果你写
    a ? b : c，当 a 为真时结果为 b，否则为 c。'
- en: Empty Values
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空值
- en: Two special values, written null and undefined, are used to denote the absence
    of a *meaningful* value. They are themselves values, but they carry no information.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 两个特殊值，写作 null 和 undefined，用于表示缺少*有意义*的值。它们本身是值，但不携带任何信息。
- en: Many operations in the language that don’t produce a meaningful value yield
    undefined simply because they have to yield *some* value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 语言中许多不产生有意义值的操作会产生 undefined，仅仅因为它们必须产生*某个*值。
- en: The difference in meaning between undefined and null is an accident of JavaScript’s
    design, and it doesn’t matter most of the time. In cases where you actually have
    to concern yourself with these values, I recommend treating them as mostly interchangeable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: undefined和null之间的意义差异是JavaScript设计的一个意外，大多数情况下这并不重要。在你需要关注这些值的情况下，我建议将它们视为大致可互换的。
- en: Automatic Type Conversion
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动类型转换
- en: 'In the introduction, I mentioned that JavaScript goes out of its way to accept
    almost any program you give it, even programs that do odd things. This is nicely
    demonstrated by the following expressions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍中，我提到JavaScript不遗余力地接受几乎任何你给它的程序，甚至是做奇怪事情的程序。以下表达式很好地展示了这一点：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When an operator is applied to the “wrong” type of value, JavaScript will quietly
    convert that value to the type it needs, using a set of rules that often aren’t
    what you want or expect. This is called *type coercion*. The null in the first
    expression becomes 0 and the “5” in the second expression becomes 5 (from string
    to number). Yet in the third expression, + tries string concatenation before numeric
    addition, so the 1 is converted to “1” (from number to string).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当运算符应用于“错误”的类型值时，JavaScript会悄悄地将该值转换为所需的类型，使用的一套规则通常不是你想要或期望的。这被称为*类型强制转换*。第一个表达式中的null变成0，第二个表达式中的“5”变成5（从字符串到数字）。然而在第三个表达式中，+在进行数字相加之前会尝试字符串拼接，因此1被转换为“1”（从数字到字符串）。
- en: When something that doesn’t map to a number in an obvious way (such as “five”
    or undefined) is converted to a number, you get the value NaN. Further arithmetic
    operations on NaN keep producing NaN, so if you find yourself getting one of those
    in an unexpected place, look for accidental type conversions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当某个值在明显意义上无法映射为数字（例如“five”或undefined）时，被转换为数字后会得到NaN。对NaN的进一步算术操作仍然会产生NaN，因此如果你在意想不到的地方遇到这种情况，请检查是否发生了意外的类型转换。
- en: 'When comparing values of the same type using the == operator, the outcome is
    easy to predict: you should get true when both values are the same, except in
    the case of NaN. But when the types differ, JavaScript uses a complicated and
    confusing set of rules to determine what to do. In most cases, it just tries to
    convert one of the values to the other value’s type. However, when null or undefined
    occurs on either side of the operator, it produces true only if both sides are
    one of null or undefined.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用==运算符比较相同类型的值时，结果是容易预测的：如果两个值相同，你应该得到true，除了NaN的情况。但是，当类型不同，JavaScript会使用一套复杂而混乱的规则来决定如何处理。在大多数情况下，它只是尝试将其中一个值转换为另一个值的类型。然而，当运算符两侧有null或undefined时，只有在两侧都是null或undefined之一时才会返回true。
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That behavior is often useful. When you want to test whether a value has a real
    value instead of null or undefined, you can compare it to null with the == or
    != operator.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为通常很有用。当你想测试一个值是否具有实际的值而不是null或undefined时，可以用==或!=运算符将其与null进行比较。
- en: 'What if you want to test whether something refers to the precise value false?
    Expressions like 0 == false and "" == false are also true because of automatic
    type conversion. When you do *not* want any type conversions to happen, there
    are two additional operators: === and !==. The first tests whether a value is
    *precisely* equal to the other, and the second tests whether it is not precisely
    equal. Thus "" === false is false, as expected.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想测试某个东西是否确切指向false值呢？像0 == false和"" == false这样的表达式也为真，因为自动类型转换。当你*不*希望发生任何类型转换时，还有两个额外的运算符：===和!==。第一个测试一个值是否*精确*等于另一个，第二个测试是否不精确等于。因此，""
    === false是false，正如预期的那样。
- en: I recommend using the three-character comparison operators defensively to prevent
    unexpected type conversions from tripping you up. But when you’re certain the
    types on both sides will be the same, there is no problem with using the shorter
    operators.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议防御性地使用三字符比较运算符，以防止意外的类型转换让你困扰。但当你确信两侧的类型将相同时，使用较短的运算符没有问题。
- en: '*Short-Circuiting of Logical Operators*'
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*逻辑运算符的短路*'
- en: The logical operators && and || handle values of different types in a peculiar
    way. They will convert the value on their left side to Boolean type in order to
    decide what to do, but depending on the operator and the result of that conversion,
    they will return either the *original* left-hand value or the right-hand value.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算符&&和||以一种特殊的方式处理不同类型的值。它们会将左侧的值转换为布尔类型以决定如何操作，但根据运算符和转换结果，它们会返回*原始*的左侧值或右侧值。
- en: The || operator, for example, will return the value to its left when that value
    can be converted to true and will return the value on its right otherwise. This
    has the expected effect when the values are Boolean and does something analogous
    for values of other types.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，||运算符将在左侧的值可以转换为true时返回该值，否则返回右侧的值。当值为布尔值时，这具有预期效果，对其他类型的值也做类似处理。
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We can use this functionality as a way to fall back on a default value. If you
    have a value that might be empty, you can put || after it with a replacement value.
    If the initial value can be converted to false, you’ll get the replacement instead.
    The rules for converting strings and numbers to Boolean values state that 0, NaN,
    and the empty string ("") count as false, while all the other values count as
    true. That means 0 || -1 produces -1, and "" || “!?” yields “!?”.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个功能作为回退到默认值的一种方式。如果你有一个可能为空的值，可以在其后加上||和替代值。如果初始值可以转换为false，你将得到替代值。将字符串和数字转换为布尔值的规则规定，0、NaN和空字符串（""）视为false，而其他所有值都视为true。这意味着0
    || -1产生-1，"" || “!？”得“！？”。
- en: The ?? operator resembles || but returns the value on the right only if the
    one on the left is null or undefined, not if it is some other value that can be
    converted to false. Often, this is preferable to the behavior of ||.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ??运算符与||类似，但仅在左侧的值为null或undefined时返回右侧的值，而不是其他可以转换为false的值。通常，这比||的行为更可取。
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The && operator works similarly but the other way around. When the value to
    its left is something that converts to false, it returns that value, and otherwise
    it returns the value on its right.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '&&运算符类似，但方向相反。当左侧的值是转换为false的东西时，它返回该值，否则返回右侧的值。'
- en: Another important property of these two operators is that the part to their
    right is evaluated only when necessary. In the case of true || X, no matter what
    X is—even if it’s a piece of program that does something *terrible*—the result
    will be true, and X is never evaluated. The same goes for false && X, which is
    false and will ignore X. This is called *short-circuit evaluation*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个运算符的另一个重要特性是，它们右侧的部分只有在必要时才会被计算。在true || X的情况下，无论X是什么——即使它是一个做一些*可怕*事情的程序——结果将为true，X从不被计算。false
    && X也是如此，它是false并将忽略X。这被称为*短路评估*。
- en: The conditional operator works in a similar way. Of the second and third values,
    only the one that is selected is evaluated.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 条件运算符的工作方式类似。第二和第三个值中，只有被选择的那个会被计算。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'We looked at four types of JavaScript values in this chapter: numbers, strings,
    Booleans, and undefined values. Such values are created by typing in their name
    (true, null) or value (13, “abc”).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了四种类型的JavaScript值：数字、字符串、布尔值和未定义值。这些值可以通过输入其名称（true、null）或值（13、"abc"）来创建。
- en: You can combine and transform values with operators. We saw binary operators
    for arithmetic (+, -, *, /, and %), string concatenation (+), comparison (==,
    !=, ===, !==, <, >, <=, >=), and logic (&&, ||, ??), as well as several unary
    operators (- to negate a number, ! to negate logically, and typeof to find a value’s
    type) and a ternary operator (?:) to pick one of two values based on a third value.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用运算符组合和转换值。我们看到的二元运算符包括算术运算（+、-、*、/和%）、字符串连接（+）、比较（==、!=、===、!==、<、>、<=、>=）以及逻辑运算（&&、||、??），还有几个一元运算符（-用于取反一个数字，!用于逻辑取反，以及typeof用于查找值的类型）和一个三元运算符(?:)用于根据第三个值选择两个值中的一个。
- en: This gives you enough information to use JavaScript as a pocket calculator but
    not much more. The next chapter will start tying these expressions together into
    basic programs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这为你提供了足够的信息来将JavaScript用作口袋计算器，但仅此而已。下一章将开始将这些表达式结合成基本程序。
- en: '*And my heart glows bright red under my filmy, translucent skin and they have
    to administer 10cc of JavaScript to get me to come back. (I respond well to toxins
    in the blood.) Man, that stuff will kick the peaches right out your gills!*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*在我薄薄的、半透明的皮肤下，我的心脏闪耀着亮红色，他们不得不给我注射10cc的JavaScript才能让我恢复。（我对血液中的毒素反应良好。）天啊，那东西会让你的腮帮子嗓子都冒桃子！*'
- en: —_why, *Why’s (Poignant) Guide to Ruby*
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: —_为何，*Why’s (Poignant) Guide to Ruby*
- en: '![Image](../images/f0022-01.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0022-01.jpg)'
