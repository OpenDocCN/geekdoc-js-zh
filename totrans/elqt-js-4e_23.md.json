["```js\nlet message = \"Hello world\";\nconsole.log(message);\n```", "```js\n$ node hello.js\nHello world\n```", "```js\n$ node\n> 1 + 1\n2\n> [-1, -2, -3].map(Math.abs)\n[1, 2, 3]\n> process.exit(0)\n$\n```", "```js\n$ node showargv.js one --and two\n[\"node\", \"/tmp/showargv.js\", \"one\", \"--and\", \"two\"]\n```", "```js\nimport {reverse} from \"./reverse.mjs\";\n\n// Index 2 holds the first actual command line argument\nlet argument = process.argv[2];\n\nconsole.log(reverse(argument));\n```", "```js\nexport function reverse(string) {\n  return Array.from(string).reverse().join(\"\");\n}\n```", "```js\n$ node main.mjs JavaScript\ntpircSavaJ\n```", "```js\n$ npm install ini\nadded 1 package in 723ms\n\n$ node\n> const {parse} = require(\"ini\");\n> parse(\"x = 1\\ny = 2\");\n{ x: '1', y: '2' }\n```", "```js\n{\n  \"author\": \"Marijn Haverbeke\",\n  \"name\": \"eloquent-javascript-robot\",\n  \"description\": \"Simulation of a package-delivery robot\",\n  \"version\": \"1.0.0\",\n  \"main\": \"run.mjs\",\n  \"dependencies\": {\n    \"dijkstrajs\": \"^1.0.1\",\n    \"random-item\": \"^1.0.0\"\n  },\n  \"license\": \"ISC\"\n}\n```", "```js\nimport {readFile} from \"node:fs\";\nreadFile(\"file.txt\", \"utf8\", (error, text) => {\n  if (error) throw error;\n  console.log(\"The file contains:\", text);\n});\n```", "```js\nimport {readFile} from \"node:fs\";\nreadFile(\"file.txt\", (error, buffer) => {\n  if (error) throw error;\n  console.log(\"The file contained\", buffer.length, \"bytes.\",\n              \"The first byte is:\", buffer[0]);\n});\n```", "```js\nimport {writeFile} from \"node:fs\";\nwriteFile(\"graffiti.txt\", \"Node was here\", err => {\n  if (err) console.log(`Failed to write file: ${err}`);\n  else console.log(\"File written.\");\n});\n```", "```js\nimport {readFile} from \"node:fs/promises\";\nreadFile(\"file.txt\", \"utf8\")\n  .then(text => console.log(\"The file contains:\", text));\n```", "```js\nimport {readFileSync} from \"node:fs\";\nconsole.log(\"The file contains:\",\n            readFileSync(\"file.txt\", \"utf8\"));\n```", "```js\nimport {createServer} from \"node:http\";\nlet server = createServer((request, response) => {\n  response.writeHead(200, {\"Content-Type\": \"text/html\"});\n  response.write(`\n    <h1>Hello!</h1>\n    <p>You asked for <code>${request.url}</code></p>`);\n  response.end();\n});\nserver.listen(8000);\nconsole.log(\"Listening! (port 8000)\");\n```", "```js\nimport {createServer} from \"node:http\";\ncreateServer((request, response) => {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  request.on(\"data\", chunk =>\n    response.write(chunk.toString().toUpperCase()));\n  request.on(\"end\", () => response.end());\n}).listen(8000);\n```", "```js\nfetch(\"http://localhost:8000/\", {\n  method: \"POST\",\n  body: \"Hello server\"\n}).then(resp => resp.text()).then(console.log);\n// â†’ HELLO SERVER\n```", "```js\nimport {createServer} from \"node:http\";\n\nconst methods = Object.create(null);\n\ncreateServer((request, response) => {\n  let handler = methods[request.method] || notAllowed;\n  handler(request).catch(error => {\n    if (error.status != null) return error;\n    return {body: String(error), status: 500};\n  }).then(({body, status = 200, type = \"text/plain\"}) => {\n    response.writeHead(status, {\"Content-Type\": type});\n    if (body?.pipe) body.pipe(response);\n    else response.end(body);\n  });\n}).listen(8000);\n\nasync function notAllowed(request) {\n  return {\n    status: 405,\n    body: `Method ${request.method} not allowed.`\n  };\n}\n```", "```js\nimport {resolve, sep} from \"node:path\";\n\nconst baseDirectory = process.cwd();\n\nfunction urlPath(url) {\n  let {pathname} = new URL(url, \"http://d\");\n  let path = resolve(decodeURIComponent(pathname).slice(1));\n  if (path != baseDirectory &&\n      !path.startsWith(baseDirectory + sep)) {\n    throw {status: 403, body: \"Forbidden\"};\n  }\n  return path;\n}\n```", "```js\n$ npm install mime-types@2.1.0\n```", "```js\nimport {createReadStream} from \"node:fs\";\nimport {stat, readdir} from \"node:fs/promises\";\nimport {lookup} from \"mime-types\";\n\nmethods.GET = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    else return {status: 404, body: \"File not found\"};\n  }\n  if (stats.isDirectory()) {\n    return {body: (await readdir(path)).join(\"\\n\")};\n  } else {\n    return {body: createReadStream(path),\n            type: lookup(path)};\n  }\n};\n```", "```js\nimport {rmdir, unlink} from \"node:fs/promises\";\n\nmethods.DELETE = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    else return {status: 204};\n  }\n  if (stats.isDirectory()) await rmdir(path);\n  else await unlink(path);\n  return {status: 204};\n};\n```", "```js\nimport {createWriteStream} from \"node:fs\";\n\nfunction pipeStream(from, to) {\n  return new Promise((resolve, reject) => {\n    from.on(\"error\", reject);\n    to.on(\"error\", reject);\n    to.on(\"finish\", resolve);\n    from.pipe(to);\n  });\n}\n\nmethods.PUT = async function(request) {\n  let path = urlPath(request.url);\n  await pipeStream(request, createWriteStream(path));\n  return {status: 204};\n};\n```", "```js\n$ curl http://localhost:8000/file.txt\nFile not found\n$ curl -X PUT -d CONTENT http://localhost:8000/file.txt\n$ curl http://localhost:8000/file.txt\nCONTENT\n$ curl -X DELETE http://localhost:8000/file.txt\n$ curl http://localhost:8000/file.txt\nFile not found\n```"]